module Access =

let LOWERCASE
  : regexp =
  "a"
    | "b"
    | "c"
    | "d"
    | "e"
    | "f"
    | "g"
    | "h"
    | "i"
    | "j"
    | "k"
    | "l"
    | "m"
    | "n"
    | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" 

let UPPERCASE
  : regexp =
  "A"
    | "B"
    | "C"
    | "D"
    | "E"
    | "F"
    | "G"
    | "H"
    | "I"
    | "J"
    | "K"
    | "L"
    | "M"
    | "N"
    | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" 

let DIGIT
  : regexp =
  "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" 

let NUMBER : regexp = DIGIT . DIGIT*  

let WSP : regexp = (" " | "\n" | "\t") . (" " | "\n" | "\t")*  

let QUOTELESS_STRING
  : regexp =
  (UPPERCASE
     | LOWERCASE
     | DIGIT | " " | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+")*  

let STRING_COMPONENT
  : regexp =
  UPPERCASE
    | LOWERCASE
    | DIGIT | "\"" | " " | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+" 

let STRING : regexp = STRING_COMPONENT*  

let NONEMPTY_STRING : regexp = STRING_COMPONENT . STRING_COMPONENT*  

let DELIMITED_STRING
  : regexp =
  (UPPERCASE
     | LOWERCASE
     | DIGIT | "\\\"" | " " | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+")*  

let string_to_delimited : lens 
= synth STRING <=> DELIMITED_STRING with 
 #{string * string}[("+","+");("=","=");(".",".");(" "," ");("'","'");
 (":",":");("/","/");("_","_");("-","-")] 

let COMMENT : regexp = "# " . STRING 

let COMMENT_DICT : regexp = "{\"#comment\"=\"" . DELIMITED_STRING . "\"}" 

let comment_map : lens = synth COMMENT <=> COMMENT_DICT with #{string * string}[] 

let EMPTYDICT : regexp = "{}" 

let ENV_VAR : regexp = (UPPERCASE | "_") . (UPPERCASE | "_")*  

let WORD
  : regexp =
  (LOWERCASE | UPPERCASE | "_" | "." | "-" | ":" | "/" | "+" | DIGIT)
    . (LOWERCASE | UPPERCASE | "_" | "." | "-" | ":" | "/" | "+" | DIGIT)*  

let SIMPLE_WORD
  : regexp =
  (LOWERCASE | UPPERCASE | DIGIT) . (LOWERCASE | UPPERCASE | DIGIT)*  

let FOLDER
  : regexp =
  (WORD . "/")*  . WORD . ("" | "/") | "${" . ENV_VAR . "}" 

let MULTILINE_COMMENT : regexp = "/*" . STRING . ("\n" . STRING)*  . "*/" 

let MULTILINE_COMMENT_DICT
  : regexp =
  "{\"#mcomment\""
    . "{\"string\"=\"" . STRING . "\"}"
    . ("{\"string\"=\"" . STRING . "\"}")* 
    . "}" 

let multiline_comment_map : lens
  = synth MULTILINE_COMMENT <=> MULTILINE_COMMENT_DICT with #{string * string}[]
  
let ACCESSTYPE : regexp = "+" | "-" 

let COMMENT_KVP : regexp = "\"#comment\"=\"" . DELIMITED_STRING . "\"" 

let ORIGIN
  : regexp =
  (UPPERCASE | LOWERCASE | DIGIT | ":")
    . (UPPERCASE | LOWERCASE | DIGIT | ":")*  

let ORIGIN_KV : regexp = "{ \"origin\" = \"" . ORIGIN . "\" }" 

let ORIGIN_DICT : regexp = ("\n" . ORIGIN_KV)*  

let ORIGINLIST : regexp = (" " . ORIGIN)*  

let IDENTIFIER
  : regexp =
  (UPPERCASE | LOWERCASE | DIGIT) . (UPPERCASE | LOWERCASE | DIGIT)*  

let USERNAMEHOSTGROUPCONFIG
  : regexp =
  IDENTIFIER | IDENTIFIER . "@" . IDENTIFIER | "@" . IDENTIFIER 

let USERNAMEHOSTGROUPCONFIGLIST : regexp = (USERNAMEHOSTGROUPCONFIG . " ")*  

let USERINFO : regexp = "{ \"user\" = \"" . IDENTIFIER . "\" }" 

let USERHOSTINFO
  : regexp =
  "{ \"user\" = \""
    . IDENTIFIER . "\"\n\t{ \"host\" = \"" . IDENTIFIER . "\" } }" 

let NETGROUPINFO : regexp = "{ \"netgroup\" = \"" . IDENTIFIER . "\" }" 

let UNHGCFG_KVP : regexp = USERINFO | USERHOSTINFO | NETGROUPINFO 

let UNHGCFG_KVPLIST : regexp = ("\n" . UNHGCFG_KVP)*  

let CONFIG_COMMENT : regexp = "# " . STRING 

let FULLCONFIGACCESS
  : regexp =
  ACCESSTYPE . " : " . USERNAMEHOSTGROUPCONFIGLIST . ":" . ORIGINLIST 

let FULL_ACCESS_CONFIG
  : regexp =
  ((FULLCONFIGACCESS | CONFIG_COMMENT) . "\n")*  

let CONFIGACCESSDICT
  : regexp =
  "{ \"access\" = \""
    . ACCESSTYPE . "\"" . UNHGCFG_KVPLIST . ORIGIN_DICT . " }" 

let FULL_ACCESS_DICT : regexp = ((CONFIGACCESSDICT | COMMENT_KVP) . "\n")*  

let CONFIG_STRING : regexp = (CONFIG_COMMENT . "\n")*  
    
let extract_comment : lens
 = synth CONFIG_COMMENT <=> COMMENT_KVP with 
#{string * string}["# here is a comment with \"quotes\"",
"\"#comment\"=\"here is a comment with \\\"quotes\\\"\""]
 
let extract_netgroup : lens
= synth ("@" . IDENTIFIER) <=> NETGROUPINFO with
#{string * string}["@princeton", "{ \"netgroup\" = \"princeton\" }"]

let extract_origin_list : lens
= synth ORIGINLIST <=> ORIGIN_DICT with
#{string * string}[" cron crond :0", 
"\n{ \"origin\" = \"cron\" }\n{ \"origin\" = \"crond\" }\n{ \"origin\" = \":0\" }"]

let extract_userdata : (lens in USERNAMEHOSTGROUPCONFIG <=> UNHGCFG_KVP)
 = synth USERNAMEHOSTGROUPCONFIG <=> UNHGCFG_KVP with
#{string * string}["anders", "{ \"user\" = \"anders\" }";
"anders@princeton", "{ \"user\" = \"anders\"\n\t{ \"host\" = \"princeton\" } }";
"@princeton", "{ \"netgroup\" = \"princeton\" }"] 

let extract_access = synth FULLCONFIGACCESS <=> CONFIGACCESSDICT with
#{string * string}["+ : anders anders@princeton @princeton : cron crond :0",
"{ \"access\" = \"+\"\n{ \"user\" = \"anders\" }\n{ \"user\" = \"anders\"
\t{ \"host\" = \"princeton\" } }\n{ \"netgroup\" = \"princeton\" }
{ \"origin\" = \"cron\" }\n{ \"origin\" = \"crond\" }
{ \"origin\" = \":0\" } }"]

let extract_config = synth FULL_ACCESS_CONFIG <=> FULL_ACCESS_DICT with
#{string * string}["+ : anders anders@princeton @princeton : cron crond :0
# here is a comment with \"quotes\"\n" ,
"{ \"access\" = \"+\"
{ \"user\" = \"anders\" }
{ \"user\" = \"anders\"
\t{ \"host\" = \"princeton\" } }
{ \"netgroup\" = \"princeton\" }
{ \"origin\" = \"cron\" }
{ \"origin\" = \"crond\" }
{ \"origin\" = \":0\" } }
\"#comment\"=\"here is a comment with \\\"quotes\\\"\"\n"]
