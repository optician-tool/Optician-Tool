module Approx = 

let LOWERCASE
  : regexp =
  "a"
    | "b"
    | "c"
    | "d"
    | "e"
    | "f"
    | "g"
    | "h"
    | "i"
    | "j"
    | "k"
    | "l"
    | "m"
    | "n"
    | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" 

let UPPERCASE
  : regexp =
  "A"
    | "B"
    | "C"
    | "D"
    | "E"
    | "F"
    | "G"
    | "H"
    | "I"
    | "J"
    | "K"
    | "L"
    | "M"
    | "N"
    | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" 

let DIGIT
  : regexp =
  "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" 

let NUMBER : regexp = DIGIT . DIGIT*  

let WSP : regexp = (" " | "\n" | "\t") . (" " | "\n" | "\t")*  

let QUOTELESS_STRING
  : regexp =
  (UPPERCASE
     | LOWERCASE
     | DIGIT | " " | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+")*  

let STRING_COMPONENT
  : regexp =
  UPPERCASE
    | LOWERCASE
    | DIGIT | "\"" | " " | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+" 

let STRING : regexp = STRING_COMPONENT*  

let NONEMPTY_STRING : regexp = STRING_COMPONENT . STRING_COMPONENT*  

let DELIMITED_STRING
  : regexp =
  (UPPERCASE
     | LOWERCASE
     | DIGIT | "\\\"" | " " | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+")*  

let string_to_delimited : lens 
= synth STRING <=> DELIMITED_STRING with 
 #{string * string}[("+","+");("=","=");(".",".");(" "," ");("'","'");
 (":",":");("/","/");("_","_");("-","-")] 

let COMMENT : regexp = "# " . STRING 

let COMMENT_DICT : regexp = "{\"#comment\"=\"" . DELIMITED_STRING . "\"}" 

let comment_map : lens = synth COMMENT <=> COMMENT_DICT with #{string * string}[] 

let EMPTYDICT : regexp = "{}" 

let ENV_VAR : regexp = (UPPERCASE | "_") . (UPPERCASE | "_")*  

let WORD
  : regexp =
  (LOWERCASE | UPPERCASE | "_" | "." | "-" | ":" | "/" | "+" | DIGIT)
    . (LOWERCASE | UPPERCASE | "_" | "." | "-" | ":" | "/" | "+" | DIGIT)*  

let SIMPLE_WORD
  : regexp =
  (LOWERCASE | UPPERCASE | DIGIT) . (LOWERCASE | UPPERCASE | DIGIT)*  

let FOLDER
  : regexp =
  (WORD . "/")*  . WORD . ("" | "/") | "${" . ENV_VAR . "}" 

let MULTILINE_COMMENT : regexp = "/*" . STRING . ("\n" . STRING)*  . "*/" 

let MULTILINE_COMMENT_DICT
  : regexp =
  "{\"#mcomment\""
    . "{\"string\"=\"" . STRING . "\"}"
    . ("{\"string\"=\"" . STRING . "\"}")* 
    . "}" 

let multiline_comment_map : lens
  = synth MULTILINE_COMMENT <=> MULTILINE_COMMENT_DICT with #{string * string}[]

let VARIABLE : regexp = "$" . WORD 

test matches_cex VARIABLE "$test-ing" = true

let VARIABLE_VALUE_CONF : regexp = VARIABLE . "\t" . STRING 

test matches_cex VARIABLE_VALUE_CONF "$test-ing\ttest val" = true

let APPROX_CONF : regexp = ((VARIABLE_VALUE_CONF | COMMENT | "") . "\n")*  

let VARIABLE_VALUE_DICT
  : regexp =
  "{\"" . VARIABLE . "\"=\"" . STRING . "\"}" 

test matches_cex VARIABLE_VALUE_DICT "{\"$test-ing\"=\"test val\"}" = true

let APPROX_DICT
  : regexp =
  (VARIABLE_VALUE_DICT | COMMENT_DICT | EMPTYDICT)*  

let afs_cellalias = synth APPROX_CONF <=> APPROX_DICT with
#{string * string}[
"# comment\n\n$test-ing\ttest val\n",
"{\"#comment\"=\"comment\"}{}{\"$test-ing\"=\"test val\"}"]