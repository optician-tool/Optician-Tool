module Aptsources = 

let LOWERCASE
  : regexp =
  "a"
    | "b"
    | "c"
    | "d"
    | "e"
    | "f"
    | "g"
    | "h"
    | "i"
    | "j"
    | "k"
    | "l"
    | "m"
    | "n"
    | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" 

let UPPERCASE
  : regexp =
  "A"
    | "B"
    | "C"
    | "D"
    | "E"
    | "F"
    | "G"
    | "H"
    | "I"
    | "J"
    | "K"
    | "L"
    | "M"
    | "N"
    | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" 

let DIGIT
  : regexp =
  "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" 

let NUMBER : regexp = DIGIT . DIGIT*  

let WSP : regexp = (" " | "\n" | "\t") . (" " | "\n" | "\t")*  

let QUOTELESS_STRING
  : regexp =
  (UPPERCASE
     | LOWERCASE
     | DIGIT | " " | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+")*  

let STRING_COMPONENT
  : regexp =
  UPPERCASE
    | LOWERCASE
    | DIGIT | "\"" | " " | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+" 

let STRING : regexp = STRING_COMPONENT*  

let NONEMPTY_STRING : regexp = STRING_COMPONENT . STRING_COMPONENT*  

let DELIMITED_STRING
  : regexp =
  (UPPERCASE
     | LOWERCASE
     | DIGIT | "\\\"" | " " | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+")*  

let string_to_delimited : lens 
= synth STRING <=> DELIMITED_STRING with 
 #{string * string}[("+","+");("=","=");(".",".");(" "," ");("'","'");
 (":",":");("/","/");("_","_");("-","-")] 

let COMMENT : regexp = "# " . STRING 

let COMMENT_DICT : regexp = "{\"#comment\"=\"" . DELIMITED_STRING . "\"}" 

let comment_map : lens = synth COMMENT <=> COMMENT_DICT with #{string * string}[] 

let EMPTYDICT : regexp = "{}" 

let ENV_VAR : regexp = (UPPERCASE | "_") . (UPPERCASE | "_")*  

let WORD
  : regexp =
  (LOWERCASE | UPPERCASE | "_" | "." | "-" | ":" | "/" | "+" | DIGIT)
    . (LOWERCASE | UPPERCASE | "_" | "." | "-" | ":" | "/" | "+" | DIGIT)*  

let SIMPLE_WORD
  : regexp =
  (LOWERCASE | UPPERCASE | DIGIT) . (LOWERCASE | UPPERCASE | DIGIT)*  

let FOLDER
  : regexp =
  (WORD . "/")*  . WORD . ("" | "/") | "${" . ENV_VAR . "}" 

let MULTILINE_COMMENT : regexp = "/*" . STRING . ("\n" . STRING)*  . "*/" 

let MULTILINE_COMMENT_DICT
  : regexp =
  "{\"#mcomment\""
    . "{\"string\"=\"" . STRING . "\"}"
    . ("{\"string\"=\"" . STRING . "\"}")* 
    . "}" 

let multiline_comment_map : lens
  = synth MULTILINE_COMMENT <=> MULTILINE_COMMENT_DICT with #{string * string}[]
  
let OPERATION : regexp = "+" | "-" 

let OPTION_KVP_OPERATION_CONF
  : regexp =
  SIMPLE_WORD . (OPERATION | "") . "=" . SIMPLE_WORD 

test matches_cex OPTION_KVP_OPERATION_CONF "arch+=amd64" = true

let OPTIONS_DICT
  : regexp =
  "{\"options\""
    . "{\""
    . SIMPLE_WORD
    . "\"=\""
    . SIMPLE_WORD
    . "\"" . ("{\"operation\"=\"" . OPERATION . "\"}" | "") . "}"
    . ("{\""
         . SIMPLE_WORD
         . "\"=\""
         . SIMPLE_WORD
         . "\"" . ("{\"operation\"=\"" . OPERATION . "\"}" | "") . "}")* 
    . "}" 

test matches_cex
  OPTIONS_DICT
  "{\"options\"{\"arch\"=\"amd64\"{\"operation\"=\"+\"}}}" = true

let OPTIONS_CONF
  : regexp =
  " [ "
    . OPTION_KVP_OPERATION_CONF . " " . (OPTION_KVP_OPERATION_CONF . " ")* 
    . "] " 

test matches_cex OPTIONS_CONF " [ arch=amd64 trusted-=true ] " = true

let APTSOURCE_CONF
  : regexp =
  (WORD . (" " | OPTIONS_CONF) . WORD . " " . WORD . (" " . WORD)*  . "\n")*  

test matches_cex
  APTSOURCE_CONF
  "deb [ arch+=amd64 ] tor+http://ftp.us.debian.org/debian sid main contrib\n" = true

let APTSOURCE_DICT
  : regexp =
  ("{\"type\"=\""
     . WORD
     . "\"}"
     . ("" | OPTIONS_DICT)
     . "{\"uri\"=\""
     . WORD
     . "\"}{\"distribution\"=\""
     . WORD . "\"}" . ("{\"component\"=\"" . WORD . "\"}")* )*  

test matches_cex
  APTSOURCE_DICT
  "{\"type\"=\"deb\"}{\"options\"{\"arch\"=\"amd64\"{\"operation\"=\"+\"}}}{\"uri\"=\"tor+http://ftp.us.debian.org/debian\"}{\"distribution\"=\"sid\"}{\"component\"=\"main\"}{\"component\"=\"contrib\"}" = true

let aptsrc = synth APTSOURCE_CONF <=> APTSOURCE_DICT with
#{string * string}[
"deb [ arch+=amd64 ] tor+http://ftp.us.debian.org/debian sid main contrib\n",
"{\"type\"=\"deb\"}{\"options\"{\"arch\"=\"amd64\"{\"operation\"=\"+\"}}}{\"uri\"=\"tor+http://ftp.us.debian.org/debian\"}{\"distribution\"=\"sid\"}{\"component\"=\"main\"}{\"component\"=\"contrib\"}"]
