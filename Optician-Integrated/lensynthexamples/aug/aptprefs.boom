module Aptprefs =

let LOWERCASE
  : regexp =
  "a"
    | "b"
    | "c"
    | "d"
    | "e"
    | "f"
    | "g"
    | "h"
    | "i"
    | "j"
    | "k"
    | "l"
    | "m"
    | "n"
    | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" 

let UPPERCASE
  : regexp =
  "A"
    | "B"
    | "C"
    | "D"
    | "E"
    | "F"
    | "G"
    | "H"
    | "I"
    | "J"
    | "K"
    | "L"
    | "M"
    | "N"
    | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" 

let DIGIT
  : regexp =
  "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" 

let NUMBER : regexp = DIGIT . DIGIT*  

let WSP : regexp = (" " | "\n" | "\t") . (" " | "\n" | "\t")*  

let QUOTELESS_STRING
  : regexp =
  (UPPERCASE
     | LOWERCASE
     | DIGIT | " " | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+")*  

let STRING_COMPONENT
  : regexp =
  UPPERCASE
    | LOWERCASE
    | DIGIT | "\"" | " " | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+" 

let STRING : regexp = STRING_COMPONENT*  

let NONEMPTY_STRING : regexp = STRING_COMPONENT . STRING_COMPONENT*  

let DELIMITED_STRING
  : regexp =
  (UPPERCASE
     | LOWERCASE
     | DIGIT | "\\\"" | " " | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+")*  

let string_to_delimited : lens 
= synth STRING <=> DELIMITED_STRING with 
 #{string * string}[("+","+");("=","=");(".",".");(" "," ");("'","'");
 (":",":");("/","/");("_","_");("-","-")] 

let COMMENT : regexp = "# " . STRING 

let COMMENT_DICT : regexp = "{\"#comment\"=\"" . DELIMITED_STRING . "\"}" 

let comment_map : lens = synth COMMENT <=> COMMENT_DICT with #{string * string}[] 

let EMPTYDICT : regexp = "{}" 

let ENV_VAR : regexp = (UPPERCASE | "_") . (UPPERCASE | "_")*  

let WORD
  : regexp =
  (LOWERCASE | UPPERCASE | "_" | "." | "-" | ":" | "/" | "+" | DIGIT)
    . (LOWERCASE | UPPERCASE | "_" | "." | "-" | ":" | "/" | "+" | DIGIT)*  

let SIMPLE_WORD
  : regexp =
  (LOWERCASE | UPPERCASE | DIGIT) . (LOWERCASE | UPPERCASE | DIGIT)*  

let FOLDER
  : regexp =
  (WORD . "/")*  . WORD . ("" | "/") | "${" . ENV_VAR . "}" 

let MULTILINE_COMMENT : regexp = "/*" . STRING . ("\n" . STRING)*  . "*/" 

let MULTILINE_COMMENT_DICT
  : regexp =
  "{\"#mcomment\""
    . "{\"string\"=\"" . STRING . "\"}"
    . ("{\"string\"=\"" . STRING . "\"}")* 
    . "}" 

let multiline_comment_map : lens
  = synth MULTILINE_COMMENT <=> MULTILINE_COMMENT_DICT with #{string * string}[]
  
let EXPLANATION_CONF : regexp = "Explanation: " . STRING 

test matches_cex
  EXPLANATION_CONF
  "Explanation: Backport packages are never prioritary" = true

let EXPLANATION_DICT : regexp = "{\"Explanation\"=\"" . STRING . "\"}" 

test matches_cex
  EXPLANATION_DICT
  "{\"Explanation\"=\"Backport packages are never prioritary\"}" = true

let PACKAGE_CONF : regexp = "Package: " . (STRING | "*") 

test matches_cex PACKAGE_CONF "Package: *" = true

let PACKAGE_DICT : regexp = "{\"Package\"=\"" . (STRING | "*") . "\"}" 

test matches_cex PACKAGE_DICT "{\"Package\"=\"*\"}" = true

let PIN_CONF : regexp = "Pin: " . STRING 

test matches_cex PIN_CONF "Pin: release a=backports" = true

let PIN_DICT : regexp = "{\"Pin\"=\"" . STRING . "\"}" 

test matches_cex PIN_DICT "{\"Pin\"=\"release a=backports\"}" = true

let PIN_PRIORITY_CONF : regexp = "Pin-Priority: " . NUMBER 

test matches_cex PIN_PRIORITY_CONF "Pin-Priority: 700" = true

let PIN_PRIORITY_DICT : regexp = "{\"Pin-Priority\"=\"" . NUMBER . "\"}" 

test matches_cex PIN_PRIORITY_DICT "{\"Pin-Priority\"=\"700\"}" = true

let OPTION_CONF
  : regexp =
  (EXPLANATION_CONF | PACKAGE_CONF | PIN_CONF | PIN_PRIORITY_CONF | COMMENT)
    . "\n" 

let APTPREFS_CONF : regexp = OPTION_CONF . ("\n" . OPTION_CONF)*  

let APTPREFS_DICT
  : regexp =
  "{\"Pref\"="
. (EXPLANATION_DICT
     | PACKAGE_DICT | PIN_DICT | PIN_PRIORITY_DICT | COMMENT_DICT)
. "}"
    . ("{\"Pref\"="
         . (EXPLANATION_DICT
              | PACKAGE_DICT | PIN_DICT | PIN_PRIORITY_DICT | COMMENT_DICT)
         . "}")*  

let x = synth APTPREFS_CONF <=> APTPREFS_DICT with #{string * string}[]
