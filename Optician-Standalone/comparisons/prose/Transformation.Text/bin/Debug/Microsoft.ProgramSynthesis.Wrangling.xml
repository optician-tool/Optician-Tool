<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ProgramSynthesis.Wrangling</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex">
            <summary>
                Represents a set of completion results along with an index into the prefix from where the completion was derived.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex.Key">
            <summary>
                The key associated with <see cref="P:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex.Value" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex.Value">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo" /> associated with the <see cref="P:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex.Key" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex.Index">
            <summary>
                The index from the prefix from where these completion results were derived.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex.FullPrefix">
            <summary>
                The full prefix for the query. Note that <see cref="P:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex.Value" /> is derived from
                <c>FullPrefix.Substring(<see cref="P:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex.Index" />)</c>.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex.#ctor(System.String,Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo,System.Int32,System.String)">
            <summary>
                Constructor.
            </summary>
            <param name="key">The key for the result. See <see cref="P:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex.Key" />.</param>
            <param name="value">
                The value returned for lookup on the tree for <paramref name="key" />.
                See <see cref="P:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex.Value" />.
            </param>
            <param name="index">The index into <paramref name="fullPrefix" />, see <see cref="P:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex.Index" />.</param>
            <param name="fullPrefix">The full prefix used in the query. See <see cref="P:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex.FullPrefix" />.</param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.CompressedTrieSearchTree">
            <summary>
                An implementation of an <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree" /> that uses a
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.CompressedTrie`4" />
                as the <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6" /> data structure.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.CompressedTrieSearchTree.#ctor(System.Boolean)">
            <summary>
                Constructor.
            </summary>
            <param name="caseInsensitiveLookups">If <c>true</c> then lookups will be performed in a case insensitive manner.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.CompressedTrieSearchTree.CaseInsensitiveLookups">
            <summary>
                Indicates whether lookups on the search tree are case insensitive.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.CompressedTrieSearchTree.Add(System.String,Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo)">
            <summary>
                Add a new mapping to the tree.
            </summary>
            <param name="key">The key for the mapping.</param>
            <param name="value">The value that <paramref name="key" /> is to be mapped to.</param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleter">
            <summary>
                An interface for autocompleters.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleter.Logger">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger" /> object for logging telemetry data.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleter.Ranker">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IRanker" /> object for ranking suggestions.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleter.SuggestAsync(System.String,System.Int32,System.Int32)">
            <summary>
                Returns a task that when complete yields a list of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion" />s.
            </summary>
            <param name="prefix">The prefix that any returned <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion" /> must start with.</param>
            <param name="minimumSuggestionCount">The minimum number of suggestions to return.</param>
            <param name="maximumSuggestionCount">The maximum number of suggestions to return.</param>
            <returns>
                A task that produces an ordered list of suggestions, with the most highly ranked suggestions at the beginning
                of the list.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleter.ConfirmSuggestion(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion)">
            <summary>
                Provide feedback to the <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleter" /> that a particular suggestion offered by it in the most recent
                call to <see cref="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleter.SuggestAsync(System.String,System.Int32,System.Int32)" /> is the preferred one.
            </summary>
            <param name="suggestion">
                One of the <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion" />s returned in the most recent call to
                <see cref="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleter.SuggestAsync(System.String,System.Int32,System.Int32)" />, that is considered to be the most desirable one.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree">
            <summary>
                An interface for <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTree`4" />s that can be used
                for autocompletion.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree.Add(System.String,Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo)">
            <summary>
                Add a new mapping to the tree.
            </summary>
            <param name="key">The key for the mapping.</param>
            <param name="value">The value that <paramref name="key" /> is to be mapped to.</param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IRanker">
            <summary>
                An interface for a ranker that ranks a list of autocomplete suggestions.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IRanker.Rank(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex})">
            <summary>
                Ranks a list of
                <see cref="T:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex" />s which
                represent autocompletion suggestions.
            </summary>
            <param name="completionResults">
                The sequence of
                <see cref="T:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex" />s.
            </param>
            <returns>
                A ranked list of
                <see cref="T:Microsoft.ProgramSynthesis.Autocompletion.Transformation.Text.CompletionResultWithIndex" />s.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion">
            <summary>
                An interface for suggestions made by <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleter" />s.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.Source">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleter" /> object that produced this suggestion.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.PrefixString">
            <summary>
                The prefix string that this suggestion was generated for.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.MatchOffset">
            <summary>
                The offset into <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.PrefixString" />, such that <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.CompletionSuffix" /> starts with the suffix of
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.PrefixString" /> which begins at <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.MatchOffset" />.
                For example: Suppose <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.PrefixString" /> is "foo bar", and <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.CompletionSuffix" /> is "barrage",
                then the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.MatchOffset" /> will be the value <c>4</c>.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.CompletionSuffix">
            <summary>
                The completion suffix. See <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.MatchOffset" /> for a description of how <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.PrefixString" />,
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.MatchOffset" /> and <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.CompletionSuffix" /> work together.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.Metadata">
            <summary>
                A property map for any metadata associated with this completion.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.CompleteValue">
            <summary>
                The complete value. This is guaranteed to be an extension of <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.PrefixString" /> and can be thought of as
                the "final value" that the user supplied prefix can be replaced with.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion.Confirm">
            <summary>
                Confirms <c>this</c> suggestion as the desirable suggestion, from among all the suggestions produced.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.CompressedTrie`4">
            <summary>
                A generic class that implements an <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTree`4" />
                using a trie where the edges are "compressed", i.e., long chains of tree nodes with only one child are compressed
                into a single edge, which may match a sequence of more than one character.
            </summary>
            <typeparam name="TSequenceable">The type of the sequenceable objects. e.g. <see cref="T:System.Char" /></typeparam>
            <typeparam name="TSequence">The type of the sequence objects. e.g. <see cref="T:System.String" /></typeparam>
            <typeparam name="TSubSequence">
                The type of the objects used to represent sub-sequences. e.g.<see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" />
            </typeparam>
            <typeparam name="TValue">The type of the values that are mapped by this tree.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.CompressedTrie`4.GetEdgeLabels">
            <summary>
                Retrieves all the edge labels in this tree.
            </summary>
            <returns>A sequence of sequence of edges that correspond to a breadth-first traversal of the tree.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.CompressedTrieSplitNode`4">
            <summary>
                A generic class implementing a decision node in
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.CompressedTrie`4" />
            </summary>
            <typeparam name="TSequenceable">The type of the sequenceable objects. e.g. <see cref="T:System.Char" /></typeparam>
            <typeparam name="TSequence">The type of the sequence objects. e.g. <see cref="T:System.String" /></typeparam>
            <typeparam name="TSubSequence">
                The type of the objects used to represent sub-sequences. e.g.<see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" />
            </typeparam>
            <typeparam name="TValue">The type of the values that are mapped by this tree.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.CompressedTrieSplitNode`4.#ctor(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieEdge{`0,`1,`2,`3})">
            <summary>
                Constructor.
            </summary>
            <param name="edgeToParent">The edge to the parent of this node in the tree.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.CompressedTrieSplitNode`4.AddEntry(`2,`3,`2)">
            <summary>
                Add the specified mapping to the tree, recursing if necessary.
            </summary>
            <param name="suffix">The unmatched suffix of the entire <paramref name="key" />.</param>
            <param name="key">The key of the mapping.</param>
            <param name="value">The mapped value.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.CompressedTrieSplitNode`4.Lookup(`2,`3@)">
            <summary>
                TryGetValue the specified key in the tree.
            </summary>
            <param name="key">The key.</param>
            <param name="result">Set to the value mapped to the key if a mapping exists, <c>default(TLookupResult)</c> otherwise.</param>
            <returns><c>true</c> if a mapping for <paramref name="key" /> exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTree`4">
            <summary>
                A generic interface for a prefix search tree.
            </summary>
            <typeparam name="TSequenceable">The sequenceable type, e.g. <see cref="T:System.Char" />.</typeparam>
            <typeparam name="TSequence">The type of the sequenceable, e.g. <see cref="T:System.String" />.</typeparam>
            <typeparam name="TSubSequence">The subsequence type, e.g. <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" />.</typeparam>
            <typeparam name="TValue">The type of the values mapped.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTree`4.Items">
            <summary>
                Retrieves all the mappings present in this set.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTree`4.Add(`1,`3)">
            <summary>
                Add a new key to value mapping.
            </summary>
            <param name="key">The key for the mapping.</param>
            <param name="value">The value that <paramref name="key" /> maps to.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTree`4.TryGetValue(`1,`3@)">
            <summary>
                Lookup the mapping for a given key.
            </summary>
            <param name="key">The key for which the mapped value is to be retrieved.</param>
            <param name="result">
                Set to the mapping for <paramref name="key" /> if one exists, <c>default(TLookupResult)</c>
                otherwise.
            </param>
            <returns><c>true</c> if there exists a mapping for <paramref name="key" />, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTree`4.GetOrCreate(`1,System.Func{`3})">
            <summary>
                Get or create the value for a key.
            </summary>
            <param name="key">The key.</param>
            <param name="factory">
                A function that creates a new value to map <paramref name="key" /> to.
            </param>
            <returns>The value mapped to <paramref name="key" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTree`4.PrefixLookup(`1)">
            <summary>
                Retrieves all mappings where a prefix matches the key.
            </summary>
            <param name="prefix">The prefix to be matched.</param>
            <returns>
                A sequence of results, where <paramref name="prefix" /> is the prefix of the key for each returned result. If
                no results exist, then an empty sequence is returned.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTree`4.Clear">
            <summary>
                Clears all the mappings.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeEdge`6">
            <summary>
                A generic interface representing an edge in a prefix search tree.
            </summary>
            <typeparam name="TSequenceable">The sequenceable type.</typeparam>
            <typeparam name="TSequence">The sequence type.</typeparam>
            <typeparam name="TSubSequence">The subsequence type.</typeparam>
            <typeparam name="TValue">The value type of the mappings in the tree.</typeparam>
            <typeparam name="TNode">The type of the nodes constituting the tree.</typeparam>
            <typeparam name="TEdge">The type of the edges in the tree.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeEdge`6.MatchedPrefix">
            <summary>
                The subsequence of the entire sequence that matches this edge.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeEdge`6.Parent">
            <summary>
                The parent node of this edge.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeEdge`6.Child">
            <summary>
                The child node of this edge.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeNode`6">
            <summary>
                A generic interface for prefix search tree nodes.
            </summary>
            <typeparam name="TSequenceable">The sequenceable type.</typeparam>
            <typeparam name="TSequence">The sequence type.</typeparam>
            <typeparam name="TSubSequence">The subsequence type.</typeparam>
            <typeparam name="TValue">The value type of the mappings in the tree.</typeparam>
            <typeparam name="TNode">The type of nodes that constitute the tree.</typeparam>
            <typeparam name="TEdge">The type of the tree edges.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeNode`6.EdgeToParent">
            <summary>
                The edge to the parent of this node.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeNode`6.ChildFor(`2)">
            <summary>
                Return the edge corresponding to <paramref name="prefix" />.
            </summary>
            <param name="prefix">The prefix to match.</param>
            <returns>The edge corresponding to the prefix, if one exists, <c>default(TEdge)</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeNode`6.AddEntry(`2,`5,`2)">
            <summary>
                Add the specified mapping to the tree, recursing if necessary.
            </summary>
            <param name="suffix">The unmatched suffix of the entire <paramref name="key" />.</param>
            <param name="value">The mapped value.</param>
            <param name="key">The key of the mapping.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeNode`6.Lookup(`2,`5@)">
            <summary>
                TryGetValue the specified key in the tree.
            </summary>
            <param name="key">The key.</param>
            <param name="result">Set to the value mapped to the key if a mapping exists, <c>default(TLookupResult)</c> otherwise.</param>
            <returns><c>true</c> if a mapping for <paramref name="key" /> exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeNode`6.LookupOrCreate(`2,`2,System.Func{`5})">
            <summary>
                Lookup a key, or create a mapping for the key.
            </summary>
            <param name="key">The key.</param>
            <param name="suffix">The suffix of the key yet to be matched.</param>
            <param name="factory">A function that computes a value, to be mapped for <paramref name="key" />.</param>
            <returns>The updated value mapped to <paramref name="key" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeNode`6.LookupAll(`2)">
            <summary>
                Retrieves all results that are mapped to some extension of <paramref name="prefix" />.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns>
                A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />s such that the <c>Key</c> field of each lookup
                result is
                an extension of <see cref="!:prefix" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeNode`6.GetEdges">
            <summary>
                Retrieves all the edges from this node.
            </summary>
            <returns>A collection of edges from this node.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeNode`6.Accept``1(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeVisitor{`0,`1,`2,`5,`3,`4,``0})">
            <summary>
                Accepts a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeVisitor`7" />.
            </summary>
            <typeparam name="TResult">The result returned by the <paramref name="visitor" />.</typeparam>
            <param name="visitor">The visitor object.</param>
            <returns>The result returned by the <paramref name="visitor" />.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeVisitor`7">
            <summary>
                An interface for visitors that can traverse
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTree`4" /> objects.
            </summary>
            <typeparam name="TSequenceable">The sequenceable type, e.g. <see cref="T:System.Char" /></typeparam>
            <typeparam name="TSequence">The sequence type e.g. <see cref="T:System.String" /></typeparam>
            <typeparam name="TSubSequence">The subsequence type e.g. <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" /></typeparam>
            <typeparam name="TValue">
                The value stored in the
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTree`4" />.
            </typeparam>
            <typeparam name="TNode">The node type of the tree.</typeparam>
            <typeparam name="TEdge">The edge type of the tree.</typeparam>
            <typeparam name="TResult">The result produced by the visitor instantiation.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeVisitor`7.Visit(`4)">
            <summary>
                Visits (and possibly traverses) the tree rooted at this node.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>A result based on the traversal of <paramref name="node" />.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3">
            <summary>
                A common interface for representing subsequences for use in a prefix
                search tree.
            </summary>
            <typeparam name="TSequenceable">
                The type of objects in the sequence, these will be "peeled" as the prefix search tree
                is traversed.
            </typeparam>
            <typeparam name="TSequence">The concrete type of sequence of objects.</typeparam>
            <typeparam name="TSubSequence">
                The concrete type of the subsequence that implements this interface. The "recurring
                generic argument" pattern here serves to strongly type the Slice methods
            </typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.FullSequence">
            <summary>
                A reference to the entire sequence.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Start">
            <summary>
                The starting index of this subsequence in <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.FullSequence" />
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.End">
            <summary>
                The ending index (exclusive) of this subsequence in <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.FullSequence" />
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Length">
            <summary>
                The length of this subsequence.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.FullLength">
            <summary>
                The length of the full sequence that this sequence derives from.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Value">
            <summary>
                The value of this subsequence, represented as a <typeparamref name="TSequence" />
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Item(System.Int32)">
            <summary>
                Returns the <typeparamref name="TSequenceable" /> object at <paramref name="position" /> in <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Value" />.
            </summary>
            <param name="position">The relative index into this sequence, at which the object to be retrieved resides.</param>
            <returns>The <typeparamref name="TSequenceable" /> at <paramref name="position" /> in <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Value" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.AbsoluteSlice(System.UInt32,System.UInt32)">
            <summary>
                Returns an absolute slice of this subsequence
            </summary>
            <param name="start">The start index of the absolute slice, i.e., relative to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.FullSequence" />.</param>
            <param name="end">The end index (exclusive) of the absolute slice, i.e., relateive to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.FullSequence" />.</param>
            <returns>A <typeparamref name="TSubSequence" /> that represents the absolute slice.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.StartsWith(`1)">
            <summary>
                Checks if this sequence starts with the provided prefix
            </summary>
            <param name="prefix">The prefix to check.</param>
            <returns>true if this subsequence begins with <see cref="!:prefix" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.StartsWith(`2)">
            <summary>
                Checks if this sequence starts with the provided prefix
            </summary>
            <param name="prefix">The prefix to check.</param>
            <returns>true if this subsequence begins with <see cref="!:prefix" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.FindFirstMismatchingIndex(`1)">
            <summary>
                Finds the first position in this sequence, at which the value does not agree with the value in the same position in
                <paramref name="prefix" />.
            </summary>
            <param name="prefix">The prefix to check.</param>
            <returns>
                The index of the first position in <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Value" /> such that the value at the same position in
                <paramref name="prefix" /> does not equal the value at the position in <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Value" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.FindFirstMismatchingIndex(`2)">
            <summary>
                Finds the first position in this sequence, at which the value does not agree with the value in the same position in
                <paramref name="prefix" />.
            </summary>
            <param name="prefix">The prefix to check.</param>
            <returns>
                The index of the first position in <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Value" /> such that the value at the same position in
                <paramref name="prefix" /> does not equal the value at the position in <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Value" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Concat(`2)">
            <summary>
                Create a new subsequence which is the concatenation of this subsequence with <paramref name="other" />.
            </summary>
            <param name="other">The subsequence to concatenate at the end of this.</param>
            <returns>A new subsequence which represents this subsequence concentenated with <paramref name="other" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Concat(`1)">
            <summary>
                Create a new subsequence which is the concatenation of this subsequence with <paramref name="other" />.
            </summary>
            <param name="other">The sequence to concatenate at the end of this.</param>
            <returns>A new subsequence which represents this subsequence concentenated with <paramref name="other" />.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6">
            <summary>
                A convenient, generic, abstract class that provides default implementations
                required by all classes implementing <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTree`4" />.
            </summary>
            <typeparam name="TSequenceable">The type of sequenceable objects. e.g. <see cref="T:System.Char" />.</typeparam>
            <typeparam name="TSequence">The type of the sequence objects. e.g. <see cref="T:System.String" /></typeparam>
            <typeparam name="TSubSequence">The type of the subsequence objects e.g. <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" /></typeparam>
            <typeparam name="TValue">The type of the values that are mapped.</typeparam>
            <typeparam name="TNode">
                The concrete type of the
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeNode`6" />s used in this tree.
            </typeparam>
            <typeparam name="TEdge">
                The concrete type of the
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeEdge`6" />s used in this tree.
            </typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6.Add(`1,`3)">
            <summary>
                Add a new key to value mapping.
            </summary>
            <param name="key">The key for the mapping.</param>
            <param name="value">The value that <paramref name="key" /> maps to.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6.TryGetValue(`1,`3@)">
            <summary>
                TryGetValue the mapping for a given key.
            </summary>
            <param name="key">The key for which the mapped value is to be retrieved.</param>
            <param name="result">
                Set to the mapping for <paramref name="key" /> if one exists, <c>default(TLookupResult)</c>
                otherwise.
            </param>
            <returns><c>true</c> if there exists a mapping for <paramref name="key" />, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6.GetOrCreate(`1,System.Func{`3})">
            <summary>
                Get or create the value for a key.
            </summary>
            <param name="key">The key.</param>
            <param name="factory">
                A function that creates a new value to map <paramref name="key" /> to.
            </param>
            <returns>The value mapped to <paramref name="key" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6.PrefixLookup(`1)">
            <summary>
                Retrieves all mappings where a prefix matches the key.
            </summary>
            <param name="prefix">The prefix to be matched.</param>
            <returns>A sequence of results, where <paramref name="prefix" /> is the prefix of the key for each returned result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6.Clear">
            <summary>
                Clears all the mappings.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6.Items">
            <summary>
                Retrieves all the mappings present in this set.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6.Add(`2,`2,`3)">
            <summary>
                Add a new key to value mapping.
            </summary>
            <param name="traversalKey">The key to use while traversing the tree.</param>
            <param name="key">The key for the mapping.</param>
            <param name="value">The value that <paramref name="key" /> maps to.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6.Lookup(`2,`3@)">
            <summary>
                Lookup the mapping for a given key.
            </summary>
            <param name="key">The key for which the mapped value is to be retrieved.</param>
            <param name="result">
                Set to the mapping for <paramref name="key" /> if one exists, <c>default(TLookupResult)</c>
                otherwise.
            </param>
            <returns><c>true</c> if there exists a mapping for <paramref name="key" />, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6.PrefixLookup(`2)">
            <summary>
                Retrieves all mappings where a prefix matches the key.
            </summary>
            <param name="prefix">The prefix to be matched.</param>
            <returns>A sequence of results, where <paramref name="prefix" /> is the prefix of the key for each returned result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6.Accept``1(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeVisitor{`0,`1,`2,`3,`4,`5,``0})">
            <summary>
                Accepts a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeVisitor`7" />
                that can traverse the tree.
            </summary>
            <typeparam name="TResult">The result produced by the visitor object.</typeparam>
            <param name="visitor">The visitor object.</param>
            <returns>The result produced by the visitor object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTreeVisitor`7">
            <summary>
                A helper class that handles the traversal of a
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6" />.
            </summary>
            <typeparam name="TSequenceable">The type of sequenceable objects e.g. <see cref="T:System.Char" />.</typeparam>
            <typeparam name="TSequence">The type of sequence objects e.g. <see cref="T:System.String" />.</typeparam>
            <typeparam name="TSubSequence">The type of sub-sequence objects e.g. <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" />.</typeparam>
            <typeparam name="TValue">
                The value stored in the
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6" />.
            </typeparam>
            <typeparam name="TNode">
                The node type of
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6" />
            </typeparam>
            <typeparam name="TEdge">
                The edge type of
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTree`6" />
            </typeparam>
            <typeparam name="TResult">The result type returned by the visitor.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.PrefixSearchTreeVisitor`7.Visit(`4)">
            <summary>
                Visits (and possibly traverses) the tree rooted at this node.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>A result based on the traversal of <paramref name="node" />.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.SuffixTree`3">
            <summary>
                A generic suffix tree.
            </summary>
            <typeparam name="TSequenceable">The type of sequenceable objects e.g. <see cref="T:System.Char" />.</typeparam>
            <typeparam name="TSequence">The type of the sequence objects e.g. <see cref="T:System.String" />.</typeparam>
            <typeparam name="TSubSequence">The type of sub sequence object e.g. <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" />.</typeparam>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.SuffixTree`3.Converter">
            <summary>
                A delegate type for <typeparamref name="TSequenceable" /> transformers.
            </summary>
            <param name="c">The <typeparamref name="TSequenceable" /> instance to transform.</param>
            <returns>The transformed value of <paramref name="c" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.SuffixTree`3.FindTarget(System.Int32,Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.SuffixTree{`0,`1,`2}.ActivePoint)">
            <summary>
                Finds the target for the current insertion.
            </summary>
            <param name="index">The current index into the string.</param>
            <param name="activePoint">
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.SuffixTree`3.ActivePoint" /> object indicating the active node to insert at, the active
                index and the active length of suffixes left to insert into the tree.
            </param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.SuffixTree`3.TargetStatus" /> value that indicates how the current suffix is to be handled.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.SuffixTree`3._Add(System.Int32,System.Int32)">
            <summary>
                This is an implementation of Ukkonen's algorithm.
                see: https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf
                for all the gory details. The highlights are:
                1. This is pretty much a compressed trie that stores all suffixes of a string.
                2. The difference is the use of "Suffix Links" which are cross-edges in the tree (not necessarily connecting nodes
                at the same "level"), which
                allow for constant time navigation between a branch of the tree that represents the "foo" suffix after "abc", i.e.,
                the suffix "abcfoo" and the
                branch of the tree that represents the suffix "foo" after "bc", i.e., the suffix "bcfoo". The suffix links allow us
                to traverse from the first node
                to the second, without having to re-traverse the trie from the root with the string "bcfoo".
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.SuffixTree`3.FindCommonSubSequences(System.Double,System.Double)">
            <summary>
                Finds the longest commmon contiguous subsequences, from among the input sequences contained in this
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.SuffixTree`3" />.
            </summary>
            <param name="minFraction">
                The minimum fraction of input sequences that the subsequence must occur in, must be in the
                range [0,1]
            </param>
            <param name="maxFraction">
                The maximum fraction of input sequences that the subsequence must occur in, must be in the
                range [0,1]
            </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.SuffixTree`3.LookupPrefix(`1,System.Double,System.Double,Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.SuffixTree{`0,`1,`2}.Converter)">
            <summary>
                Returns the suffixes beginning with <paramref name="prefix" />, such that they are suffixes of at least
                <paramref name="minFraction" /> of sequences stored in this suffix tree and at most <paramref name="maxFraction" />
                of sequences stored in this suffix tree.
            </summary>
            <param name="prefix">The prefix that all returned sequences must begin with.</param>
            <param name="minFraction">The minimum fraction of sequences that any returned value is a suffix of.</param>
            <param name="maxFraction">The maximum fraction of sequences that any returned value is a suffix of.</param>
            <param name="caseInverter">
                A function that flips the case of <typeparamref name="TSequenceable" /> objects, if
                applicable.
            </param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.Trie`4">
            <summary>
                An implementation of an <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTree`4" />
                tree using a simple trie data structure.
            </summary>
            <typeparam name="TSequenceable">The type of the sequenceable objects. e.g. <see cref="T:System.Char" /></typeparam>
            <typeparam name="TSequence">The type of the sequence objects. e.g. <see cref="T:System.String" /></typeparam>
            <typeparam name="TSubSequence">
                The type of the objects used to represent sub-sequences. e.g.<see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" />
            </typeparam>
            <typeparam name="TValue">The type of the values that are mapped by this tree.</typeparam>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieEdge`4">
            <summary>
                A generic class that implements an edge in <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.Trie`4" />
            </summary>
            <typeparam name="TSequenceable">The type of the sequenceable objects. e.g. <see cref="T:System.Char" /></typeparam>
            <typeparam name="TSequence">The type of the sequence objects. e.g. <see cref="T:System.String" /></typeparam>
            <typeparam name="TSubSequence">
                The type of the objects used to represent sub-sequences. e.g.<see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" />
            </typeparam>
            <typeparam name="TValue">The type of the values that are mapped by this tree.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieEdge`4.MatchedPrefix">
            <summary>
                The subsequence of the entire sequence that matches this edge.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieEdge`4.Parent">
            <summary>
                The EdgeToParent node of this edge.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieEdge`4.Child">
            <summary>
                The child node of this edge.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieEdge`4.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieLeafNode`4">
            <summary>
                A generic class representing a leaf node in a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.Trie`4" />.
            </summary>
            <typeparam name="TSequenceable">The type of the sequenceable objects. e.g. <see cref="T:System.Char" /></typeparam>
            <typeparam name="TSequence">The type of the sequence objects. e.g. <see cref="T:System.String" /></typeparam>
            <typeparam name="TSubSequence">
                The type of the objects used to represent sub-sequences. e.g.<see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" />
            </typeparam>
            <typeparam name="TValue">The type of the values that are mapped by this tree.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieLeafNode`4.#ctor(`2,`3,Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieEdge{`0,`1,`2,`3})">
            <summary>
                Constructor.
            </summary>
            <param name="key">The key held by this leaf node.</param>
            <param name="value">The value held by this leaf node.</param>
            <param name="edgeToParent">The edge to the parent.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieLeafNode`4.ChildFor(`2)">
            <summary>
                Return the edge corresponding to <paramref name="suffix" />.
            </summary>
            <param name="suffix">The prefix to match.</param>
            <returns>The edge corresponding to the prefix, if one exists, <c>default(TEdge)</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieLeafNode`4.AddEntry(`2,`3,`2)">
            <summary>
                Add the specified mapping to the tree, recursing if necessary.
            </summary>
            <param name="suffix">The unmatched suffix of the entire <paramref name="key" />.</param>
            <param name="value">The mapped value.</param>
            <param name="key">The key of the mapping.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieLeafNode`4.Lookup(`2,`3@)">
            <summary>
                TryGetValue the specified key in the tree.
            </summary>
            <param name="key">The key.</param>
            <param name="result">Set to the value mapped to the key if a mapping exists, <c>default(TLookupResult)</c> otherwise.</param>
            <returns><c>true</c> if a mapping for <paramref name="key" /> exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieLeafNode`4.LookupOrCreate(`2,`2,System.Func{`3})">
            <summary>
                Lookup a key, or update the old value mapped to the key.
            </summary>
            <param name="key">The key.</param>
            <param name="suffix">The suffix of the key yet to be matched.</param>
            <param name="factory">A function that computes a value, to be mapped for <paramref name="key" />.</param>
            <returns>The updated value mapped to <paramref name="key" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieLeafNode`4.LookupAll(`2)">
            <summary>
                Retrieves all results that are mapped to some extension of <paramref name="prefix" />.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns>
                A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />s such that the <c>Key</c> field of each lookup
                result is
                an extension of <see cref="!:prefix" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieLeafNode`4.GetAllDescendants">
            <summary>
                Retrieve all the descendants of this node in the tree.
            </summary>
            <returns>A sequence of all descendants of this node in the tree.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieLeafNode`4.GetAllLeaves">
            <summary>
                Retrieves all the leaf nodes reachable from this node.
            </summary>
            <returns>A sequence of leaf nodes that are reachable from this node.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieLeafNode`4.GetEdges">
            <summary>
                Retrieves all the edges reachable from this node.
            </summary>
            <returns>A sequence of edges reachable from this node.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieNode`4">
            <summary>
                An abstract class that implements an
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.IPrefixSearchTreeNode`6" />
                for use with the <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.Trie`4" /> class.
            </summary>
            <typeparam name="TSequenceable">The type of the sequenceable objects. e.g. <see cref="T:System.Char" /></typeparam>
            <typeparam name="TSequence">The type of the sequence objects. e.g. <see cref="T:System.String" /></typeparam>
            <typeparam name="TSubSequence">
                The type of the objects used to represent sub-sequences. e.g.<see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" />
            </typeparam>
            <typeparam name="TValue">The type of the values that are mapped by this tree.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieNode`4.EdgeToParent">
            <summary>
                The edge to the parent of this node.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieNode`4.ChildFor(`2)">
            <summary>
                The child of this node corresponding to a given suffix.
            </summary>
            <param name="suffix">The suffix to match.</param>
            <returns>The child corresponding to the <paramref name="suffix" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieNode`4.AddEntry(`2,`3,`2)">
            <summary>
                Add the specified mapping to the tree, recursing if necessary.
            </summary>
            <param name="suffix">The unmatched suffix of the entire <paramref name="key" />.</param>
            <param name="value">The mapped value.</param>
            <param name="key">The key of the mapping.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieNode`4.Lookup(`2,`3@)">
            <summary>
                TryGetValue the specified key in the tree.
            </summary>
            <param name="key">The key.</param>
            <param name="result">Set to the value mapped to the key if a mapping exists, <c>default(TLookupResult)</c> otherwise.</param>
            <returns><c>true</c> if a mapping for <paramref name="key" /> exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieNode`4.LookupOrCreate(`2,`2,System.Func{`3})">
            <summary>
                Lookup a key, or update the old value mapped to the key.
            </summary>
            <param name="key">The key.</param>
            <param name="suffix">The suffix of the key yet to be matched.</param>
            <param name="factory">A function that computes a value, to be mapped for <paramref name="key" />.</param>
            <returns>The updated value mapped to <paramref name="key" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieNode`4.LookupAll(`2)">
            <summary>
                Retrieves all results that are mapped to some extension of <paramref name="prefix" />.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns>
                A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />s such that the <c>Key</c> field of each lookup
                result is
                an extension of <see cref="!:prefix" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieNode`4.GetEdges">
            <summary>
                Retrieves all the edges reachable from this node.
            </summary>
            <returns>A sequence of edges reachable from this node.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieNode`4.GetAllDescendants">
            <summary>
                Retrieve all the descendants of this node in the tree.
            </summary>
            <returns>A sequence of all descendants of this node in the tree.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieNode`4.GetAllLeaves">
            <summary>
                Retrieves all the leaf nodes reachable from this node.
            </summary>
            <returns>A sequence of leaf nodes that are reachable from this node.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieSplitNode`4">
            <summary>
                A generic tree node class that implements a decision node in
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.Trie`4" />.
            </summary>
            <typeparam name="TSequenceable">The type of the sequenceable objects. e.g. <see cref="T:System.Char" /></typeparam>
            <typeparam name="TSequence">The type of the sequence objects. e.g. <see cref="T:System.String" /></typeparam>
            <typeparam name="TSubSequence">
                The type of the objects used to represent sub-sequences. e.g.<see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" />
            </typeparam>
            <typeparam name="TValue">The type of the values that are mapped by this tree.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieSplitNode`4.#ctor(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieEdge{`0,`1,`2,`3})">
            <summary>
                Constructor.
            </summary>
            <param name="edgeToParent">The edge to the parent of this node.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieSplitNode`4.ChildFor(`2)">
            <summary>
                The child of this node corresponding to a given suffix.
            </summary>
            <param name="suffix">The suffix to match.</param>
            <returns>The child corresponding to the <paramref name="suffix" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieSplitNode`4.AddEntry(`2,`3,`2)">
            <summary>
                Add the specified mapping to the tree, recursing if necessary.
            </summary>
            <param name="suffix">The unmatched suffix of the entire <paramref name="key" />.</param>
            <param name="key">The key of the mapping.</param>
            <param name="value">The mapped value.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieSplitNode`4.Lookup(`2,`3@)">
            <summary>
                TryGetValue the specified key in the tree.
            </summary>
            <param name="key">The key.</param>
            <param name="result">Set to the value mapped to the key if a mapping exists, <c>default(TLookupResult)</c> otherwise.</param>
            <returns><c>true</c> if a mapping for <paramref name="key" /> exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieSplitNode`4.LookupOrCreate(`2,`2,System.Func{`3})">
            <summary>
                Lookup a key, or create a mapping for the key.
            </summary>
            <param name="key">The key.</param>
            <param name="suffix">The suffix of the key yet to be matched.</param>
            <param name="factory">A function that computes a value, to be mapped for <paramref name="key" />.</param>
            <returns>The updated value mapped to <paramref name="key" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieSplitNode`4.LookupAll(`2)">
            <summary>
                Retrieves all results that are mapped to some extension of <paramref name="prefix" />.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns>
                A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />s such that the <c>Key</c> field of each lookup
                result is
                an extension of <see cref="!:prefix" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieSplitNode`4.GetAllDescendants">
            <summary>
                Retrieve all the descendants of this node in the tree.
            </summary>
            <returns>A sequence of all descendants of this node in the tree.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieSplitNode`4.GetAllLeaves">
            <summary>
                Retrieves all the leaf nodes reachable from this node.
            </summary>
            <returns>A sequence of leaf nodes that are reachable from this node.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.TrieSplitNode`4.GetEdges">
            <summary>
                Retrieves all the edges reachable from this node.
            </summary>
            <returns>A sequence of edges reachable from this node.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.Suggestion">
            <summary>
                Represents an autocompletion suggestion
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.Suggestion.#ctor(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleter,System.String,System.UInt32,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleter" /> that produced <c>this</c> <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.Suggestion" />.</param>
            <param name="prefixString">The full prefix used to generate this suggestion.</param>
            <param name="matchOffset">The index of the prefix from which the suggestions are an extension.</param>
            <param name="completionSuffix">The actual suggestion.</param>
            <param name="metadata">A property map containing any metadata associated with this suggestion.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.Suggestion.Source">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.Suggestion.PrefixString">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.Suggestion.MatchOffset">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.Suggestion.CompletionSuffix">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.Suggestion.Metadata">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.Suggestion.CompleteValue">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.Suggestion.Equals(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.ISuggestion)">
            <summary>
                Equality comparison
            </summary>
            <param name="other">The other <see cref="T:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.Suggestion" /> object.</param>
            <returns><c>true</c> if <c>this</c> is equal to <paramref name="other" />, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.Suggestion.Confirm">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.Suggestion.Equals(System.Object)">
            <summary>
                Equality comparison
            </summary>
            <param name="other">The other object.</param>
            <returns><c>true</c> if <c>this</c> is equal to <paramref name="other" />, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.Suggestion.GetHashCode">
            <summary>
                Retrieves the hash code for this object.
            </summary>
            <returns>The hash code for this object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint`2">
            <summary>
                A constraint on a program's behavior. Applies to programs of type <see cref="T:Microsoft.ProgramSynthesis.Program`2" />. Use the
                <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint`2.Valid(Microsoft.ProgramSynthesis.Program{`0,`1})" /> or <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint`2.Valid(Microsoft.ProgramSynthesis.Program{`0,`1},System.Collections.Generic.IEnumerable{`0})" />
                method to validate a program according to a constraint.
            </summary>
            <typeparam name="TInput">Input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutput">Output type of programs this contraint applies to.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint`2.IsSoft">
            <summary>
                If true, this constraint is not required to be satisfied.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint`2.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,`1})">
            <summary>Indicates whether the current constraint is equal to another constraint.</summary>
            <param name="other">A constraint to compare with this constraint.</param>
            <returns>true if the current constraint is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint`2.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,`1})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint`2.Valid(Microsoft.ProgramSynthesis.Program{`0,`1})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint`2.Valid(Microsoft.ProgramSynthesis.Program{`0,`1},System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Validate a program against this constraint given <paramref name="inputs" /> as valid inputs to the program. Used
                for constraints that need an input to run the program but do not contain enough information to construct one.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <param name="inputs">The inputs to use for validating the program.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint`2.op_Equality(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,`1},Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,`1})">
            <summary>
                Checks if two constraints are equal.
            </summary>
            <param name="left">The first constraint.</param>
            <param name="right">The second constraint.</param>
            <returns>
                True if <paramref name="left" /> and <paramref name="right" /> represent the same constraint on program
                behavior.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint`2.op_Inequality(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,`1},Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,`1})">
            <summary>
                Checks if two constraints are not equal.
            </summary>
            <param name="left">The first constraint.</param>
            <param name="right">The second constraint.</param>
            <returns>
                False if <paramref name="left" /> and <paramref name="right" /> represent the same constraint on program
                behavior.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint`2.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="other">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint`2.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintUtil">
            <summary>
                Utility methods for working with constraints.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintUtil.SelectOutputSubmembers``2(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``1}}}})">
            <summary>
                Selects all of the output submembers referenced in <paramref name="xs" />. The constraints are over programs whose
                outputs are a list of lists of output submembers, and may include information on an entire output, one of the
                output lists, or just a single output submember. This method handles all of those cases and collects all of the
                output submembers.
            </summary>
            <typeparam name="TInputMember">Member type of inputs to the programs these constraints are over.</typeparam>
            <typeparam name="TOutputSubmember">Submember type of outputs of the programs these constraints are over.</typeparam>
            <param name="xs">Constraints to extract output submembers from.</param>
            <returns>All of the output submembers in <paramref name="xs" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintUtil.SelectOutputMembers``2(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{``0,System.Collections.Generic.IEnumerable{``1}}})">
            <summary>
                Selects all of the output members referenced in <paramref name="xs" />. The constraints are over programs whose
                outputs are a list of output members, and may include information on an entire output or just a single output
                member. This method handles all of those cases and collects all of the output members.
            </summary>
            <typeparam name="TInput">Type of inputs to the programs these constraints are over.</typeparam>
            <typeparam name="TOutputMember">Member type of outputs of the programs these constraints are over.</typeparam>
            <param name="xs">Constraints to extract output members from.</param>
            <returns>All of the output members in <paramref name="xs" />.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.IConstraint">
            <summary>
                A constraint on a program's behavior.
            </summary>
            <seealso cref="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint`2" />
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.IConstraint.IsSoft">
            <summary>
                If true, this constraint is not required to be satisfied.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2">
            <summary>
                Supertype for constraints that have an explicit input value.
            </summary>
            <typeparam name="TInput">Input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutput">Output type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.#ctor(`0,System.Boolean)">
            <summary>
                Constructs constraint on an input.
            </summary>
            <param name="input">Program input this constraint applies to.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Input">
            <summary>
                Input this constraint applies to.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.IsSoft">
            <summary>
                If true, this constraint is not required to be satisfied.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput{`0,`1})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="other">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2">
            <summary>
                Supertype for constraints that reference an element of the input <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <typeparam name="TInputMember">Member type of input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutput">Output type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.#ctor(`0,System.Boolean)">
            <summary>
                Constructs constraint on an input member.
            </summary>
            <param name="inputMember">This constraint applies to all inputs that contain this value.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember">
            <summary>
                Member of program input this constraint applies to. This constraint applies to any input collection that contains
                this member.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.IsSoft">
            <summary>
                If true, this constraint is not required to be satisfied.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember{`0,`1})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.Valid(Microsoft.ProgramSynthesis.Program{System.Collections.Generic.IEnumerable{`0},`1})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.Valid(Microsoft.ProgramSynthesis.Program{System.Collections.Generic.IEnumerable{`0},`1},System.Collections.Generic.IReadOnlyList{`0},`1)">
            <summary>
                Validate a program against this constraint for the given input and corresponding output.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <param name="input">The input given to the program.</param>
            <param name="output">The output of <paramref name="program" /> on <paramref name="input" />.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.Valid(Microsoft.ProgramSynthesis.Program{System.Collections.Generic.IEnumerable{`0},`1},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
                Validate a program against this constraint given <paramref name="inputs" /> as valid inputs to the program. Used
                for constraints that need an input to run the program but do not contain enough information to construct one.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <param name="inputs">The inputs to use for validating the program.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="other">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.CorrespondingMemberDoesNotEqual`2">
            <summary>
                Constraint that checks that the output member corresponding to a given input member is not a specific value.
            </summary>
            <typeparam name="TInputMember">Member type of collections of the input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutputMember">Member type of collections of the output type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.CorrespondingMemberDoesNotEqual`2.#ctor(`0,`1,System.Boolean)">
            <summary>
                Constructs a constraint that checks that a program run on an input containing <paramref name="inputMember" /> does
                not output <paramref name="outputMember" /> in the corresponding place in the output. For example, if the fourth
                element of the input to the program is <paramref name="inputMember" />, the fourth element of the output must not
                be <paramref name="outputMember" />.
            </summary>
            <param name="inputMember">The input member this constraint is on.</param>
            <param name="outputMember">
                Disallowed corresponding output member of the program when run on
                <paramref name="inputMember" />.
            </param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.CorrespondingMemberDoesNotEqual`2.Valid(Microsoft.ProgramSynthesis.Program{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}},`1)">
            <summary>
                Validate a program against this constraint for the given output member corresponding to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" />.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <param name="programOutputMember">
                The output member of the program when run on a sequence containing
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" /> that appears at the corresponding position
                in the output.
            </param>
            <returns>
                False if <paramref name="programOutputMember" /> equals
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.OutputMember" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.CorrespondingMemberDoesNotEqual`2.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.CorrespondingMemberDoesNotEqual`2.ToString">
            <summary>
                Returns a string that shows the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.OutputMember" /> regions.
            </summary>
            <returns>
                A string that represents this constraint.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.CorrespondingMemberDoesNotIntersect`1">
            <summary>
                Constraint that checks that the output member corresponding to a given input member does not intersect a specific
                region.
            </summary>
            <typeparam name="TRegion">
                Member type of collections of the input and output types of programs this constraint applies
                to.
            </typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.CorrespondingMemberDoesNotIntersect`1.#ctor(`0,`0,System.Boolean)">
            <summary>
                Constructs a constraint that checks that a program run on an input containing <paramref name="inputMember" /> does
                not output a region intersecting <paramref name="outputMember" /> in the corresponding place in the output. For
                example, if the fourth element of the input to the program is <paramref name="inputMember" />, the fourth element
                of the output must not intersect <paramref name="outputMember" />.
            </summary>
            <param name="inputMember">The input member this constraint is on.</param>
            <param name="outputMember">Region the output of the program on <paramref name="inputMember" /> must not intersect.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.CorrespondingMemberDoesNotIntersect`1.Valid(Microsoft.ProgramSynthesis.Program{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0}},`0)">
            <summary>
                Validate a program against this constraint for the given output member corresponding to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" />.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <param name="programOutputMember">
                The output member of the program when run on a sequence containing
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" /> that appears at the corresponding position
                in the output.
            </param>
            <returns>
                False if <paramref name="programOutputMember" /> intersects
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.OutputMember" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.CorrespondingMemberDoesNotIntersect`1.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0}})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.CorrespondingMemberDoesNotIntersect`1.ToString">
            <summary>
                Returns a string that shows the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.OutputMember" /> regions.
            </summary>
            <returns>
                A string that represents this example.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.CorrespondingMemberEquals`2">
            <summary>
                Constraint that checks that the output member corresponding to a given input member is of the expected value.
            </summary>
            <typeparam name="TInputMember">Member type of collections of the input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutputMember">Member type of collections of the output type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.CorrespondingMemberEquals`2.#ctor(`0,`1,System.Boolean)">
            <summary>
                Constructs a constraint that checks that a program run on an input containing <paramref name="inputMember" />
                outputs <paramref name="outputMember" /> in the corresponding place in the output. For example, if the fourth
                element of the input to the program is <paramref name="inputMember" />, the fourth element of the output should be
                <paramref name="outputMember" />.
            </summary>
            <param name="inputMember">The input member this constraint is on.</param>
            <param name="outputMember">Output member of the program when run on <paramref name="inputMember" />.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.CorrespondingMemberEquals`2.Valid(Microsoft.ProgramSynthesis.Program{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}},`1)">
            <summary>
                Validate a program against this constraint for the given output member corresponding to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" />.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <param name="programOutputMember">
                The output member of the program when run on a sequence containing
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" /> that appears at the corresponding position
                in the output.
            </param>
            <returns>
                True if <paramref name="programOutputMember" /> equals
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.OutputMember" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.CorrespondingMemberEquals`2.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.CorrespondingMemberEquals`2.ToString">
            <summary>
                Returns a string that shows the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.OutputMember" /> regions.
            </summary>
            <returns>
                A string that represents this constraint.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotIntersect`1">
            <summary>
                When run on the specified input, the program does not output a region intersecting the given region.
            </summary>
            <typeparam name="TRegion">Region type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotIntersect`1.#ctor(`0,`0,System.Boolean)">
            <summary>
                Constructs a constraint requiring the when run on <paramref name="input" />, the program does not output a region
                intersecting <paramref name="output" />.
            </summary>
            <param name="input">Program input this constraint applies to.</param>
            <param name="output">Region the output on <paramref name="input" /> may not intersect.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotIntersect`1.Valid(Microsoft.ProgramSynthesis.Program{`0,`0})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>
                False if running <paramref name="program" /> on <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Input" /> results in a
                region which intersects with <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.Output" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotIntersect`1.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,`0})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotIntersect`1.ToString">
            <summary>
                Returns a string that shows the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Input" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.Output" /> regions.
            </summary>
            <returns>
                A string that represents this example.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotIntersectSequence`1">
            <summary>
                Constraint that no element of the output sequence for a specific input may intersect a specific region.
            </summary>
            <typeparam name="TRegion">Region type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotIntersectSequence`1.#ctor(`0,`0,System.Boolean)">
            <summary>
                Constructs a constraint requiring the when run on <paramref name="input" />, the program does not output any
                regions intersecting <paramref name="output" />.
            </summary>
            <param name="input">Program input this constraint applies to.</param>
            <param name="output">Region the output on <paramref name="input" /> may not intersect.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotIntersectSequence`1.Valid(Microsoft.ProgramSynthesis.Program{`0,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>
                False if <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToMemberConstraint`2.OutputMember" /> intersects any of the
                outputs when <paramref name="program" /> is run on <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Input" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotIntersectSequence`1.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotIntersectSequence`1.ToString">
            <summary>
                Returns a string that shows the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Input" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToMemberConstraint`2.OutputMember" /> regions.
            </summary>
            <returns>
                A string that represents this constraint.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotIntersectSequenceMember`1">
            <summary>
                Constraint that no element of the output sequence corresponding to specific input member may intersect a specific
                region.
            </summary>
            <typeparam name="TRegion">Region type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotIntersectSequenceMember`1.#ctor(`0,`0,System.Boolean)">
            <summary>
                Constructs a constraint requiring the when run on <paramref name="inputMember" />, the program does not output any
                regions intersecting <paramref name="outputSubmember" />.
            </summary>
            <param name="inputMember">Program input member this constraint applies to.</param>
            <param name="outputSubmember">Region the output on <paramref name="inputMember" /> may not intersect.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotIntersectSequenceMember`1.Valid(Microsoft.ProgramSynthesis.Program{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}}},System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Validate a program against this constraint for the given output member corresponding to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" />.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <param name="outputMember">
                The output member of the program when run on a sequence containing
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" /> that appears at the corresponding position
                in the output. This has some relation (defined by the subclass) to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToSubmemberConstraint`2.OutputSubmember" />.
            </param>
            <returns>
                False if <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToSubmemberConstraint`2.OutputSubmember" /> intersects any of the
                outputs when <paramref name="program" /> is run on
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotIntersectSequenceMember`1.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}}})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotIntersectSequenceMember`1.ToString">
            <summary>
                Returns a string that shows the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToSubmemberConstraint`2.OutputSubmember" /> regions.
            </summary>
            <returns>
                A string that represents this constraint.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.IOptions">
            <summary>
                Marker interface for a type that contains options. Used by <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.IOptionConstraint`1" />.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.IOptionConstraint`1">
            <summary>
                Marker interface for constraints that write their information to an <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.IOptions" /> object.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.IOptionConstraint`1.SetOptions(`0)">
            <summary>
                Set the options defined by this constraint in <paramref name="options" />.
            </summary>
            <param name="options">The <typeparamref name="TOptions" /> object to mutate.</param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.KnownProgram`2">
            <summary>
                Provides a <see cref="T:Microsoft.ProgramSynthesis.Program`2" /> that is known to be a good program for a similar synthesis task.
                The resulting program should be similar to this known program as much as possible.
            </summary>
            <typeparam name="TInput">Input type of the program.</typeparam>
            <typeparam name="TOutput">Output type of the program.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.KnownProgram`2.#ctor(Microsoft.ProgramSynthesis.Program{`0,`1})">
            <summary>
                Constructs a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.KnownProgram`2" /> constraint wrapping <paramref name="program" />.
            </summary>
            <param name="program">
                A <see cref="T:Microsoft.ProgramSynthesis.Program`2" /> that the learned program should be similar to if
                possible.
            </param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.KnownProgram`2.Program">
            <summary>
                A <see cref="T:Microsoft.ProgramSynthesis.Program`2" /> that the learned program should be similar to if possible.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.KnownProgram`2.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,`1})">
            <summary>Indicates whether the current constraint is equal to another constraint.</summary>
            <param name="other">A constraint to compare with this constraint.</param>
            <returns>true if the current constraint is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.KnownProgram`2.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,`1})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.KnownProgram`2.Valid(Microsoft.ProgramSynthesis.Program{`0,`1})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.KnownProgram`2.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberPrefix`2">
            <summary>
                Constraint that corresponding output member <see cref="T:System.Collections.Generic.IEnumerable`1" /> must begin with a given prefix.
            </summary>
            <typeparam name="TInputMember">Member type of collections of the input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutputSubmember">
                Member type of element type of collections of the output type of programs this constraint
                applies to.
            </typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberPrefix`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1},System.Boolean)">
            <summary>
                Constructs a constraint requiring the when run on <paramref name="inputMember" />, the corresponding program output
                member begins with <paramref name="outputMember" />.
            </summary>
            <param name="inputMember">Program input member this constraint applies to.</param>
            <param name="outputMember">Required prefix for the corresponding output.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberPrefix`2.Valid(Microsoft.ProgramSynthesis.Program{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`1}}},System.Collections.Generic.IEnumerable{`1})">
            <summary>
                Validate a program against this constraint for the given output member corresponding to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" />.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <param name="programOutputMember">
                The output member of the program when run on a sequence containing
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" />
                that appears at the corresponding position in the output.
            </param>
            <returns>
                True if <paramref name="programOutputMember" /> begins with
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.OutputMember" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberPrefix`2.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`1}}})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberPrefix`2.ToString">
            <summary>
                Returns a string that shows the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.OutputMember" /> regions.
            </summary>
            <returns>
                A string that represents this prefix constraint.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberSubset`2">
            <summary>
                Constraint that corresponding output member <see cref="T:System.Collections.Generic.IEnumerable`1" /> must contain the given subset.
            </summary>
            <typeparam name="TInputMember">Member type of collections of the input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutputSubmember">
                Member type of element type of collections of the output type of programs this constraint
                applies to.
            </typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberSubset`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1},System.Boolean)">
            <summary>
                Constructs a constraint requiring the when run on <paramref name="inputMember" />, the corresponding program output
                member is a superset of <paramref name="outputMember" />.
            </summary>
            <param name="inputMember">Program input member this constraint applies to.</param>
            <param name="outputMember">Required subset of the corresponding output.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberSubset`2.Valid(Microsoft.ProgramSynthesis.Program{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`1}}},System.Collections.Generic.IEnumerable{`1})">
            <summary>
                Validate a program against this constraint for the given output member corresponding to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" />.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <param name="programOutputMember">
                The output member of the program when run on a sequence containing
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" /> that appears at the corresponding position
                in the output.
            </param>
            <returns>
                True if <paramref name="programOutputMember" /> is a superset of
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.OutputMember" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberSubset`2.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`1}}})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberSubset`2.ToString">
            <summary>
                Returns a string that shows the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.OutputMember" /> regions.
            </summary>
            <returns>
                A string that represents this subset constraint.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2">
            <summary>
                Supertype for constraints that have an element of an input collection and an element of an output collection.
            </summary>
            <typeparam name="TInputMember">Member type of collections of the input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutputMember">Member type of collections of the output type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.#ctor(`0,`1,System.Boolean)">
            <summary>
                Constructs a constraint on an input member and its corresponding output member. This only makes sense for programs
                that perform something like a map operation; this is, the input is a list and the program generates a list of
                outputs that correspond to the inputs.
            </summary>
            <param name="inputMember">The input member this constraint is on.</param>
            <param name="outputMember">The corresponding output this constraint references.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.OutputMember">
            <summary>
                Member of program output this constraint references. This has some relation (defined by the subclass) to the output
                of the program corresponding to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint{`0,`1})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.Valid(Microsoft.ProgramSynthesis.Program{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}},`1)">
            <summary>
                Validate a program against this constraint for the given output member corresponding to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" />.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <param name="programOutputMember">
                The output member of the program when run on a sequence containing
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" /> that appears at the corresponding position
                in the output.
            </param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.Valid(Microsoft.ProgramSynthesis.Program{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}},System.Collections.Generic.IReadOnlyList{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
                Validate a program against this constraint for the given input and corresponding output.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <param name="input">The input given to the program.</param>
            <param name="output">The output of <paramref name="program" /> on <paramref name="input" />.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="other">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToSubmemberConstraint`2">
            <summary>
                Supertype for constraints that have an element of an input collection and an element of an element of an output
                collection.
            </summary>
            <typeparam name="TInputMember">Member type of collections of the input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutputSubmember">
                Member type of element type of collections of the output type of programs this constraint
                applies to.
            </typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToSubmemberConstraint`2.#ctor(`0,`1,System.Boolean)">
            <summary>
                Constructs a constraint on an input member and a member of its corresponding output member. This only makes sense
                for programs that perform something like a map operation; this is, the input is a list and the program generates a
                list of outputs that correspond to the inputs.
            </summary>
            <param name="inputMember">The input member this constraint is on.</param>
            <param name="outputSubmember">
                The output submember this constraint references; has to do with the output member
                corresponding to <paramref name="inputMember" />.
            </param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToSubmemberConstraint`2.OutputSubmember">
            <summary>
                Submember of program output this constraint references. This has some relation (defined by the subclass) to the
                output of the program corresponding to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToSubmemberConstraint`2.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToSubmemberConstraint{`0,`1})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToSubmemberConstraint`2.Valid(Microsoft.ProgramSynthesis.Program{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`1}}},System.Collections.Generic.IEnumerable{`1})">
            <summary>
                Validate a program against this constraint for the given output member corresponding to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" />.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <param name="outputMember">
                The output member of the program when run on a sequence containing
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" /> that appears at the corresponding position
                in the output. This has some relation (defined by the subclass) to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToSubmemberConstraint`2.OutputSubmember" />.
            </param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToSubmemberConstraint`2.Valid(Microsoft.ProgramSynthesis.Program{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`1}}},System.Collections.Generic.IReadOnlyList{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`1}})">
            <summary>
                Validate a program against this constraint for the given input and corresponding output.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <param name="input">The input given to the program.</param>
            <param name="output">The output of <paramref name="program" /> on <paramref name="input" />.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToSubmemberConstraint`2.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="other">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToSubmemberConstraint`2.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`1}}})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToSubmemberConstraint`2.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotEqual`2">
            <summary>
                Specifies an invalid output for a specific input.
            </summary>
            <typeparam name="TInput">Input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutput">Output type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotEqual`2.#ctor(`0,`1,System.Boolean)">
            <summary>
                Construct a constraint requiring that the output of a program on <paramref name="input" /> is not
                <paramref name="output" />.
            </summary>
            <param name="input">Program input this constraint applies to.</param>
            <param name="output">Invalid program output for <paramref name="input" />.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotEqual`2.Valid(Microsoft.ProgramSynthesis.Program{`0,`1})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotEqual`2.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,`1})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.DoesNotEqual`2.ToString">
            <summary>
                Returns a string that shows the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Input" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.Output" /> regions.
            </summary>
            <returns>
                A string that represents this example.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.NegativeMemberSubset`2">
            <summary>
                Constraint that corresponding output member <see cref="T:System.Collections.Generic.IEnumerable`1" /> must not contain any of the given
                elements.
            </summary>
            <typeparam name="TInputMember">Member type of collections of the input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutputSubmember">
                Member type of element type of collections of the output type of programs this constraint
                applies to.
            </typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.NegativeMemberSubset`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1},System.Boolean)">
            <summary>
                Constructs a constraint requiring the when run on <paramref name="inputMember" />, the corresponding program output
                member does not contain any of <paramref name="outputMember" />.
            </summary>
            <param name="inputMember">Program input member this constraint applies to.</param>
            <param name="outputMember">Forbidden elements of the corresponding output.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.NegativeMemberSubset`2.Valid(Microsoft.ProgramSynthesis.Program{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`1}}},System.Collections.Generic.IEnumerable{`1})">
            <summary>
                Validate a program against this constraint for the given output member corresponding to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" />.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <param name="programOutputMember">
                The output member of the program when run on a sequence containing
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" /> that appears at the corresponding position
                in the output.
            </param>
            <returns>
                False if <paramref name="programOutputMember" /> contains any elements of
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.OutputMember" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.NegativeMemberSubset`2.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`1}}})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.NegativeMemberSubset`2.ToString">
            <summary>
                Returns a string that shows the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInputMember`2.InputMember" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.MemberToMemberConstraint`2.OutputMember" /> values.
            </summary>
            <returns>
                A string that represents this <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.NegativeMemberSubset`2" /> constraint.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.NegativeSubset`2">
            <summary>
                Constraint on that output <see cref="T:System.Collections.Generic.IEnumerable`1" /> must not contain any elements of a given subset.
            </summary>
            <typeparam name="TInput">Input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutputMember">Member type of collections of the output type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.NegativeSubset`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1},System.Boolean)">
            <summary>
                Constructs a constraint that when run on <paramref name="input" />, the program's output may not contain any
                elements of <paramref name="output" />.
            </summary>
            <param name="input">Program input this constraint applies to.</param>
            <param name="output">Elements which may not appear in output of program on <paramref name="input" />.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.NegativeSubset`2.Valid(Microsoft.ProgramSynthesis.Program{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>
                False if <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.Output" /> intersects the output of
                <paramref name="program" /> when run on <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Input" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.NegativeSubset`2.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.NegativeSubset`2.ToString">
            <summary>
                Returns a string that shows the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Input" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.Output" /> regions.
            </summary>
            <returns>
                A string that represents this negative subset constraint.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.OutputIs`2">
            <summary>
                Constraint that the output is assignable to a specified type.
            
                NOTE: To use this, your output type must implement ITypedValue.  We don't use a generic type constraint to
                      enforce this requirement so that the JsonSerializerSettings for the base session type can include
                      this object in its set of known types without requiring the generic type constraint to be placed
                      on all program output types.  Instead we enforce the type expectation at runtime in the Valid method
                      below.
            </summary>
            <typeparam name="TInput">Input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutput">Output type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.OutputIs`2.#ctor(Microsoft.ProgramSynthesis.Wrangling.IType)">
            <summary>
                Constructs a constraint which requires outputs to be assignable to <paramref name="type" />.
            </summary>
            <param name="type">Type required of outputs.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.OutputIs`2.Type">
            <summary>
                Type outputs must be assignable to.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.OutputIs`2.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,`1})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.OutputIs`2.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,`1})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.OutputIs`2.Valid(Microsoft.ProgramSynthesis.Program{`0,`1})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.OutputIs`2.Valid(Microsoft.ProgramSynthesis.Program{`0,`1},System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Validate a program against this constraint given <paramref name="inputs" /> as valid inputs to the program. Used
                for constraints that need an input to run the program but do not contain enough information to construct one.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <param name="inputs">The inputs to use for validating the program.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.OutputIs`2.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.OutputIs`2.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.Subset`2">
            <summary>
                Constraint on that output <see cref="T:System.Collections.Generic.IEnumerable`1" /> must contain a given subset.
            </summary>
            <typeparam name="TInput">Input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutputMember">Member type of collections of the output type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Subset`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1},System.Boolean)">
            <summary>
                Constructs a constraint that when run on <paramref name="input" />, the program's output must be a superset of
                <paramref name="output" />.
            </summary>
            <param name="input">Program input this constraint applies to.</param>
            <param name="output">Subset of output of program on <paramref name="input" />.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Subset`2.Valid(Microsoft.ProgramSynthesis.Program{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>
                True if the output of the program on <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Input" /> is a superset of
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.Output" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Subset`2.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Subset`2.ToString">
            <summary>
                Returns a string that shows the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Input" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.Output" /> regions.
            </summary>
            <returns>
                A string that represents this subset constraint.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToMemberConstraint`2">
            <summary>
                Supertype for constraints that have an explicit input value and an element of an output collection.
            </summary>
            <typeparam name="TInput">Input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutputMember">Member type of collections of the output type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToMemberConstraint`2.#ctor(`0,`1,System.Boolean)">
            <summary>
                Constructs a constraint on an input and a member of its corresponding output.
            </summary>
            <param name="input">The input this constraint is on.</param>
            <param name="outputMember">The output member this constraint references.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToMemberConstraint`2.OutputMember">
            <summary>
                Member of program output this constraint references. This has some relation (defined by the subclass) to the output
                of the program when run on <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Input" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToMemberConstraint`2.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToMemberConstraint{`0,`1})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToMemberConstraint`2.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="other">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToMemberConstraint`2.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToMemberConstraint`2.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.Example`2">
            <summary>
                Equality constraint on the output of a program for a given input.
            </summary>
            <typeparam name="TInput">Input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutput">Output type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Example`2.#ctor(`0,`1,System.Boolean)">
            <summary>
                Constructs an input/output example.
            </summary>
            <param name="input">Program input this constraint applies to.</param>
            <param name="output">Value program must output when run on <paramref name="input" />.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Example`2.Valid(Microsoft.ProgramSynthesis.Program{`0,`1})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Example`2.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,`1})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Example`2.ToString">
            <summary>
                Returns a string that shows the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Input" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.Output" />.
            </summary>
            <returns>
                A string that represents this example.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2">
            <summary>
                Supertype for constraints that have an explicit input and output value.
            </summary>
            <typeparam name="TInput">Input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutput">Output type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.#ctor(`0,`1,System.Boolean)">
            <summary>
                Constructs constraint on an input that references an output.
            </summary>
            <param name="input">Program input this constraint applies to.</param>
            <param name="output">Program output this constraint references.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.Output">
            <summary>
                Output value this constraint references.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint{`0,`1})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,`1})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="other">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Constraints.Prefix`2">
            <summary>
                Constraint that output <see cref="T:System.Collections.Generic.IEnumerable`1" /> must begin with a given prefix.
            </summary>
            <typeparam name="TInput">Input type of programs this constraint applies to.</typeparam>
            <typeparam name="TOutputMember">Member type of collections of the output type of programs this constraint applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Prefix`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1},System.Boolean)">
            <summary>
                Constructs a constraint that when run on <paramref name="input" />, the program's output must begin with
                <paramref name="output" />.
            </summary>
            <param name="input">Program input this constraint applies to.</param>
            <param name="output">Prefix of output of program on <paramref name="input" />.</param>
            <param name="isSoft">If true, this is a soft (optional) constraint.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Prefix`2.Valid(Microsoft.ProgramSynthesis.Program{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>
                True if the output of <paramref name="program" /> on <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Input" /> is
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.Output" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Prefix`2.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Constraints.Prefix`2.ToString">
            <summary>
                Returns a string that shows the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ConstraintOnInput`2.Input" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Constraints.ValueToValueConstraint`2.Output" /> regions.
            </summary>
            <returns>
                A string that represents this prefix constraint.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.AlphaNumericToken">
            <summary>
                Represents an AlphaNumeric token.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.AlphaNumericToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.AlphaNumericToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.AlphaNumericToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.AlphaNumericToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.AlphaNumericTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.AlphaNumericToken" />s.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.AlphaToken">
            <summary>
                A token that consists of letters.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.AlphaToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.AlphaToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.AlphaToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.AlphaToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.AlphaTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.AlphaToken" />s.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CharCategoryBasedToken">
            <summary>
                A generic string token.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CharCategoryBasedToken.#ctor(System.String,System.Int32,System.Int32,System.Globalization.UnicodeCategory)">
            <summary>
                Constructor.
            </summary>
            <param name="sourceAsString">The source string of the token.</param>
            <param name="start">The start index of this token in <paramref name="sourceAsString" />.</param>
            <param name="end">The end index (exclusive) of this token in <paramref name="sourceAsString" />.</param>
            <param name="charCategory">
                The <see cref="T:System.Globalization.UnicodeCategory" /> of the characters in <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken.Value" />.
            </param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CharCategoryBasedToken.CharCategory">
            <summary>
                The <see cref="T:System.Globalization.UnicodeCategory" /> of the characters in <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken.Value" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CharCategoryBasedToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CharCategoryBasedToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CharCategoryBasedToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CharCategoryBasedTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CharCategoryBasedToken" />s
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CharCategoryBasedTokenizer.Tokenize(System.String)">
            <summary>
                Tokenizes a sequence.
            </summary>
            <param name="sequence">The sequence of things to tokenize.</param>
            <returns>A tokenization of <paramref name="sequence" /></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CharCategoryBasedTokenizer.Tokenize(System.String,System.Int32,System.Int32)">
            <summary>
                Tokenizes the part of the <paramref name="sequence" /> that lie within <paramref name="start" /> and
                <see cref="!:end" />, exclusive.
            </summary>
            <param name="sequence">The sequence to be tokenize.</param>
            <param name="start">
                The starting position of the region in <paramref name="sequence" /> within which the tokens
                returned are expected to lie.
            </param>
            <param name="end">
                The ending position (exclusive) of the region in <paramref name="sequence" /> within which the tokens
                returned are expected to lie.
            </param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CreditCardNumberToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents a credit card number.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CreditCardNumberToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The source from which this token was extracted.</param>
            <param name="start">The start index of this token in <paramref name="source" />.</param>
            <param name="end">The end index (exclusive) of this token in <paramref name="source" />.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CreditCardNumberToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CreditCardNumberToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CurrencyToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents a currency value.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CurrencyToken.#ctor(System.String,System.Int32,System.Int32,System.Double,System.String)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
            <param name="numericValue">The numeric value associated with this token</param>
            <param name="currencySymbol">The currency symbol.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CurrencyToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CurrencyToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CurrencyToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CurrencyTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CurrencyToken" />s.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.CurrencyTokenizer.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DashedNumbersToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents sequences of digits, possibly separated by dashes, dots, etc.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DashedNumbersToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DashedNumbersToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DashedNumbersToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DashedNumbersToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DashedNumbersTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DashedNumbersToken" />s
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DashedNumbersTokenizer.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DateToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents dates.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DateToken.#ctor(System.String,System.Int32,System.Int32,System.DateTime)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
            <param name="dateTime">The <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DateToken.DateTime" /> object corresponding to the detected date entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DateToken.DateTime">
            <summary>
                The <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DateToken.DateTime" /> object associated with this token.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DateToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DateToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DateToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DateToken.ValueBasedEquality(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)">
            <summary>
                Value based equality (as opposed to position based equality).
            </summary>
            <param name="other">The other <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> to check for equality with.</param>
            <returns>
                <c>true</c> if and only if the type of <paramref name="other" /> is the same as the type of this token, and the
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DateToken.DateTime" /> properties of <paramref name="other" /> and <c>this</c> are equal.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DateToken.ValueBasedHashCode">
            <summary>
                Returns a value based hash code that satisfies the constraint of <see cref="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.ValueBasedEquality(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DateTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DateToken" />s
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DateTokenizer.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DomainNameToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DomainNameToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DomainNameToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DomainNameToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DomainNameTokenizer">
            <summary>
                A <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.RegexBasedTokenizer" /> that extracts domain names.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.DomainNameTokenizer.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EmailToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents an email address.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EmailToken.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
            <param name="userName">The user name component of the email address.</param>
            <param name="domainName">The domain name component of the email address.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EmailToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EmailToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EmailToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EmailTokenizer">
            <summary>
                A <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.RegexBasedTokenizer" /> that extracts email addresses and yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EmailToken" />s.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EmailTokenizer.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EnclosedRegionToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents regions enclosed by '()', '{}', etc.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EnclosedRegionToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EnclosedRegionToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EnclosedRegionToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EnclosedRegionToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EnclosedRegionTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EnclosedRegionToken" />s.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EnclosedRegionTokenizer.Tokenize(System.String)">
            <summary>
                Tokenizes a sequence.
            </summary>
            <param name="sequence">The sequence of things to tokenize.</param>
            <returns>A tokenization of <paramref name="sequence" /></returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer">
            <summary>
                An abstract class that represents a tokenizer capable of extracting
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" />s from a sequence.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer.KnownSubTypes">
            <summary>
                The set of all known (supported) subtypes of this type.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer.KnownSubTypeNames">
            <summary>
                The assembly qualified names of all known (supported) subtypes.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer.Equals(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer.RenderHumanReadable">
            <summary>
                Render this as a human-readable string representation. This should be parseable by the corresponding
                <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseHumanReadableString" /> method.
            </summary>
            <returns>A compact string representation of this object that is easy for a human to understand.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer.RenderXML">
            <summary>
                Render this as XML. This should be parseable by the corresponding <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseXML" />
                method.
            </summary>
            <returns>An XML representation of this object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer.TryParseXML(System.Xml.Linq.XElement)">
            <summary>
                Parse the serialized XML representation of an object of this type.
            </summary>
            <param name="literal">
                The XML tree corresponding to the serialization of an object of type
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" />.
            </param>
            <returns>
                An object of type <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that corresponds to the serialized object represented by
                <paramref name="literal" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer.TryParseHumanReadable(System.String)">
            <summary>
                Parse the serialized human-readable representation of an object of this type.
            </summary>
            <param name="literal">
                The string corresponding to the human-readable serialization of an object of type
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" />.
            </param>
            <returns>
                An object of type <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that corresponds to the serialized object represented by
                <paramref name="literal" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken">
            <summary>
                An abstract class that represents tokens which represent some kind of entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.Equals(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.ValueBasedEquality(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)">
            <summary>
                Value based equality (as opposed to position based equality).
            </summary>
            <param name="other">The other <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> to check for equality with.</param>
            <returns>
                <c>true</c> if and only if the type of <paramref name="other" /> is the same as the type of this token, and
                <paramref name="other" /> is "value-equal" to <c>this</c>. The notion of value equality may be overriden by
                subclasses, but defaults to the <see cref="!:EntityToken.Value" /> property being equal on the two objects.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.ValueBasedHashCode">
            <summary>
                Returns a value based hash code that satisfies the constraint of <see cref="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.ValueBasedEquality(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)" />.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.FileNameToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents file names.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.FileNameToken.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
            <param name="fileName">The file name.</param>
            <param name="extension">The file extension.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.FileNameToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.FileNameToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.FormattedNumberToken">
            <summary>
                A <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.NumericToken" /> that represents a formatted number.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.FormattedNumberToken.#ctor(System.String,System.Int32,System.Int32,System.Double)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
            <param name="numericValue">The numeric value of this token.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.FormattedNumberToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.FormattedNumberToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.GuidToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents a <see cref="T:System.Guid" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.GuidToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.GuidToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.GuidToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.HexNumberToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents a hexadecimal number.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.HexNumberToken.#ctor(System.String,System.Int32,System.Int32,System.UInt64)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
            <param name="numericValue">The numeric value of this token.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.HexNumberToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.HexNumberToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpAddressToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents an IP address.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpAddressToken.#ctor(System.String,System.Int32,System.Int32,System.Net.IPAddress)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
            <param name="address">The IP address.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpAddressToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpAddressToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpAddressToken.ValueBasedEquality(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)">
            <summary>
                Value based equality (as opposed to position based equality).
            </summary>
            <param name="other">The other <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> to check for equality with.</param>
            <returns>
                <c>true</c> if and only if the type of <paramref name="other" /> is the same as the type of this token,
                and the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpAddressToken.Address" /> properties of <paramref name="other" /> and <c>this</c> are equal.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpAddressToken.ValueBasedHashCode">
            <summary>
                Returns a value based hash code that satisfies the constraint of <see cref="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.ValueBasedEquality(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpAddressTokenizer">
            <summary>
                A <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.RegexBasedTokenizer" /> that extracts IP addresses and yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpAddressToken" />s.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpAddressTokenizer.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV4AddressToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents an IPV4 address.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV4AddressToken.#ctor(System.String,System.Int32,System.Int32,System.Net.IPAddress)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
            <param name="address">The IP address.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV4AddressToken.EntityName">
            <summary>The name of this entity.</summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV4AddressToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV4CidrAddressToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents a CIDR IPV4 address.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV4CidrAddressToken.#ctor(System.String,System.Int32,System.Int32,System.Net.IPAddress,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
            <param name="address">The IP address.</param>
            <param name="subnetBits">The number of bits of the address that represent the subnet.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV4CidrAddressToken.ValueBasedEquality(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)">
            <summary>
                Value based equality (as opposed to position based equality).
            </summary>
            <param name="other">The other <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> to check for equality with.</param>
            <returns>
                <c>true</c> if and only if the type of <paramref name="other" /> is the same as the type of this token,
                and the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpAddressToken.Address" /> properties of <paramref name="other" /> and <c>this</c> are equal,
                and the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV4CidrAddressToken.SubnetBits" /> properties on the two objects are equal.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV4CidrAddressToken.ValueBasedHashCode">
            <summary>
                Returns a value based hash code that satisfies the constraint of <see cref="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.ValueBasedEquality(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV6AddressToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents an IPV6 address.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV6AddressToken.#ctor(System.String,System.Int32,System.Int32,System.Net.IPAddress)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
            <param name="address">The IP address.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV6AddressToken.EntityName">
            <summary>The name of this entity.</summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV6AddressToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV6CidrAddressToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents a CIDR IPV6 address.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV6CidrAddressToken.#ctor(System.String,System.Int32,System.Int32,System.Net.IPAddress,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
            <param name="address">The IP address.</param>
            <param name="subnetBits">The number of bits in the address that denote the subnet.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV6CidrAddressToken.ValueBasedEquality(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)">
            <summary>
                Value based equality (as opposed to position based equality).
            </summary>
            <param name="other">The other <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> to check for equality with.</param>
            <returns>
                <c>true</c> if and only if the type of <paramref name="other" /> is the same as the type of this token,
                and the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpAddressToken.Address" /> properties of <paramref name="other" /> and <c>this</c> are equal,
                and the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV6CidrAddressToken.SubnetBits" /> properties of the two objects are equal.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.IpV6CidrAddressToken.ValueBasedHashCode">
            <summary>
                Returns a value based hash code that satisfies the constraint of <see cref="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.ValueBasedEquality(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MacAddressToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents a MAC address.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MacAddressToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MacAddressToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MacAddressToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MacAddressToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MacAddressTokenizer">
            <summary>
                A <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.RegexBasedTokenizer" /> that extracts MAC addresses and yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MacAddressToken" />s.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MacAddressTokenizer.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MaskedCreditCardNumberToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents a masked credit card number.
                e.g. XXXX-XXXX-XXXX-1234
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MaskedCreditCardNumberToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MaskedCreditCardNumberToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MaskedCreditCardNumberToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MaskedSocialSecurityNumberToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents a masked social security number.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MaskedSocialSecurityNumberToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MaskedSocialSecurityNumberToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.MaskedSocialSecurityNumberToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.NumericToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents numbers.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.NumericToken.#ctor(System.String,System.Int32,System.Int32,System.Double)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
            <param name="numericValue">The numeric value of this token.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.NumericToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.NumericToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.NumericToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.NumericToken.Equals(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.NumericToken.ValueBasedEquality(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)">
            <summary>
                Value based equality.
            </summary>
            <param name="other">The other <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> to check for equality with.</param>
            <returns>
                <c>true</c> if and only if the type of <paramref name="other" /> is the same as the type of this token, and
                the Value properties are equal.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.NumericToken.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.NumericToken.ValueBasedHashCode">
            <summary>
                Returns a value based hash code that satisfies the constraint of <see cref="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.ValueBasedEquality(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.NumericTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.NumericToken" />s
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.NumericTokenizer.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PathToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents file-system paths.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PathToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PathToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PathToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PathToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PathTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PathToken" />s.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PathTokenizer.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PhoneNumberToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents phone numbers.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PhoneNumberToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PhoneNumberToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PhoneNumberToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PhoneNumberToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PhoneNumberTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PhoneNumberToken" />s.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PhoneNumberTokenizer.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PhraseToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents a phrase
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PhraseToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PhraseToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PhraseToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PhraseToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PhraseTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PhraseToken" />s
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PunctuationSeparatedAlphaNumericToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents sequences of alpha-numeric characters with dashes, dots, etc. between
                them.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PunctuationSeparatedAlphaNumericToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PunctuationSeparatedAlphaNumericToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PunctuationSeparatedAlphaNumericToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PunctuationSeparatedAlphaNumericToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PunctuationSeparatedAlphaNumericTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.PunctuationSeparatedAlphaNumericToken" />s.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.OverlapStrategy">
            <summary>
                An enumerated type that is used to describe how overlapping <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch" />es are to be handled.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.OverlapStrategy.None">
            <summary>
                Do nothing, all overlapping <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch" />es are returned.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.OverlapStrategy.Subsumption">
            <summary>
                Returns only those <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch" /> that are not strictly subsumed by
                any other match.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.OverlapStrategy.StopAtFirstSuccess">
            <summary>
                Stop tokenizing as soon as we find a pattern that returns a non-empty result.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.RegexBasedTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that uses <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern" />s to specify the extraction logic.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.RegexBasedTokenizer.MakeTokensFromMatches(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch})">
            <summary>
                Creates the <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> objects corresponding to a sequence of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch" />
                objects.
                This is a default implementation provided for convenience. Subclasses may override this method if necessary.
            </summary>
            <param name="matches">The sequence of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch" /> objects.</param>
            <returns>
                <c>null</c> if <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.RegexBasedTokenizer.TokenFactory" /> is null, otherwise a sequence of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> objects
                obtained by applying <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.RegexBasedTokenizer.TokenFactory" /> on each element of <paramref name="matches" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.RegexBasedTokenizer.Tokenize(System.String)">
            <summary>
                Tokenize the given string.
            </summary>
            <param name="sequence">The input string.</param>
            <returns>
                A sequence of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" />s correponding to the entities extracted from
                <paramref name="sequence" />.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.SocialSecurityNumberToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents a Social Security Number.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.SocialSecurityNumberToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.SocialSecurityNumberToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.SocialSecurityNumberToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TimeToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents times.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TimeToken.#ctor(System.String,System.Int32,System.Int32,System.DateTime)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
            <param name="time">
                The <see cref="T:System.DateTime" /> object corresponding to the time entity detected in
                <paramref name="source" />.
            </param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TimeToken.Time">
            <summary>
                The time represented by this token.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TimeToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TimeToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TimeToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TimeToken.ValueBasedEquality(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)">
            <summary>
                Value based equality (as opposed to position based equality).
            </summary>
            <param name="other">The other <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> to check for equality with.</param>
            <returns>
                <c>true</c> if and only if the type of <paramref name="other" /> is the same as the type of this token,
                and the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TimeToken.Time" /> properties of <paramref name="other" /> and <c>this</c> are equal.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TimeToken.ValueBasedHashCode">
            <summary>
                Returns a value based hash code that satisfies the constraint of <see cref="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.ValueBasedEquality(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TimeTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TimeToken" />s.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TimeTokenizer.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TitleCaseToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents a TitleCaseWord
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TitleCaseToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TitleCaseToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TitleCaseToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TitleCaseToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TitleCaseTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.TitleCaseToken" />s.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.UrlToken">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that represents a URL.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.UrlToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The <see cref="T:System.String" /> that contains the entity.</param>
            <param name="start">The index of the first position in <paramref name="source" /> that is part of this entity.</param>
            <param name="end">The index of the last position in <paramref name="source" /> (exclusive) that is part of this entity.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.UrlToken.ScoreMultiplier">
            <summary>
                Represents the multiplier for the score of strings matched by this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.UrlToken.EntityName">
            <summary>
                The name of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.UrlToken.MakeSearchTreeEntries(Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.IAutoCompleteSearchTree,System.Boolean)">
            <summary>
                Makes the entries corresponding this to this entity in a search tree for autocompletion.
            </summary>
            <param name="tree">The search tree to be used for autocompletion.</param>
            <param name="includeNonExtensionCompletions">
                If true, then the search tree will include completions that are _not_
                extensions of the user input. e.g. "day" -> "Monday", etc.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.UrlTokenizer">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.UrlToken" />s.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.UrlTokenizer.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.ValueAndPositionBasedEntityEqualityComparer.Instance">
            <summary>
                The singleton instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.ValueAndPositionBasedEntityEqualityComparer.Equals(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken,Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)">
            <summary>Determines whether the specified objects are equal.</summary>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.ValueAndPositionBasedEntityEqualityComparer.GetHashCode(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)">
            <summary>Returns a hash code for the specified object.</summary>
            <returns>A hash code for the specified object.</returns>
            <param name="obj">The object for which a hash code is to be returned.</param>
            <exception cref="T:System.ArgumentNullException">
                The type of <paramref name="obj" /> is a reference type and
                <paramref name="obj" /> is null.
            </exception>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.ValueBasedEntityToken">
            <summary>
                A helper abstract class that derives from <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" />.
                The <see cref="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.ValueBasedEntityToken.Equals(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)" /> method defaults to <see cref="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.ValueBasedEquality(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)" />
                and the <see cref="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.ValueBasedEntityToken.GetHashCode" /> method defaults to <see cref="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken.ValueBasedHashCode" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.ValueBasedEntityToken.Equals(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.ValueBasedEntityToken.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2">
            <summary>
                A common interface for tokens. A <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2" /> provides two views:
                1. As a contiguous subsequence of <typeparamref name="TSequenceable" /> objects, represented as a
                <typeparamref name="TSequence" /> object.
                2. As a contiguous subsequence of a <see cref="T:System.String" /> object.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.SourceSequence">
            <summary>
                The source sequence of this token.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.StartInSequence">
            <summary>
                The start index in the source sequence for this token.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.EndInSequence">
            <summary>
                The end index (exclusive) in the source sequence for this token.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.TokenSubSequence">
            <summary>
                The actual value of this token, represented as a contiguous subsequence of
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.SourceSequence" /> from <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.StartInSequence" /> to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.EndInSequence" />, exclusive.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.SourceString">
            <summary>
                The backing <see cref="T:System.String" /> on top of which the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.SourceSequence" /> is built.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.Start">
            <summary>
                The start index of the string corresponding to the value <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.StartInSequence" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.End">
            <summary>
                The end index of the string corresponding to the value <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.EndInSequence" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.Value">
            <summary>
                The value of this token represented as a <see cref="T:System.String" />.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.ITokenizer`3">
            <summary>
                An interface for tokenizers.
            </summary>
            <typeparam name="TToken">The type of the tokens that the tokenizer returns.</typeparam>
            <typeparam name="TSequenceable">The type whose sequences are expected to be tokenized.</typeparam>
            <typeparam name="TSequence">
                The type of the actual sequence used to sequence objects of
                <typeparamref name="TSequenceable" />.
            </typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.ITokenizer`3.Tokenize(`2)">
            <summary>
                Tokenizes a sequence.
            </summary>
            <param name="sequence">The sequence of things to tokenize.</param>
            <returns>A semantic tokenization of <paramref name="sequence" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.ITokenizer`3.Tokenize(System.Collections.Generic.IEnumerable{`2})">
            <summary>
                Tokenizes a sequence of sequences.
            </summary>
            <param name="sequences">The sequence of sequences to tokenize.</param>
            <returns>One sequence of semantics tokens per sequence in <paramref name="sequences" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.ITokenizer`3.TokenAtStartOrDefault(`2)">
            <summary>
                Retrieves a token if and only if the <paramref name="sequence" /> begins with a token that this tokenizer
                recognizes.
            </summary>
            <param name="sequence">The sequence in which to look for the token.</param>
            <returns>
                The first occurrence of a token if <paramref name="sequence" /> begins with the token, otherwise
                <c>default(TToken)</c>.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken">
            <summary>
                Represents an <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2" /> where the sequenceable type is <see cref="T:System.Char" />
                and a <see cref="T:System.String" /> is used to hold a sequence of <see cref="T:System.Char" />s.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="source">The source string.</param>
            <param name="start">The start index of this token in <paramref name="source" />.</param>
            <param name="end">The end index (exclusive) of this token in <paramref name="source" />.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken.Equals(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken.SourceSequence">
            <summary>
                The source sequence of this token.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken.StartInSequence">
            <summary>
                The start index in the source sequence for this token.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken.EndInSequence">
            <summary>
                The end index (exclusive) in the source sequence for this token.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken.TokenSubSequence">
            <summary>
                The actual value of this token, represented as a contiguous subsequence of
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.SourceSequence" /> from
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.StartInSequence" /> to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.EndInSequence" />, exclusive.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken.SourceString">
            <summary>
                The backing <see cref="T:System.String" /> on top of which the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.SourceSequence" />
                is built.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken.Start">
            <summary>
                The start index of the string corresponding to the value
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.StartInSequence" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken.End">
            <summary>
                The end index of the string corresponding to the value <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.IToken`2.EndInSequence" />
                .
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken.Length">
            <summary>
                The length of this token (End - Start).
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken.Value">
            <summary>
                The value of this token represented as a <see cref="T:System.String" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="other">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.StringToken.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Tokenizer`3">
            <summary>
                A convenience abstract base class to build tokenizers upon. Provides a default implementation of
                <see cref="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Tokenizer`3.Tokenize(System.Collections.Generic.IEnumerable{`2})" />.
            </summary>
            <typeparam name="TToken">The type of tokens.</typeparam>
            <typeparam name="TSequenceable">The type of the sequenceable that the tokenizer accepts.</typeparam>
            <typeparam name="TSequence">The type of the sequence that the tokenizer accepts.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Tokenizer`3.Tokenize(`2)">
            <summary>
                Tokenizes a sequence.
            </summary>
            <param name="sequence">The sequence of things to tokenize.</param>
            <returns>A tokenization of <paramref name="sequence" /></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Tokenizer`3.Tokenize(System.Collections.Generic.IEnumerable{`2})">
            <summary>
                Tokenizes a sequence of sequences.
            </summary>
            <param name="sequences">The sequence of sequences to tokenize.</param>
            <returns>One sequence of tokens per sequence in <paramref name="sequences" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Tokenizer`3.TokenAtStartOrDefault(`2)">
            <summary>
                Retrieves a token if and only if the <paramref name="sequence" /> begins with a token that this tokenizer
                recognizes.
            </summary>
            <param name="sequence">The sequence in which to look for the token.</param>
            <returns>
                The first occurrence of a token if <paramref name="sequence" /> begins with the token, otherwise
                <c>default(TToken)</c>.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Translation.Python.TranslationMapping">
            <summary>
                A helper class that generates the required code for <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" />s.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Translation.Python.TranslationMapping.GetSourceCodeForType(System.Type)">
            <summary>
                Gets all the Python source code units corresponding to a given type.
            </summary>
            <param name="type">The type to translate.</param>
            <returns>
                A list of <see cref="T:System.Collections.Generic.KeyValuePair`2" />s with TKey = <see cref="T:System.String" /> and TValue =
                <see cref="T:System.String" />. The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> of each pair represents the name of the
                code unit and the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> reprensents the actual code.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo">
            <summary>
                Auxiliary information which may be useful for ranking.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.#ctor(System.String,System.String,Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken,System.Double,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
                Constructor.
            </summary>
            <param name="key">The key associated with this completion.</param>
            <param name="value">The actual value to be used as a completion/suggestion.</param>
            <param name="token">The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that corresponds to this autocomplete suggestion.</param>
            <param name="relativeScore">The relative score for this suggestion. See <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.RelativeScore" />.</param>
            <param name="metadata">A property map containing any metadata associated with this suggestion.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.#ctor(System.String,Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken,System.Double,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
                Constructor.
            </summary>
            <param name="key">
                The key associated with this completion. This key is also used a <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.Value" /> for this
                completion.
            </param>
            <param name="token">The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> that generated this completion.</param>
            <param name="relativeScore">The relative score for this suggestion. <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.RelativeScore" />.</param>
            <param name="metadata">A property map containing any metadata associated with this suggestion.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.Token">
            <summary>
                The token that the entry corresponds to
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.RelativeScore">
            <summary>
                A score value that is relative to all the other completions suggested by <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.Token" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.Value">
            <summary>
                The actual completion value, in the event that we need to map a value to a key that isn't
                a prefix of the value.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.Key">
            <summary>
                The key that triggers this completion.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.Metadata">
            <summary>
                Metadata about this completion.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.EntityScoreMultiplier">
            <summary>
                The score multiplier for the entity. See <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.CloneWithValue(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
                Clones this <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo" /> object with all fields identical,
                except for the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.Value" /> field, which takes its value from the
                parameter <paramref name="value" />.
            </summary>
            <param name="value">The updated <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.Value" /> field.</param>
            <param name="metadata">
                A property map containing any metadata associated with this suggestion. If null then
                <c>this.Metadata</c> will be used instead.
            </param>
            <returns>
                A new <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo" /> object with the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.CompletionInfo.Value" /> field set to
                <paramref name="value" />.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence">
            <summary>
                A subsequence of a string.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.Empty">
            <summary>
                The empty subsequence.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.Equals(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.FullSequence">
            <summary>
                A reference to the entire sequence.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.FullLength">
            <summary>
                The length of the full sequence that this sequence derives from.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.Item(System.Int32)">
            <summary>
                Returns the <see cref="T:System.Char" /> object at <paramref name="position" /> in
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Value" />.
            </summary>
            <param name="position">The relative index into this sequence, at which the object to be retrieved resides.</param>
            <returns>
                The <see cref="T:System.Char" /> at <paramref name="position" /> in
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Value" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.AbsoluteSlice(System.UInt32,System.UInt32)">
            <summary>
                Returns an absolute slice of this subsequence
            </summary>
            <param name="start">
                The start index of the absolute slice, i.e., relative to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.FullSequence" />.
            </param>
            <param name="end">
                The end index (exclusive) of the absolute slice, i.e., relateive to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.FullSequence" />.
            </param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" /> that represents the absolute slice.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.StartsWith(System.String)">
            <summary>
                Checks if this sequence starts with the provided prefix
            </summary>
            <param name="prefix">The prefix to check.</param>
            <returns>true if this subsequence begins with <see cref="!:prefix" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.StartsWith(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence)">
            <summary>
                Checks if this sequence starts with the provided prefix
            </summary>
            <param name="prefix">The prefix to check.</param>
            <returns>true if this subsequence begins with <see cref="!:prefix" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.FindFirstMismatchingIndex(System.String)">
            <summary>
                Finds the first position in this sequence, at which the value does not agree with the value in the same position in
                <paramref name="prefix" />.
            </summary>
            <param name="prefix">The prefix to check.</param>
            <returns>
                The index of the first position in <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Value" /> such
                that the value at the same position in
                <paramref name="prefix" /> does not equal the value at the position in
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Value" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.FindFirstMismatchingIndex(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence)">
            <summary>
                Finds the first position in this sequence, at which the value does not agree with the value in the same position in
                <paramref name="prefix" />.
            </summary>
            <param name="prefix">The prefix to check.</param>
            <returns>
                The index of the first position in <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Value" /> such
                that the value at the same position in
                <paramref name="prefix" /> does not equal the value at the position in
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.AutoCompletion.SearchTree.ISubSequence`3.Value" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.Concat(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence)">
            <summary>
                Create a new subsequence which is the concatenation of this subsequence with <paramref name="other" />.
            </summary>
            <param name="other">The subsequence to concatenate at the end of this.</param>
            <returns>A new subsequence which represents this subsequence concentenated with <paramref name="other" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.Concat(System.String)">
            <summary>
                Create a new subsequence which is the concatenation of this subsequence with <paramref name="other" />.
            </summary>
            <param name="other">The sequence to concatenate at the end of this.</param>
            <returns>A new subsequence which represents this subsequence concentenated with <paramref name="other" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.Create(System.String)">
            <summary>
                Create a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" /> with represents the entire <see cref="T:System.String" /> s.
            </summary>
            <param name="s">The string.</param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" /> that represents the entire <see cref="T:System.String" /> <paramref name="s" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.Create(System.String,System.UInt32)">
            <summary>
                Create a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" /> with represents a suffix of <see cref="T:System.String" /> s.
            </summary>
            <param name="s">The string.</param>
            <param name="start">The starting index of the suffix.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" /> that represents the suffix of <see cref="T:System.String" /> <paramref name="s" />,
                starting at <paramref name="start" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.Create(System.String,System.UInt32,System.UInt32)">
            <summary>
                Create a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" /> which represents a substring of a string.
            </summary>
            <param name="s">The string.</param>
            <param name="start">The starting index in <paramref name="s" /> of the substring.</param>
            <param name="end">The ending index (exclusive) in <paramref name="s" /> of the substring.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence" /> that represents the substring of <paramref name="s" />, beginning at
                <paramref name="start" /> and ending at <paramref name="end" /> (exclusive).
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="other">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.StringSubSequence.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Text.RegularExpressions.RegexOptions[])">
            <summary>
                Constructor.
            </summary>
            <param name="contentPattern">The regular expression pattern that matches the content.</param>
            <param name="leftContextPattern">The regular expression pattern that must match to the left of the content.</param>
            <param name="rightContextPattern">The regular expression pattern that must match to the right of the content.</param>
            <param name="captureLeftContext">
                A flag that indicates that the left context needs to be captured, applicable only if
                <paramref name="leftContextPattern" /> is not null and not the empty string.
            </param>
            <param name="captureRightContext">
                A flag that indicates that the right context needs to be captured, applicable only if
                <paramref name="rightContextPattern" /> is not null and not the empty string.
            </param>
            <param name="regexOptions">
                Any additional <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.RegexOptions" /> to use when constructing the <see cref="T:System.Text.RegularExpressions.Regex" />
                .
            </param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.LeftContextGroupName">
            <summary>
                The name of the group used to capture the left context, if context captures are enabled.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.RightContextGroupName">
            <summary>
                The name of the group used to capture the right context, if context captures are enabled.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.ContentGroupName">
            <summary>
                The name of the group used to capture the actual content.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.LeftContextPattern">
            <summary>
                The pattern to match on the left of the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.ContentPattern" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.ContentPattern">
            <summary>
                The pattern used to match the actual content.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.RightContextPattern">
            <summary>
                The pattern to match on the right of the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.ContentPattern" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.CaptureLeftContext">
            <summary>
                Should the match for <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.LeftContextPattern" /> be captured?
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.CaptureRightContext">
            <summary>
                Should the match for <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.RightContextPattern" /> be captured?
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.RegexToMatch">
            <summary>
                The final <see cref="T:System.Text.RegularExpressions.Regex" /> object constructed according to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.LeftContextPattern" />,
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.RightContextPattern" />, <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.ContentPattern" /> as well as the flags
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.CaptureLeftContext" /> and <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.CaptureRightContext" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.Equals(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="other">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.Clone">
            <summary>
                Clones this <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern" /> object. All <see cref="T:System.Text.RegularExpressions.Regex" /> objects used internally are cloned.
            </summary>
            <returns>A new <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern" /> object that is equivalent to <c>this</c>.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.Matches(System.String)">
            <summary>
                Compute all matches for this <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern" /> in the string <paramref name="s" />.
            </summary>
            <param name="s">The string to match this <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern" /> on.</param>
            <returns>
                A sequence of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch" /> objects, one for each non-overlapping match in
                <paramref name="s" />. Note that the right context of one match can be used as the left context
                of the next match. Only the content matches are guaranteed to be non-overlapping.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch">
            <summary>
                Represents a match of a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.LeftContextGroup">
            <summary>
                The <see cref="T:System.Text.RegularExpressions.Group" /> representing the match for the left context of the <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern" />.
                <c>null</c> if no left context pattern was specified, or the left context was not requested to be captured.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.RightContextGroup">
            <summary>
                The <see cref="T:System.Text.RegularExpressions.Group" /> representing the match for the right context of the <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern" />.
                <c>null</c> if no right context pattern was specified, or the right context was not requested to be captured.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.ContentGroup">
            <summary>
                The <see cref="T:System.Text.RegularExpressions.Group" /> representing the match for the content pattern of the <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.FullMatch">
            <summary>
                A complete match of <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern.RegexToMatch" /> on <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.Source" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.Source">
            <summary>
                The source string that was matched with a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern" /> to obtain <c>this</c>
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.Pattern">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPattern" /> that produced this <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch" /> when applied to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.Source" />
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.Start">
            <summary>
                The start index of the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.ContentGroup" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.End">
            <summary>
                The end index (exclusive) of the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.ContentGroup" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.Length">
            <summary>
                The length of the string matched by <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.ContentGroup" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.Value">
            <summary>
                The actual value of the string matched by <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.TokenPatternMatch.ContentGroup" />.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.UnicodeCategoryUtils">
            <summary>
                Helper class to ease transition to coreclr
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.UnicodeCategoryUtils.GetUnicodeCategory(System.Char)">
            <summary>
                Retrieves the unicode catergory for a character.
            </summary>
            <param name="c">The character.</param>
            <returns>The unicode category for <paramref name="c" />.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.ValueAndCount`1">
            <summary>
                Represents a value and a count associated with the value
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.ValueAndCount`1.Value">
            <summary>
                Retrieves the value.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.ValueAndCount`1.Count">
            <summary>
                Retrieves the count associated with <see cref="P:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.ValueAndCount`1.Value" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.ValueAndCount`1.#ctor(`0,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="value">The value to be stored.</param>
            <param name="count">The count associated with <paramref name="value" />.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.ValueAndCount`1.Equals(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.ValueAndCount{`0})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.ValueAndCount`1.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <returns>
                true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise,
                false.
            </returns>
            <param name="obj">The object to compare with the current instance. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.ValueAndCount`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.ValueAndCount`1.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.VariableLengthBitArrayUtils">
            <summary>
                Helper functions for manipulation of bit-vectors which can possibly have varying lengths.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.VariableLengthBitArrayUtils.Canonicalize(System.Collections.BitArray,System.Collections.BitArray,System.Collections.BitArray@,System.Collections.BitArray@,System.Boolean)">
            <summary>
                Adjust lengths so that the two bitvectors have the same "universe"
            </summary>
            <param name="b0">The first bitvector to canonicalize.</param>
            <param name="b1">The second bitvector to canonicalize.</param>
            <param name="canonicalB0">The canonicalized bitvectors corresponding to <paramref name="b0" />.</param>
            <param name="canonicalB1">The canonicalized bitvectors corresponding to <paramref name="b1" />.</param>
            <param name="value">The boolean value to pad into the bitvector that has been extended to match the other one.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.VariableLengthBitArrayUtils.Canonicalize(System.Collections.BitArray,System.Collections.BitArray,System.Boolean)">
            <summary>
                Adjust lengths so that the two bitvectors have the same "universe". The canonicalization is done "in-place", i.e.,
                the two input bitvectors are modified.
            </summary>
            <param name="b0">The first bitvector to canonicalize.</param>
            <param name="b1">The second bitvector to canonicalize.</param>
            <param name="value">The boolean value to pad into the bitvector that has been extended to match the other one.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.VariableLengthBitArrayUtils.FunctionalOr(System.Collections.BitArray,System.Collections.BitArray,System.Boolean)">
            <summary>
                Returns a new <see cref="T:System.Collections.BitArray" /> that represents the "Or" of the two input <see cref="T:System.Collections.BitArray" />s.
            </summary>
            <param name="b0">The first <see cref="T:System.Collections.BitArray" />.</param>
            <param name="b1">The second <see cref="T:System.Collections.BitArray" />.</param>
            <param name="value">
                The value to insert into the shorter <see cref="T:System.Collections.BitArray" />, to make its length equal to the other
                <see cref="T:System.Collections.BitArray" />.
            </param>
            <returns>
                A new <see cref="T:System.Collections.BitArray" /> that represents the "Or" of the canonicalized versions of <paramref name="b0" />
                and <paramref name="b1" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.VariableLengthBitArrayUtils.FunctionalAnd(System.Collections.BitArray,System.Collections.BitArray,System.Boolean)">
            <summary>
                Returns a new <see cref="T:System.Collections.BitArray" /> that represents the "And" of the two input <see cref="T:System.Collections.BitArray" />s.
            </summary>
            <param name="b0">The first <see cref="T:System.Collections.BitArray" />.</param>
            <param name="b1">The second <see cref="T:System.Collections.BitArray" />.</param>
            <param name="value">
                The value to insert into the shorter <see cref="T:System.Collections.BitArray" />, to make its length equal to the other
                <see cref="T:System.Collections.BitArray" />.
            </param>
            <returns>
                A new <see cref="T:System.Collections.BitArray" /> that represents the "And" of the canonicalized versions of
                <paramref name="b0" /> and <paramref name="b1" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.VariableLengthBitArrayUtils.FunctionalNot(System.Collections.BitArray)">
            <summary>
                Returns a new <see cref="T:System.Collections.BitArray" /> that represents the bitwise negation of the input <see cref="T:System.Collections.BitArray" />.
            </summary>
            <param name="b0">The <see cref="T:System.Collections.BitArray" />.</param>
            <returns>A new <see cref="T:System.Collections.BitArray" /> that represents the negation of <paramref name="b0" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.VariableLengthBitArrayUtils.FunctionalXor(System.Collections.BitArray,System.Collections.BitArray,System.Boolean)">
            <summary>
                Returns a new <see cref="T:System.Collections.BitArray" /> that represents the "Xor" of the two input <see cref="T:System.Collections.BitArray" />s.
            </summary>
            <param name="b0">The first <see cref="T:System.Collections.BitArray" />.</param>
            <param name="b1">The second <see cref="T:System.Collections.BitArray" />.</param>
            <param name="value">
                The value to insert into the shorter <see cref="T:System.Collections.BitArray" />, to make its length equal to the other
                <see cref="T:System.Collections.BitArray" />.
            </param>
            <returns>
                A new <see cref="T:System.Collections.BitArray" /> that represents the "Xor" of the canonicalized versions of <paramref name="b0" />
                and <paramref name="b1" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.VariableLengthBitArrayUtils.InPlaceOr(System.Collections.BitArray,System.Collections.BitArray,System.Boolean)">
            <summary>
                Modifies the source <see cref="T:System.Collections.BitArray" /> in place to represent the value obtained by "or"-ing with the other
                <see cref="T:System.Collections.BitArray" />.
            </summary>
            <param name="b0">The source <see cref="T:System.Collections.BitArray" />.</param>
            <param name="b1">The <see cref="T:System.Collections.BitArray" /> to "or" with <see cref="!:b0" />.</param>
            <param name="value">
                The value to insert into the shorter <see cref="T:System.Collections.BitArray" />, to make its length equal to the other
                <see cref="T:System.Collections.BitArray" />.
            </param>
            <returns>
                <paramref name="b0" />, "or"-ed in place with <paramref name="b1" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.VariableLengthBitArrayUtils.InPlaceAnd(System.Collections.BitArray,System.Collections.BitArray,System.Boolean)">
            <summary>
                Modifies the source <see cref="T:System.Collections.BitArray" /> in place to represent the value obtained by "and"-ing with the other
                <see cref="T:System.Collections.BitArray" />.
            </summary>
            <param name="b0">The source <see cref="T:System.Collections.BitArray" />.</param>
            <param name="b1">The <see cref="T:System.Collections.BitArray" /> to "or" with <see cref="!:b0" />.</param>
            <param name="value">
                The value to insert into the shorter <see cref="T:System.Collections.BitArray" />, to make its length equal to the other
                <see cref="T:System.Collections.BitArray" />.
            </param>
            <returns>
                <paramref name="b0" />, "and"-ed in place with <paramref name="b1" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.VariableLengthBitArrayUtils.InPlaceXor(System.Collections.BitArray,System.Collections.BitArray,System.Boolean)">
            <summary>
                Modifies the source <see cref="T:System.Collections.BitArray" /> in place to represent the value obtained by "xor"-ing with the other
                <see cref="T:System.Collections.BitArray" />.
            </summary>
            <param name="b0">The source <see cref="T:System.Collections.BitArray" />.</param>
            <param name="b1">The <see cref="T:System.Collections.BitArray" /> to "or" with <see cref="!:b0" />.</param>
            <param name="value">
                The value to insert into the shorter <see cref="T:System.Collections.BitArray" />, to make its length equal to the other
                <see cref="T:System.Collections.BitArray" />.
            </param>
            <returns>
                <paramref name="b0" />, "xor"-ed in place with <paramref name="b1" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Utils.VariableLengthBitArrayUtils.ExtendAndUpdate(System.Collections.BitArray,System.Int32,System.Boolean)">
            <summary>
                Extends a <see cref="T:System.Collections.BitArray" /> if necessary and then updates the value at a given index.
            </summary>
            <param name="b0">The <see cref="T:System.Collections.BitArray" />.</param>
            <param name="position">The position at which the value is to be updated in <paramref name="b0" />.</param>
            <param name="value">The value.</param>
            <returns>
                <paramref name="b0" /> extended if necessary, with the value in b0 at <paramref name="position" /> set to
                <paramref name="value" />.
            </returns>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.ExtractionLoader`3.VersionParsers">
            <summary>
                Pairs of (version, parser) in descending order.
                If the current assembly version greater than or equal to the (version) key, use the (parser) value.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.ExtractionLoader`3.DefaultVersionParser">
            <summary>
                Version parser to use when version information is missing.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.ExtractionLoader`3.Microsoft#ProgramSynthesis#Wrangling#IProgramLoader{TSequenceProgram,System#Collections#Generic#IEnumerable{TRegion},System#Collections#Generic#IEnumerable{System#Collections#Generic#IEnumerable{TRegion}}}#Create(Microsoft.ProgramSynthesis.AST.ProgramNode)">
            <summary>
                Wraps a <see cref="T:Microsoft.ProgramSynthesis.AST.ProgramNode" /> in a <typeparamref name="TSequenceProgram" />. <paramref name="program" /> must be a
                valid program for a <typeparamref name="TSequenceProgram" />.
            </summary>
            <param name="program">The code of the program.</param>
            <returns>A strongly-typed <typeparamref name="TSequenceProgram" /> object wrapping <paramref name="program" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.ExtractionLoader`3.Microsoft#ProgramSynthesis#Wrangling#IProgramLoader{TRegionProgram,System#Collections#Generic#IEnumerable{TRegion},System#Collections#Generic#IEnumerable{TRegion}}#Create(Microsoft.ProgramSynthesis.AST.ProgramNode)">
            <summary>
                Wraps a <see cref="T:Microsoft.ProgramSynthesis.AST.ProgramNode" /> in a <typeparamref name="TRegionProgram" />. <paramref name="program" /> must be a
                valid program for a <typeparamref name="TRegionProgram" />.
            </summary>
            <param name="program">The code of the program.</param>
            <returns>A strongly-typed <typeparamref name="TRegionProgram" /> object wrapping <paramref name="program" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.ExtractionLoader`3.CreateProgram(Microsoft.ProgramSynthesis.AST.ProgramNode,Microsoft.ProgramSynthesis.Wrangling.ExtractionKind,Microsoft.ProgramSynthesis.Wrangling.ReferenceKind,System.Nullable{System.Double})">
            <summary>
                Wraps a <see cref="T:Microsoft.ProgramSynthesis.AST.ProgramNode" /> in an <see cref="T:Microsoft.ProgramSynthesis.Wrangling.IExtractionProgram`1" />,
                so it can be more easily used for extraction tasks.
            </summary>
            <param name="programNode">The program AST as a Microsoft.ProgramSynthesis <see cref="T:Microsoft.ProgramSynthesis.AST.ProgramNode" />.</param>
            <param name="extractionKind">The kind of program.</param>
            <param name="refKind">The kind of reference the program expects as input.</param>
            <param name="score">The computed score of the program.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Wrangling.IExtractionProgram`1" /> wrapping a lower-level <see cref="T:Microsoft.ProgramSynthesis.AST.ProgramNode" /> of the AST of
                an extraction program.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.ExtractionLoader`3.Load(System.String,Microsoft.ProgramSynthesis.AST.ASTSerializationFormat)">
            <summary>
                Deserializes the program from the serialized program string and the serialization format.
            </summary>
            <param name="serializedProgram">The serialized program string.</param>
            <param name="grammar">The grammar for the extraction program.</param>
            <param name="createProgram">The constructor for a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.IExtractionProgram`1" /> object.</param>
            <param name="serializationFormat">The format used to serialize the program.</param>
            <returns>The extraction program stored in <paramref name="serializedProgram" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.ExtractionLoader`3.Convert(System.String,System.Version,System.Version)">
            <summary>
                Convert a serialized program from the format of an older version <paramref name="from" />
                to the format of the newer version <paramref name="to" />.
            </summary>
            <param name="serializedProgram">The serialized program.</param>
            <param name="from">The old version.</param>
            <param name="to">The new version.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.InputsRequiredException">
            <summary>
                Indicates that a program could not be learned as the constraints indicate that inputs should be used to learn but
                no inputs were provided.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.InputsRequiredException.#ctor">
            <summary>
                Constructs an <see cref="T:Microsoft.ProgramSynthesis.Wrangling.InputsRequiredException" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.InputsRequiredException.#ctor(System.String)">
            <summary>
                Constructs an <see cref="T:Microsoft.ProgramSynthesis.Wrangling.InputsRequiredException" /> with the specified <paramref name="message" />.
            </summary>
            <param name="message">Message for this exception.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.InputsRequiredException.#ctor(System.String,System.String)">
            <summary>
                Constructs an <see cref="T:Microsoft.ProgramSynthesis.Wrangling.InputsRequiredException" /> with the specified <paramref name="message" />.
            </summary>
            <param name="message">Message for this exception.</param>
            <param name="paramName">The name of the parameter that caused this exception.</param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.IProgramProperties">
            <summary>
                The interface for describing the metadata of an <see cref="T:Microsoft.ProgramSynthesis.Program`2" /> object.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.ITypedValue">
            <summary>
                A value that can be interpreted as a strongly typed value. The storage of the value is as a string
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.ITypedValue.Value" />, which is interpreted by the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.ITypedValue.Type" /> as some other types.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.ITypedValue.Value">
            <summary>
                The untyped value of this object.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.ITypedValue.Type">
            <summary>
                The type of the object. Used to convert to a strongly typed value.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.ITypedValue.GetTypedValue``1">
            <summary>
                If possible, get this value as type <typeparamref name="T" />. This uses <see cref="P:Microsoft.ProgramSynthesis.Wrangling.ITypedValue.Type" /> and
                <see cref="M:Microsoft.ProgramSynthesis.Wrangling.IType`1.GetTypedValue(Microsoft.ProgramSynthesis.Wrangling.ITypedValue)" /> to do the conversion. This method exists to allow implementers of this
                interface to memoize the result.
            </summary>
            <typeparam name="T">Type to attempt to convert to.</typeparam>
            <returns>
                This value converted to <typeparamref name="T" /> according to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.ITypedValue.Type" /> or
                <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" />.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.IType">
            <summary>
                Supertype for the Microsoft.ProgramSynthesis type hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.IType.IsValidObject(Microsoft.ProgramSynthesis.Wrangling.ITypedValue)">
            <summary>
                Checks if an object is valid element of the given type.
            </summary>
            <param name="obj">Object to check.</param>
            <returns>True if object can be treated as a value of this type or false otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.IType.IsAssignableFrom(Microsoft.ProgramSynthesis.Wrangling.IType)">
            <summary>
                Checks if this type is a superset of another type. That is, if true, then whenever <paramref name="other" />
                returns true for <see cref="M:Microsoft.ProgramSynthesis.Wrangling.IType.IsValidObject(Microsoft.ProgramSynthesis.Wrangling.ITypedValue)" /> so does this.
            </summary>
            <param name="other">Type to check if it can be used whenever this is expected.</param>
            <returns>True if <paramref name="other" /> is a subtype of this type.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.IType`1">
            <summary>
                A type whose values can be converted to the .NET type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">.NET type this type can convert values to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.IType`1.GetTypedValue(Microsoft.ProgramSynthesis.Wrangling.ITypedValue)">
            <summary>
                If possible, get <paramref name="obj" /> as type <typeparamref name="T" /> according to this type.
            </summary>
            <param name="obj"><see cref="T:Microsoft.ProgramSynthesis.Wrangling.ITypedValue" /> to convert to <typeparamref name="T" />.</param>
            <returns>
                <paramref name="obj" /> converted to <typeparamref name="T" /> according to this or
                <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" />.
            </returns>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.ITypedProgram`2.OutputTypes">
            <summary>
                The possible types of outputs of this program.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.ExtractionProgram`2">
            <summary>
                A program for performing a single extraction task. An extraction program takes a reference region as input and
                outputs zero or more extracted regions depending on its <see cref="T:Microsoft.ProgramSynthesis.Wrangling.ExtractionKind"/>.
            </summary>
            <typeparam name="TExtractionProgram">The type of extraction program. Should be the type of the implementing subclass.</typeparam>
            <typeparam name="TRegion">The type of extracted region.</typeparam>
            <see cref="!:SchemaProgram&lt;TExtractionProgram,TSelector,TRegion&gt;" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.ExtractionProgram`2.Run(`1)">
            <summary>
            <para>
            Executes the program on a referencing region.
            If the program is a region program, the result is the first element in the output list.
            </para>
            <para>
            The output list may contain null. 
            The reason is the training examples are not representative enough (i.e., <paramref name="reference"/>
            contains new, unseen structures).
            </para>
            </summary>
            <param name="reference">The referencing region to run the program on.</param>
            <returns>An output sequence of regions</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.ExtractionProgram`2.Run(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Executes the program on a sequence of referencing regions and obtains a sequence of output regions and their referencing regions.
            The output list may contain null outputs. 
            The reason is the training examples are not representative enough (i.e., <paramref name="references"/>
            contains new, unseen structures).
            </summary>
            <param name="references">The sequence of referencing regions to run the program on.</param>
            <returns>An sequence of output regions and their referencing regions.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.ExtractionProgram`2.OutputRun(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Executes the program on a sequence of referencing regions and obtains a sequence of output regions.
            This method is similar to <see cref="M:Microsoft.ProgramSynthesis.Wrangling.ExtractionProgram`2.Run(System.Collections.Generic.IEnumerable{`1})"/> except that it does not keep the referencing regions with the output regions.
            The output list may contain nulls. 
            The reason is the training examples are not representative enough (i.e., <paramref name="references"/>
            contains new, unseen structures).
            </summary>
            <param name="references">The sequence of referencing regions to run the program on.</param>
            <returns>An sequence of output regions.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.DocumentSpecInterface">
            <summary>
            Represents the specification for the whole document.
            Used for schema learning.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.DocumentSpecInterface.PositiveContainsKey(System.String)">
            <summary>
            Check if the positive examples contains such field.
            </summary>
            <param name="name">The field name.</param>
            <returns>True if the field has positive examples, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.DocumentSpec`1">
            <summary>
            Represents the specification for the whole document.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.DocumentSpec`1.Document">
            <summary>
            The region of the entire document.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.DocumentSpec`1.PositiveExamples">
            <summary>
            The positive examples.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.DocumentSpec`1.NegativeExamples">
            <summary>
            The negative examples.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.DocumentSpec`1.#ctor(`0,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{`0}},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Construct the specification from its element.
            </summary>
            <param name="input"></param>
            <param name="examples"></param>
            <param name="negatives"></param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.DocumentSpec`1.PositiveContainsKey(System.String)">
            <summary>
            Check if the positive examples contains such field.
            </summary>
            <param name="name">The field name.</param>
            <returns>True if the field has positive examples, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.ExtractionKind">
            <summary>
                The kind of an extraction task.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.ExtractionKind.Region">
            <summary>
                Extraction of at most one element from each reference region.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.ExtractionKind.Sequence">
            <summary>
                Extraction of multiple elements from each reference region.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.ReferenceKind">
            <summary>
                How the reference region relates to the region to be extracted in the structure of the document.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.ReferenceKind.Invalid">
            <summary>
                Dummy value that should not be used to ensure <c>default(ReferenceKind)</c> is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.ReferenceKind.Parent">
            <summary>
                The reference region is a parent of the region to be extracted.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.ReferenceKind.PrecedingSibling">
            <summary>
                The reference region is a sibling of the region to be extracted and appears earlier in the document.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.ReferenceKind.SucceedingSibling">
            <summary>
                The reference region is a sibling of the region to be extracted and appears later in the document.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.IExtractionProgram`1.ExtractionKind">
            <summary>
                Represents the extraction kind of this program.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.IExtractionProgram`1.ReferenceKind">
            <summary>
                Specifies how this program relates to its referenced field.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.InputOutputs`1">
            <summary>
            A wrapper around regions to record relation between regions (e.g. used in dependent negative examples).
            One region is the input, and other dependent regions are stored in Outputs.
            </summary>
            <typeparam name="TRegion">The type of region it wraps</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.InputOutputs`1.Input">
            <summary>
            The input.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.InputOutputs`1.InputName">
            <summary>
            The name of the input.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.InputOutputs`1.Outputs">
            <summary>
            The list of outputs.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.InputOutputs`1.#ctor(`0,System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs the object from its properties.
            </summary>
            <param name="input">The input.</param>
            <param name="inputName">The name of the input.</param>
            <param name="outputs">The list of outputs.</param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Logging.LoggingEvent">
            <summary>
                Used to specify event names with the TrackEvent method.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Logging.LoggingMetric">
            <summary>
                Used to specify metric names with the TrackEvent method.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Logging.LoggingProperty">
            <summary>
                Used to specify property names with the TrackEvent method.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Logging.LoggingValue">
            <summary>
                Used to specify property values for the TrackEvent method.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Logging.NullLogger">
            <summary>
                Default implementation of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger"/>  which turns every logging operation into a no-op.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Logging.NullLogger.Error(System.String,System.String,System.String)">
            <summary>
                No-op.
            </summary>
            <param name="area">Ignored.</param>
            <param name="message">Ignored.</param>
            <param name="userData">Ignored.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Logging.NullLogger.Warn(System.String,System.String,System.String)">
            <summary>
                No-op.
            </summary>
            <param name="area">Ignored.</param>
            <param name="message">Ignored.</param>
            <param name="userData">Ignored.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Logging.NullLogger.Info(System.String,System.String,System.String)">
            <summary>
                No-op.
            </summary>
            <param name="area">Ignored.</param>
            <param name="message">Ignored.</param>
            <param name="userData">Ignored.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Logging.NullLogger.Debug(System.String,System.String,System.String)">
            <summary>
                No-op.
            </summary>
            <param name="area">Ignored.</param>
            <param name="message">Ignored.</param>
            <param name="userData">Ignored.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Logging.NullLogger.TrackException(System.Exception)">
            <summary>
                No-op.
            </summary>
            <param name="exception">Ignored.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Logging.NullLogger.TrackEvent(System.String,System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,System.Double}},System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
                No-op.
            </summary>
            <param name="eventName">Ignored.</param>
            <param name="metrics">Ignored.</param>
            <param name="properties">Ignored.</param>
            <param name="userDataProperties">Ignored.</param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger">
            <summary>
                Interface used by program synthesis DSLs to provide telemetry information.  Clients may implement this
                interface and call <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.SetLogger(Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger)" /> for a DSL to
                receive telemetry data.
            
                Implementations of this interface should consider augmenting messages with correlation information and/or 
                filtering messages which contain user data in order to enforce customer preferences or privacy policies.
            
                NOTE: User data must be handled with utmost caution.  So these APIs carefully separate user data from
                data which does not contain any PII or other user data.  The PROSE team encourages implementers of this
                interface to preserve consumer data whenever possible (while maintaining privacy expectations of customers)
                since it can be very helpful to the long-term improvement of these APIs.  If necessary, user data may be
                ignored altogether.  It may be stored only if the customer agrees.  Or if customer agreements allow, it
                may be stored in a more secure/restricted access location to allow programmatic aggregation / analysis
                in a PII compliant manner.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger.Error(System.String,System.String,System.String)">
            <summary>
                Log an error message.
            </summary>
            <param name="area">The code source of the message.</param>
            <param name="message">Details about the error guaranteed not to include any user data.</param>
            <param name="userData">If there is user data associated with the message, it will be included here.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger.Warn(System.String,System.String,System.String)">
            <summary>
                Log a warning.
            </summary>
            <param name="area">The code source of the message.</param>
            <param name="message">Details about the error.</param>
            <param name="userData">If there is user data associated with the message, it will be included here.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger.Info(System.String,System.String,System.String)">
            <summary>
                Log a message about standard operation.  (High-level tracing.)
            </summary>
            <param name="area">The code source of the message.</param>
            <param name="message">Details about the error.</param>
            <param name="userData">If there is user data associated with the message, it will be included here.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger.Debug(System.String,System.String,System.String)">
            <summary>
                Log debug info.  (Verbose tracing.)
            </summary>
            <param name="area">The code source of the message.</param>
            <param name="message">Details about the error.</param>
            <param name="userData">If there is user data associated with the message, it will be included here.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger.TrackException(System.Exception)">
            <summary>
                Log an unexpected exception.  The exception object should NEVER contain user data.
            </summary>
            <param name="exception">The exception object (including stack trace, etc.)</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger.TrackEvent(System.String,System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,System.Double}},System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
                Log an event -- often with metrics.
            
                NOTE: PROSE DSLs should use values from LoggingConstants.cs to ensure that the event, metric and
                property names stay consistent over time.  New constants may be added as needed.
            </summary>
            <param name="eventName">
                The name of the event.  This should be kept constant over time so that reporting can aggregate based
                on the name.  <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Logging.LoggingEvent"/> 
            </param>
            <param name="metrics">
                A collection of named metric values.  This might include things like the time to complete an operation
                in ms.  Metric names should be kept constant over time.  <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Logging.LoggingMetric"/> 
            </param>
            <param name="properties">
                A collection of properties associated with the event.  This should NOT include any user data (no
                examples, no serialized programs), but it might include interesting characteristics of a program or
                the like.  Property names should be kept constant over time.  <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Logging.LoggingProperty"/> 
            </param>
            <param name="userDataProperties">
                A collection of properties associated with the event that contain user data (examples, etc.).  Property
                names should be kept constant over time.  <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Logging.LoggingProperty"/> 
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.NamespaceDoc">
            <summary>
                Contains classes common to extraction tasks from any kind of input.
                Currently used by Extraction.Text and Extraction.Web, but generalizable
                to other scenerios. Extraction DSLs are parameterized by a subclass of
                <see cref="T:Microsoft.ProgramSynthesis.Utils.IRegion`1"/> which describes parts of the input that can be
                extracted.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.ProgramLearner`3">
            <summary>
                The main class where all learning happens.
            </summary>
            <typeparam name="TProgram">The type of program.</typeparam>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.ProgramLearner`3.Learn(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`1,`2}},System.Collections.Generic.IEnumerable{`1},System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Learns top-ranked program from the given positive and negative examples.
                In the case of a tie, only one result will be returned.
                Returns <c>null</c> if no program can be learned.
                Use <see cref="M:Microsoft.ProgramSynthesis.Wrangling.ProgramLearner`3.LearnTopK(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`1,`2}},System.Int32,System.Collections.Generic.IEnumerable{`1},System.Nullable{System.Threading.CancellationToken})" />
                with k=1 to get all of the programs tied for best.
            </summary>
            <param name="constraints">The examples.</param>
            <param name="additionalInputs">
                The set of additional references that do not have output examples, which helps learn
                programs.
            </param>
            <param name="cancel">
                The token to monitor for cancellation requests. The default value is
                <see cref="P:System.Threading.CancellationToken.None" />.
            </param>
            <returns>The top-ranked program.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.ProgramLearner`3.LearnTopK(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`1,`2}},System.Int32,System.Collections.Generic.IEnumerable{`1},System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Learns <paramref name="k" /> top-ranked programs from the given positive and negative examples.
                Returns all tied results in case of a tie.
            </summary>
            <param name="constraints">The examples.</param>
            <param name="k">The number of programs returned.</param>
            <param name="additionalInputs">
                The set of additional references that do not have output examples, which helps learn and
                rank programs.
            </param>
            <param name="cancel">
                The token to monitor for cancellation requests. The default value is
                <see cref="P:System.Threading.CancellationToken.None" />.
            </param>
            <returns>The top-ranked programs.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.ProgramLearner`3.LearnAll(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`1,`2}},System.Collections.Generic.IEnumerable{`1},System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Learns all programs from the given positive and negative examples.
            </summary>
            <param name="constraints">The examples.</param>
            <param name="additionalInputs">
                The set of additional references that do not have output examples, which helps learn
                programs.
            </param>
            <param name="cancel">
                The token to monitor for cancellation requests. The default value is
                <see cref="P:System.Threading.CancellationToken.None" />.
            </param>
            <returns>The set of all programs consistent with the examples.</returns>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.ProgramLearner`3.ScoreFeature">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.FeatureInfo" /> used for ranking the top-k programs in <see cref="M:Microsoft.ProgramSynthesis.Wrangling.ProgramLearner`3.LearnTopK(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`1,`2}},System.Int32,System.Collections.Generic.IEnumerable{`1},System.Nullable{System.Threading.CancellationToken})" />.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.HumanReadableSchemaPrintVisitor`3">
            <summary>
            SchemaPrintVisitor used to get <see cref="F:Microsoft.ProgramSynthesis.AST.ASTSerializationFormat.HumanReadable"/> representation of SchemaNode.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.IProgramLoader`3.Load(System.String,Microsoft.ProgramSynthesis.AST.ASTSerializationFormat)">
            <summary>
                Loads a <typeparamref name="TProgram" /> that has been serialized to
                <paramref name="serializedProgram" />.
            </summary>
            <param name="serializedProgram">
                The serialized program generated by
                <see cref="M:Microsoft.ProgramSynthesis.Program`2.Serialize(Microsoft.ProgramSynthesis.AST.ASTSerializationFormat)" />.
            </param>
            <param name="serializationFormat">The serialization format of <paramref name="serializedProgram" />.</param>
            <returns>A <typeparamref name="TProgram" /> deserialized from <paramref name="serializedProgram" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.IProgramLoader`3.Create(Microsoft.ProgramSynthesis.AST.ProgramNode)">
            <summary>
                Creates a <typeparamref name="TProgram" /> for a <see cref="T:Microsoft.ProgramSynthesis.AST.ProgramNode" />. <paramref name="program" /> must be a
                valid program for a <typeparamref name="TProgram" />.
            </summary>
            <param name="program">The code of the program.</param>
            <returns>A strongly-typed <typeparamref name="TProgram" /> object wrapping <paramref name="program" />.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.ProgramVersion00Converter">
            <summary>
            Converts pre-release region programs to newer version.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.CompoundExtractionProgram`1">
            <summary>
                A compound program that returns a tree/table of multiple fields/columns.
            </summary>
            <typeparam name="TRegion">The region of the field.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.CompoundExtractionProgram`1.Schema">
            <summary>
                The schema of this compound program.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.CompoundExtractionProgram`1.Run(System.String)">
            <summary>
                Parses <paramref name="inputText"/> into <typeparamref name="TRegion"/> and executes the program to obtain the tree output.
            </summary>
            <param name="inputText">The input document text.</param>
            <returns>The output tree.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.CompoundExtractionProgram`1.RunTable(`0,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics)">
            <summary>
                Executes the program on the <paramref name="input" /> to obtain the table output.
            </summary>
            <param name="input">The input token.</param>
            <param name="semantics">The semantics of generating the table. See <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics" />.</param>
            <returns>The output table.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.CompoundExtractionProgram`1.RunTable(System.String,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics)">
            <summary>
                Parses <paramref name="inputText"/> into <typeparamref name="TRegion"/> and executes the program to obtain the table output.
            </summary>
            <param name="inputText">The input document text.</param>
            <param name="semantics">The semantics of generating the table. See <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics" />.</param>
            <returns>The output table.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.ConcatRow`1">
            <summary>
                Represents a row that concatenates two <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.TableRow`1" />.
            </summary>
            <typeparam name="TRegion">The output type.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.ConcatRow`1.#ctor(Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.TableRow{`0},Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.TableRow{`0})">
            <summary>
                Initializes this row from its elements.
            </summary>
            <param name="l">The first row.</param>
            <param name="r">The second row.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.ConcatRow`1.Value">
            <summary>
                The value of this row.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.ICell`1">
            <summary>
                Represents an output cell
            </summary>
            <typeparam name="TRegion">The output type.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.ICell`1.CellValue">
            <summary>
                The value of this cell.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.ITable`1">
            <summary>
                Represents a table.
            </summary>
            <typeparam name="T">The type of the table cell.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.ITable`1.ColumnNames">
            <summary>
                The column names.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.ITable`1.Rows">
            <summary>
                The actual table, which contains a list of rows.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.Table`1">
            <summary>
                Represents a rectangular table that has some columns and a list of rows.
            </summary>
            <typeparam name="T">The type of the table cell.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.Table`1.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
                Creates a table that has the columns name in <paramref name="columnNames" /> and the data rows in
                <paramref name="rows" />.
                If <paramref name="columnNames" /> is null, use the default names "column{i}".
            </summary>
            <param name="columnNames">The column names.</param>
            <param name="rows">The data rows.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.Table`1.Equals(Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.Table{`0})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.Table`1.Rows">
            <summary>
                The actual table, which contains a list of rows.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.Table`1.ColumnNames">
            <summary>
                The column names.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.Table`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.Table`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.Table`1.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.Table`1.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.ValueRow`1">
            <summary>
                Represents a row that contains one <see cref="!:IRegion" />.
            </summary>
            <typeparam name="TRegion">The output type.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.ValueRow`1.#ctor(System.String,`0)">
            <summary>
                Initializes this row from its single key value.
            </summary>
            <param name="key">The single key.</param>
            <param name="value">The single value.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.ValueRow`1.Value">
            <summary>
                The value of this row.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.EmptyRow`1">
            <summary>
                Represents an empty row.
            </summary>
            <typeparam name="TRegion">The output type.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.EmptyRow`1.Value">
            <summary>
                The value of this row.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.TableRow`1">
            <summary>
            Represents the output row of a compound program.
            </summary>
            <typeparam name="TRegion">The output type.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.TableOutput.TableRow`1.Value">
            <summary>
            The value of this row.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.ISchemaElement`1">
            <summary>
                Represents an element in the schema definition. An element in the schema corresponds to a field in the extraction.
                An element may contain other elements to form a hierarchical structure.
            </summary>
            <typeparam name="TRegion">The output type of this element.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.ISchemaElement`1.Name">
            <summary>
                The name of the field corresponding to this element.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.ISchemaElement`1.IsNullable">
            <summary>
                Determines whether this element may return null.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.ISchemaElement`1.UseOutput">
            <summary>
                Determines whether the output of this element are included in the output.
                It is false if the element is dummy (i.e., its existence is to group several elements together).
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.ISchemaElement`1.DescendantOutputFields">
            <summary>
                All output fields of this node and its descendants.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.SequenceElement`1">
            <summary>
                Represents a sequence of structures, each of which may contain a list of children.
                A child can be any kind of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.ISchemaElement`1" />.
            </summary>
            <typeparam name="TRegion">The output type of this element.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.SequenceElement`1.#ctor(System.String,System.Boolean,System.Boolean,Microsoft.ProgramSynthesis.Wrangling.Schema.Element.ISchemaElement{`0})">
            <summary>
                Constructs a sequence of leaf elements from its constituent parts.
            </summary>
            <param name="name">The name of this element</param>
            <param name="isNullable">Specifies whether the output can be null.</param>
            <param name="useOutput">Specifies whether the overall output include the structure boundaries.</param>
            <param name="child">The child element.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.SequenceElement`1.Child">
            <summary>
                The child of this sequence.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.SequenceElement`1.Name">
            <summary>
                The name of the field corresponding to this element.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.SequenceElement`1.IsNullable">
            <summary>
                Determines whether this element may return null.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.SequenceElement`1.UseOutput">
            <summary>
                Determines whether the output of this element are included in the output.
                If this is false, we do not include the value of this sequence to the output (but we include the values of its
                elements).
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.SequenceElement`1.DescendantOutputFields">
            <summary>
                All output fields of this node and its descendants.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.StructElement`1">
            <summary>
                Represents a structure that contains a list of children,
                each of which can be other kinds of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.ISchemaElement`1" />.
            </summary>
            <typeparam name="TRegion">The output type of this element.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.StructElement`1.#ctor(System.String,System.Boolean)">
            <summary>
                Constructs a leaf element from its constituent parts.
            </summary>
            <param name="name">The name of this element</param>
            <param name="isNullable">Specifies whether the output can be null.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.StructElement`1.#ctor(System.String,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Schema.Element.ISchemaElement{`0}})">
            <summary>
                Constructs a structure element from its constituent parts.
            </summary>
            <param name="name">The name of this element</param>
            <param name="isNullable">Specifies whether the output can be null.</param>
            <param name="useOutput">
                Specifies whether the overall output include the structure boundaries.
            </param>
            <param name="children">The children elements.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.StructElement`1.Children">
            <summary>
                The list of children of this structure.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.StructElement`1.Name">
            <summary>
                The name of the field corresponding to this element.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.StructElement`1.IsNullable">
            <summary>
                Determines whether this element may return null.c
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.StructElement`1.UseOutput">
            <summary>
                Determines whether the output of this element are included in the output.
                If this is false, we do not include the struct boundary to the output (but we include the values of its
                children).
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.Element.StructElement`1.DescendantOutputFields">
            <summary>
                All output fields of this node and its descendants.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics">
            <summary>
                Specifies the semantics when transforming a tree to a table.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics.InnerJoin">
            <summary>
                If the child array is empty, this node will not be present in the output table.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics.OuterJoin">
            <summary>
                If the child array is empty, this node will be present in the output table.
                The child array element will be filled with null values.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.SequenceOutput`1">
            <summary>
            Represents a sequence of nodes.
            </summary>
            <typeparam name="TRegion">The type of value of this node.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.SequenceOutput`1.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{`0}})">
            <summary>
            Constructs a sequence of nodes.
            </summary>
            <param name="name">The name of the field corresponding to this node.</param>
            <param name="elements">The list of nodes.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.SequenceOutput`1.Name">
            <summary>
            The name of the field corresponding to this node.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.SequenceOutput`1.ToTable(Microsoft.ProgramSynthesis.Wrangling.Schema.Element.ISchemaElement{`0},Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics)">
            <summary>
            Returns the table representation of this node.
            </summary>
            <param name="schema">The schema of this node.</param>
            <param name="semantics">The semantics of generating the table. See <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics"/>.</param>         
            <returns>The table representation of this node.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.SequenceOutput`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.SequenceOutput`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.StructOutput`1">
            <summary>
            Represents an output node of a field.
            This node may contains other nodes that belong to its children.
            </summary>
            <typeparam name="TRegion">The type of value of this node.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.StructOutput`1.#ctor(System.String,`0,System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{`0}})">
            <summary>
            Constructs a output node from its constituent elements.
            </summary>
            <param name="name">The name of the field corresponding to this node.</param>
            <param name="value">The value of this node.</param>
            <param name="children">The children nodes.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.StructOutput`1.Value">
            <summary>
            The value of this node.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.StructOutput`1.Children">
            <summary>
            The children nodes.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.StructOutput`1.Name">
            <summary>
            The name of the field corresponding to this node.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.StructOutput`1.ToTable(Microsoft.ProgramSynthesis.Wrangling.Schema.Element.ISchemaElement{`0},Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics)">
            <summary>
            Returns the table representation of this node.
            </summary>
            <param name="schema">The schema of this node.</param>
            <param name="semantics">The semantics of generating the table. See <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics"/>.</param>
            <returns>The table representation of this node.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput`1">
            <summary>
                Represents a node in the output tree.
            </summary>
            <typeparam name="TRegion">The type of value of this node.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput`1.Name">
            <summary>
                The name of the field corresponding to this node.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput`1.ToTable(Microsoft.ProgramSynthesis.Wrangling.Schema.Element.ISchemaElement{`0},Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics)">
            <summary>
                Returns the table representation of this node.
            </summary>
            <param name="schema">The schema of this node.</param>
            <param name="semantics">The semantics of generating the table. See <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics" />.</param>
            <returns>The table representation of this node.</returns>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.SequenceExtractionProgram`2.ExtractionKind">
            <summary>
                Represents the extraction kind of this program.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.SequenceExtractionProgram`2.ReferenceKind">
            <summary>
                Specifies how this program relates to its referenced field.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SequenceExtractionProgram`2.Serialize(Microsoft.ProgramSynthesis.AST.ASTSerializationFormat)">
            <summary>
                Serializes the program to a string.
            </summary>
            <param name="serializationFormat">The desired serialization format (XML or human-readable).</param>
            <returns>The serialized program.</returns>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.RegionExtractionProgram`2.ExtractionKind">
            <summary>
                Represents the extraction kind of this program.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.RegionExtractionProgram`2.ReferenceKind">
            <summary>
                Specifies how this program relates to its referenced field.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.RegionExtractionProgram`2.Serialize(Microsoft.ProgramSynthesis.AST.ASTSerializationFormat)">
            <summary>
                Serializes the program to a string.
            </summary>
            <param name="serializationFormat">The desired serialization format (XML or human-readable).</param>
            <returns>The serialized program.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.BotSchemaElement`3">
            <summary>
            This class is the highest element in the schema, representing the entire file.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementInterface">
            <summary>
            A generic converter interface exposing the name for retrieving it.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementInterface.ConverterName">
            <summary>
            The name of this converter
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementInterface.#ctor(System.String)">
            <summary>
            Protected constructor.
            </summary>
            <param name="converterName"></param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementFactoryGeneric2`3">
            <summary>
            Generic ConvertSchemaElement factory exposing only the creation methods used in different parse methods (grammar and whole program).
            It does not refer to the child regions.
            </summary>
            <typeparam name="TSequenceProgramParent">The type of sequence extraction programs for the parent (source type of the conversion).</typeparam>
            <typeparam name="TRegionProgramParent">The type of region extraction programs for the parent (source type of the conversion).</typeparam>
            <typeparam name="TRegionParent">The type of regions being converted.</typeparam>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementFactory`6">
            <summary>
            Class to extend to create conversion rules between regions and extraction programs.
            It can eventually convert the same region to itself, e.g. for removing clutter in input.
            </summary>
            <typeparam name="TSequenceProgramParent">The type of sequence extraction programs for the parent (source type of the conversion).</typeparam>
            <typeparam name="TRegionProgramParent">The type of region extraction programs for the parent (source type of the conversion).</typeparam>
            <typeparam name="TRegionParent">The type of regions being converted.</typeparam>
            <typeparam name="TSequenceProgramChild">The type of sequence extraction programs for the child (target type of the conversion).</typeparam>
            <typeparam name="TRegionProgramChild">The type of region extraction programs for the child (target type of the conversion).</typeparam>
            <typeparam name="TRegionChild">The type of regions being converted to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementFactory`6.ConvertToChildRegion(`2)">
            <summary>
            Method to convert the parent region to the child region.
            Many converters can convert the same region to another one.
            </summary>
            <param name="regionParent"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementFactory`6.GetChildLearner">
            <summary>
            Returns the child extraction learner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementFactory`6.CreateInternal(System.String,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2},System.Boolean,Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner{`0,`1,`2})">
            <summary>
            Private constructor used in Create and CreateAndParseChildInternal
            </summary>
            <param name="name"></param>
            <param name="parent"></param>
            <param name="nullable"></param>
            <param name="learner"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementFactory`6.ParseChid(System.Xml.Linq.XElement,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementInterface[],Microsoft.ProgramSynthesis.AST.ASTSerializationFormat,System.Func{System.Xml.Linq.XElement,Microsoft.ProgramSynthesis.VersionSpace.ProgramSet})">
            <summary>
            Parses a child, calling the SchemaElement.Parse method.
            </summary>
            <param name="element">The element in xml</param>
            <param name="converters">The list of converters</param>
            <param name="formatPrograms">The way programs are formatted</param>
            <param name="getProgramSet">A way to retrieve the program set from the xml element, if any</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementFactory`6.CreateAndParseChild(System.String,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2},System.Boolean,Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner{`0,`1,`2},System.Xml.Linq.XElement,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementInterface[],Microsoft.ProgramSynthesis.AST.ASTSerializationFormat)">
            <summary>
            Creates a ConvertSchemaElement and parse its provided child with its program and children in xml format.
            </summary>
            <param name="name">Name</param>
            <param name="parent">The parent of the returned element</param>
            <param name="nullable">If this element is nullable</param>
            <param name="learner">The learner of the Parent's region and Program Extraction</param>
            <param name="child">The child in xml</param>
            <param name="converters">The list of available converters</param>
            <param name="formatPrograms">The way the programs are serialized (xml or HumanReadable)</param>
            <returns>The ConvertSchemaElement</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementFactory`6.Create(System.String,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2},System.Boolean,Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner{`0,`1,`2})">
            <summary>
            Creates a ConvertSchemaElement for a top-down creation.
            </summary>
            <param name="name">Name</param>
            <param name="parent">The parent of the returned element</param>
            <param name="nullable">If this element is nullable</param>
            <param name="learner">The learner of the Parent's region and Program Extraction</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementFactory`6.CreateAndParseChildGrammar(System.String,System.Xml.Linq.XElement,System.Boolean,Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner{`0,`1,`2},Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementInterface[])">
            <summary>
            Creates and element and parses its child (not programs) using the SchemaGrammar.Parse method.
            </summary>
            <param name="name">The name of the convert schema element. Can be different from the name of the converter</param>
            <param name="childMemberXml">The child in xml format</param>
            <param name="nullable">If this element is nullable</param>
            <param name="learner">The learner of the parent of the returned ConvertSchemaElement</param>
            <param name="converters">The list of converters</param>
            <returns>The ConvertSchemaElement</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElement`6">
            <summary>
            Allows one schema element of type Child be part of a schema element of type Parent
            </summary>
            <typeparam name="TSequenceProgramParent">The type of sequence extraction programs for the parent (source type of the conversion).</typeparam>
            <typeparam name="TRegionProgramParent">The type of region extraction programs for the parent (source type of the conversion).</typeparam>
            <typeparam name="TRegionParent">The type of regions being converted.</typeparam>
            <typeparam name="TSequenceProgramChild">The type of sequence extraction programs for the child (target type of the conversion).</typeparam>
            <typeparam name="TRegionProgramChild">The type of region extraction programs for the child (target type of the conversion).</typeparam>
            <typeparam name="TRegionChild">The type of regions being converted to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElement`6.#ctor(Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementFactory{`0,`1,`2,`3,`4,`5},System.String,System.Boolean,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`3,`4,`5},Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner{`0,`1,`2})">
            <summary>
            Bottom-up constructor of ConvertSchemaElement.
            Used to learn programs from examples.
            </summary>
            <param name="converter">The converter</param>
            <param name="name">The name of this ConvertSchemaElement. Can be different from the converter's name</param>
            <param name="childElement">The child element already constructed</param>
            <param name="nullable">If this element is nullable</param>
            <param name="learner">The learner.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElement`6.#ctor(Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementFactory{`0,`1,`2,`3,`4,`5},System.String,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2},System.Boolean,Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner{`0,`1,`2})">
            <summary>
            Top-down constructor of StructSchemaElement
            Used to parse programs.
            </summary>
            <param name="converter"></param>
            <param name="name"></param>
            <param name="parent"></param>
            <param name="nullable"></param>
            <param name="learner"></param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.NamespaceDoc">
            <summary>
                Support for loading a schema from a string using
                <see cref="!:SchemaGrammar&lt;TExtractionProgram,TRegion&gt;" />.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.Extensions.NamespaceDoc">
            <summary>
                Helpers for <see cref="!:SchemaElement&lt;TExtractionProgram,TRegion&gt;" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElementExtensions.ForEach``3(Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{``0,``1,``2},System.Action{Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{``0,``1,``2}})">
            <summary>
            Performs an operation on each element of the tree.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElementExtensions.ForEachWhile``3(Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{``0,``1,``2},System.Func{Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{``0,``1,``2},System.Boolean})">
            <summary>
            Performs an operation on each element of the tree while the function returns true.
            Returns true if the operation was successful on the last element.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.FieldSchemaElement`3.#ctor(System.String,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2},System.Boolean,Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner{`0,`1,`2})">
            <summary>
            Top-down constructor of StructSchemaElement
            Used to parse programs.
            </summary>
            <param name="name"></param>
            <param name="parent"></param>
            <param name="referenceName"></param>
            <param name="nullable"></param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3">
            <summary>
                A tree node in a schema description.
            </summary>
            <typeparam name="TSequenceProgram">
                The type of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.SequenceExtractionProgram`2" /> this schema
                works on.
            </typeparam>
            <typeparam name="TRegionProgram">
                The type of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.RegionExtractionProgram`2" /> this schema works
                on.
            </typeparam>
            <typeparam name="TRegion">The type of <see cref="T:Microsoft.ProgramSynthesis.Utils.IRegion`1" /> this schema works on.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.ExecutionCache">
            <summary>
                Store the execution cache of the kth program in Programs under a string
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.#ctor(System.String,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2},System.Boolean,Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner{`0,`1,`2})">
            <summary>
                Top-down constructor of SchemaElement
                Used to parse programs.
            </summary>
            <param name="name"></param>
            <param name="parent"></param>
            <param name="nullable"></param>
            <param name="learner"></param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.#ctor">
            <summary>
                Internal use only.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.ReferencedElement">
            <summary>
                The node that serves as a boundary.
                This node is not necessarily the Parent.
                It can be any ancestor (including \bot).
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.ExtractionKind">
            <summary>
                If the program extracting this node is a sequence or a region.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.Programs">
            <summary>
                The top-ranked field extraction programs for this node.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.AllPrograms">
            <summary>
                All field extraction programs for this node.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.AddChild(Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2})">
            <summary>
                Sibling method to top-down build this SchemaElement
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.AcceptVisitor``1(Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaVisitor{``0,`0,`1,`2})">
            <summary>
                Returns the value computed by the hierarchical application of the <paramref name="visitor" /> instance.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.Parse(System.Xml.Linq.XElement,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2},Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner{`0,`1,`2},Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementInterface[],Microsoft.ProgramSynthesis.AST.ASTSerializationFormat,System.Func{System.Xml.Linq.XElement,Microsoft.ProgramSynthesis.VersionSpace.ProgramSet})">
            <summary>
                Parses an XML element and returns a SchemaElement.
            </summary>
            <param name="element">The code to parse as XElement</param>
            <param name="parent"></param>
            <param name="learner"></param>
            <param name="converters"></param>
            <param name="formatPrograms">If the programs are formatted in XML or in human-readable format.</param>
            <param name="getProgramSet"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.Parse(System.String,Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner{`0,`1,`2},Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementInterface[],Microsoft.ProgramSynthesis.AST.ASTSerializationFormat,System.Func{System.Xml.Linq.XElement,Microsoft.ProgramSynthesis.VersionSpace.ProgramSet})">
            <summary>
                Parses an xml element in a string and returns the corresponding SchemaElement.
            </summary>
            <param name="code">The code to parse. The schema is in XML, but the ProgramNodes are formatted using formatPrograms.</param>
            <param name="learner">The learned</param>
            <param name="converters"></param>
            <param name="formatPrograms">If the programs are formatted in XML or in human-readable format.</param>
            <param name="getProgramSet">A function to retrieve the program set from the XElement after parsing.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.ComputeReferencedElement">
            <summary>
                Computes the references node and returns it. Computes whether this element will run for a SequenceTreeElement or
                just a field/struct.
            </summary>
            <returns>Returns true if this node is a sequence, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.RunTree(`2)">
            <summary>
                Build the execution tree for this element and its children.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.TopLevelRunOfReferencedElement(`2)">
            <summary>
                Returns the top-level run of the referenced element.
            </summary>
            <param name="str">The whole string on which to run the parent.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.TopLevelRun(`2)">
            <summary>
                Returns the absolute positions in the string of this program when all ancestor programs execute.
            </summary>
            <param name="str">The whole string</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.TopLevelRunPlusParent(`2)">
            Returns the top level run with the dependency to the parent.
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement`3.Run(`2,System.Int32)">
            <summary>
                Execute the kth program of this element on the region <paramref name="s" />.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElementProgram`3">
            <summary>
                This class represents a specific program of all learned programs of a
                <see cref="!:SchemaElement&lt;TExtractionProgram,TRegion&gt;" />.
                <see cref="!:SchemaElement&lt;TExtractionProgram,TRegion&gt;.Programs" /> is the list of all programs; this refers to a
                specific program in that list.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaGrammar`3">
            <summary>
            The class that represents the schema tree. Essentially a wrapper around a <see cref="!:SchemaElement&lt;TExtractionProgram,TRegion&gt;" />.
            Includes parsing functions to retrieve a schema from a string.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaGrammar`3.Root">
            <summary>
            The root element of this schema.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaGrammar`3.#ctor(Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2})">
            <summary>
                Constructs a <see cref="!:SchemaGrammar&lt;TExtractionProgram,TRegion&gt;" /> rooted at <paramref name="e" />.
            </summary>
            <param name="e">The root element of the schema.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaGrammar`3.FindElement(System.String)">
            <summary>
            Return the node in the schema whose id is <paramref name="e"/>
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SequenceSchemaElement`3.#ctor(Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2},System.String,System.Boolean,Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner{`0,`1,`2})">
            <summary>
            Top-down constructor of StructSchemaElement
            Used to parse programs.
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
            <param name="nullable"></param>
            <param name="learner"></param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.StructSchemaElement`3.#ctor(System.String,System.Collections.Generic.List{Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2}},System.Boolean,Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner{`0,`1,`2})">
            <summary>
            Bottom-up constructor of StructSchemaElement.
            Used to learn programs from examples.
            </summary>
            <param name="name"></param>
            <param name="members"></param>
            <param name="nullable"></param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.StructSchemaElement`3.#ctor(System.String,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2},System.Boolean,Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner{`0,`1,`2})">
            <summary>
            Top-down constructor of StructSchemaElement
            Used to parse programs.
            </summary>
            <param name="name"></param>
            <param name="parent"></param>
            <param name="nullable"></param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.StructSchemaElement`3.CreateImplicitStructBoundaries(`2,`2[],`2[])">
            <summary>
                Creates implicit bounds from <paramref name="childRun" /> and <paramref name="parentRun" />.
                Should be run from the whole input file.
            </summary>
            <param name="sr">The input region.</param>
            <param name="parentRun">The parent output.</param>
            <param name="childRun">The children output.</param>
            <returns>The implicit boundaries.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.StructSchemaElement`3.RunTreeBoundaries(`2,System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Short-circuit so that this method can be run even without RunTree.
            </summary>
            <param name="s"></param>
            <param name="run"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.StructSchemaElement`3.FindExplicitElement``1(Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2},Microsoft.ProgramSynthesis.Wrangling.SchemaParser.TreeElement{``0},``0)">
            <summary>
            Return the singleton object wrapped by the sequence tree inside the boundaries.
            There should be exactly one element, as this is used by implicit structs only.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.StructSchemaElement`3.IsChildDefiningImplicitBoundaries(Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2})">
            <summary>
            Returns true if the given child/member is defining implicit boundaries.
            </summary>
            <param name="member">The child to test</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.UnionSchemaElement`3.#ctor(System.String,System.Collections.Generic.List{Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2}},System.Boolean,Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner{`0,`1,`2})">
            <summary>
            Bottom-up constructor.
            </summary>
            <param name="name"></param>
            <param name="members"></param>
            <param name="nullable"></param>
            <param name="learner"></param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaParser.UnionSchemaElement`3.#ctor(System.String,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaElement{`0,`1,`2},System.Boolean,Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner{`0,`1,`2})">
            <summary>
            Top-down constructor of StructSchemaElement
            Used to parse programs.
            </summary>
            <param name="name"></param>
            <param name="parent"></param>
            <param name="nullable"></param>
            <param name="learner"></param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.SchemaProgram`4">
            <summary>
                Wrapper around a <see cref="!:SchemaElement&lt;TExtractionProgram,TRegion&gt;"/> of the given type, used to
                perform learning on one element
            </summary>
            <typeparam name="TSequenceProgram">The type of sequence extraction programs.</typeparam>
            <typeparam name="TRegionProgram">The type of region extraction programs.</typeparam>
            <typeparam name="TRegion">The type of regions on which this operates</typeparam>
            <typeparam name="TSelector">The type of selector used by the method Select</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.SchemaProgram`4.LearnedSchemaProgram">
            <summary>
                The learned schema program.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaProgram`4.Format(Microsoft.ProgramSynthesis.AST.ASTSerializationFormat)">
            <summary>
                Format the schema program.
            </summary>
            <param name="format">The desired format.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaProgram`4.Select(`3,`2)">
            <summary>
                Creates a region from the input and a selector.
            </summary>
            <param name="input"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaProgram`4.Run(`3)">
            <summary>
                Executes the schema program on the string <paramref name="s"/>. Returns the highlighting of the tree.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaProgram`4.LearnElementField(System.String,System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`2},`3,System.Int32)">
            <summary>
                Learns an element interactively. We can repeatedly call this method (with an increasing number of 
                examples) to learn a field. Once we switch to a new field, we cannot call this method on previously
                learned fields.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaProgram`4.LearnElementField(System.String,System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`3},`3,System.Int32)">
            <summary>
                Learns an element interactively. We can repeatedly call this method (with an increasing number of 
                examples) to learn a field. Once we switch to a new field, we cannot call this method on previously
                learned fields.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.SchemaLearner`5">
            <summary>
            The class to learn a sequence of schema programs.
            </summary>
            <typeparam name="TSchemaProgram">The type of output schema.</typeparam>
            <typeparam name="TSequenceProgram">The type of sequence extraction programs.</typeparam>
            <typeparam name="TRegionProgram">The type of region extraction programs.</typeparam>
            <typeparam name="TRegion">The type of the region used.</typeparam>
            <typeparam name="TSelector">The type of the selector.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaLearner`5.Select(`4,`3)">
            <summary>
            Creates a region from the input and a selector.
            </summary>
            <param name="input"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaLearner`5.StringToInput(System.String)">
            <summary>
            Creates a region from a string.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaLearner`5.Wrap(Microsoft.ProgramSynthesis.Wrangling.SchemaParser.SchemaGrammar{`1,`2,`4})">
            <summary>
            Wraps a <see cref="!:SchemaGrammar&lt;TExtractionProgram,TRegion&gt;"/> in a <see cref="!:SchemaProgram&lt;TExtractionProgram,TSelector,TRegion&gt;"/>.
            </summary>
            <param name="grammar">The schema grammar being wrapped.</param>
            <returns>A <typeparamref name="TSchemaProgram"/> referencing <paramref name="grammar"/>.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaLearner`5.GetLearner">
            <summary>
            Gets the <see cref="T:Microsoft.ProgramSynthesis.Wrangling.ExtractionLearner`3"/> used to learn individual programs.
            </summary>
            <returns>The learner for programs that make up the learned schema programs.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaLearner`5.LearnSchema(System.String,System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.DocumentSpecInterface},System.Int32,System.Boolean,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementInterface[])">
            <summary>
            Learns schema program from multiple examples.
            </summary>
            <param name="schema">Schema in XML format.</param>
            <param name="specs">A list of specifications, each contains an input document and dictionaries with positive 
                and negative examples for fields</param>
            <param name="k">The number of output programs.</param>
            <param name="learnAll">Specify whether we want to learn all programs.</param>
            <param name="converters">The converter.</param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.SchemaProgramLearnerExtensions">
            <summary>
            The extension class for schema learner.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaProgramLearnerExtensions.LearnSchema``5(Microsoft.ProgramSynthesis.Wrangling.SchemaLearner{``0,``1,``2,``3,``4},System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{``3}},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{``3}},System.Int32,System.Boolean)">
            <summary>
            Learns a schema program from a set of all examples of every field. 
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaProgramLearnerExtensions.LearnSchemaExt``5(Microsoft.ProgramSynthesis.Wrangling.SchemaLearner{``0,``1,``2,``3,``4},System.String,System.Collections.Generic.IEnumerable{System.Tuple{``4,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{``3}},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{``3}}}},System.Int32,System.Boolean,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementInterface[])">
            <summary>
            Learns a sequence of schema programs from multiple examples.
            </summary>
            <param name="learner">The custom learner.</param>
            <param name="schema">Schema in XML format.</param>
            <param name="specs">A list of specifications, each containing an input document and dictionaries with positive 
            and negative examples for fields.</param>
            <param name="k">Number of programs to learn.</param>
            <param name="learnAll">If true, the program set will be generated.</param>
            <param name="converters">An array of converters.</param>
            <returns>A sequence of schema programs.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaProgramLearnerExtensions.LearnSchemaExt``5(Microsoft.ProgramSynthesis.Wrangling.SchemaLearner{``0,``1,``2,``3,``4},System.String,System.Collections.Generic.IEnumerable{System.Tuple{``4,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{``4}},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{``4}}}},System.Int32,System.Boolean,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementInterface[])">
            <summary>
            Learns a sequence of schema programs from one input file and positive/negative examples.
            </summary>
            <param name="learner">Custom learner provided.</param>
            <param name="schema">Schema in XML format.</param>
            <param name="specs">A list of specifications, each containing an input document and dictionaries with positive 
            and negative examples for fields.</param>
            <param name="k">Number of programs to learn</param>
            <param name="learnAll">If true, the program set will be generated.</param>
            <param name="converters">An array of converters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.SchemaProgramLearnerExtensions.LearnSchemaExt``5(Microsoft.ProgramSynthesis.Wrangling.SchemaLearner{``0,``1,``2,``3,``4},System.String,``4,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{``4}},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{``4}},System.Int32,System.Boolean,Microsoft.ProgramSynthesis.Wrangling.SchemaParser.ConvertSchemaElementInterface[])">
            <summary>
            Learns a sequence of schema programs from the examples.
            </summary>
            <typeparam name="TSchemaProgram">The type of output schema.</typeparam>
            <typeparam name="TSequenceProgram">The type of sequence extraction programs.</typeparam>
            <typeparam name="TRegionProgram">The type of region extraction programs.</typeparam>
            <typeparam name="TRegion">The type of the region used.</typeparam>
            <typeparam name="TSelector">The type of the selector.</typeparam>
            <param name="learner"></param>
            <param name="schema"></param>
            <param name="doc"></param>
            <param name="positiveExamples"></param>
            <param name="negativeExamples"></param>
            <param name="k">Number of programs to learn</param>
            <param name="learnAll">If true, the program set will be generated.</param>
            <param name="converters">An array of converters</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.Conflict">
            <summary>
                Information about a conflict between constraints. A conflict occurs when two constraints contradict each other. A
                conflict contains the set of other constraints involved in the conflict.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Conflict.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.IConstraint})">
            <summary>
                Constructs a new <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.Conflict" />.
            </summary>
            <param name="conflictingConstraints">The constraints which contradict each other.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Conflict.#ctor(Microsoft.ProgramSynthesis.Wrangling.Constraints.IConstraint[])">
            <summary>
                Constructs a new <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.Conflict" />.
            </summary>
            <param name="conflictingConstraints">The constraints which contradict each other.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Conflict.ConflictingConstraints">
            <summary>
                The constraints which conflict with each other. At least one must be removed to resolve the conflict.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.IJournalStorage">
            <summary>
                Interface for backing store for a journal, which is a persistent dictionary from strings to string. Journals are
                used for information that is persisted across multiple <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3" />s for
                adapting to a user's or organization's preferences. The client is responsible for the persistence of the journal,
                which is done by providing an implementation of this interface pointing to the same persistent store to each
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3" />.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.IQuestion">
            <summary>
                A question a session may ask a user to generate more constraints.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.IQuestion.Options">
            <summary>
                A list of multiple choice options.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.IQuestion.RespondWithOption(System.Nullable{System.Int32})">
            <summary>
                Give an answer to this question using one of the provided options.
            </summary>
            <param name="optionIndex">Either an index into <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.IQuestion.Options" /> or <c>null</c> meaning "none of the above".</param>
            <returns><c>true</c> if the response was accepted and new constraints were inserted into the session.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.IQuestion.Respond(System.Object)">
            <summary>
                Give an answer to this question which might not be one of the provided options.
            </summary>
            <param name="response">
                Either a value which makes sense in <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.IQuestion.Options" /> (although it might not actually be in
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.IQuestion.Options" />) or <c>null</c> meaning "none of the above".
            </param>
            <returns><c>true</c> if the response was accepted and new constraints were inserted into the session.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.IQuestion.Cancel">
            <summary>
                Refuse to answer this question. Indicates the user is unable or unwilling to provide this information.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3">
            <summary>
                Wraps the information needed for learning in an immutable object.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3._hashCode">
            <summary>
                Cached hashcode value.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3.#ctor(System.Collections.Immutable.IImmutableList{`1},System.Collections.Immutable.IImmutableList{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`1,`2}})">
            <summary>
                Wrap the information needed to run the synthesizer.
            </summary>
            <param name="inputs">The known inputs.</param>
            <param name="constraints">The constraints the program must satisfy.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3.Inputs">
            <summary>
                All of the known inputs.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3.Constraints">
            <summary>
                The constraints describing what programs are valid.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3.Equals(Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest{`0,`1,`2})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3.Equals(System.Object)">
            <summary>
                Returns a value that indicates whether the current <see cref="T:System.Tuple`4" /> object is equal to a specified
                object.
            </summary>
            <returns>
                true if the current instance is equal to the specified object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with this instance.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3.GetHashCode">
            <summary>
                Returns the hash code for the current object.
            </summary>
            <returns>
                A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3.op_Equality(Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest{`0,`1,`2},Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest{`0,`1,`2})">
            <summary>
                Checks if two <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3" />s are equal.
            </summary>
            <param name="left">The first request.</param>
            <param name="right">The second request.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> wrap the same information.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3.op_Inequality(Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest{`0,`1,`2},Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest{`0,`1,`2})">
            <summary>
                Checks if two <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3" />s are not equal.
            </summary>
            <param name="left">The first request.</param>
            <param name="right">The second request.</param>
            <returns>False if <paramref name="left" /> and <paramref name="right" /> wrap the same information.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResultKind">
            <summary>
                The kind of a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3" />.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResultKind.Unknown">
            <summary>
                Kind is unknown. This is the default value if no kind is set.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResultKind.Success">
            <summary>
                At least one program was learned.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResultKind.NoPrograms">
            <summary>
                No programs were learned, but <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3.Conflicts" /> does not contain
                information on conflicts.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResultKind.HasConficts">
            <summary>
                The <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3.Conflicts" /> collection is non-empty, explaining why no
                programs were learned.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3">
            <summary>
                All of the information extracted from a session from a single <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Learn(Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Threading.CancellationToken)" />
                call.
            </summary>
            <typeparam name="TProgram">Type of programs to learn.</typeparam>
            <typeparam name="TInput">Input type of <typeparamref name="TProgram" />.</typeparam>
            <typeparam name="TOutput">Output type of <typeparamref name="TProgram" />.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3.Kind">
            <summary>
                Summary of this result.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3.LearnedPrograms">
            <summary>
                Ranked list of programs learned, if any. This is non-empty only if <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3.Kind" /> is
                <see cref="F:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResultKind.Success" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3.Conflicts">
            <summary>
                Conflicts between constraints which make learning impossible. This is non-empty only if <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3.Kind" /> is
                <see cref="F:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResultKind.HasConficts" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3.Questions">
            <summary>
                Ranked list of questions to ask the user to generate additional constraints. This is non-empty only if
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3.Kind" /> is <see cref="F:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResultKind.Success" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3.ProgramOutputs">
            <summary>
                Outputs of the programs on the inputs in the <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3" />. This is non-empty
                only if <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3.Kind" /> is <see cref="F:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResultKind.Success" />.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.SessionUtils">
            <summary>
                Utility class for generating <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3" />s from a
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3" />. This calls all of the relevant
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3" /> methods to collect the data for the
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.SessionUtils.ComputeLearnResultAsync``3(Microsoft.ProgramSynthesis.Wrangling.Session.Session{``0,``1,``2},System.Int32,System.Nullable{System.Int32},System.Nullable{System.Double},System.Collections.Generic.IEnumerable{System.Type},Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Threading.CancellationToken)">
            <summary>
                Run <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.LearnTopKAsync(System.Int32,Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Threading.CancellationToken)" /> and collect related data into a
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3" />.
            </summary>
            <typeparam name="TProgram">Type of programs to learn.</typeparam>
            <typeparam name="TInput">Input type of <typeparamref name="TProgram" />.</typeparam>
            <typeparam name="TOutput">Output type of <typeparamref name="TProgram" />.</typeparam>
            <param name="session">Session to learn in.</param>
            <param name="numPrograms">
                How many programs to learn. Will only return fewer programs if there are not
                <paramref name="numPrograms" /> programs consistent with the constraints. May learn more in the case of ties in
                choosing the top <paramref name="numPrograms" /> programs.
            </param>
            <param name="numQuestions">Maximum number of questions for the user to generate.</param>
            <param name="questionConfidenceThreshold">An optional minimum confidence for questions to be returned.</param>
            <param name="allowedQuestionTypes">
                An optional set of types of questions to return. If <c>null</c>, all types will be
                returned.
            </param>
            <param name="rankingMode"><see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode" /> to use for selecting top programs.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.LearnResult`3" /> with all of the requested information.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3">
            <summary>
                A <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3" /> that learns at once using a
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.ProgramLearner`3" /> as opposed to supporting incremental learning.
            </summary>
            <typeparam name="TProgram">Type of programs this session learns.</typeparam>
            <typeparam name="TInput">Type of inputs to programs this session learns.</typeparam>
            <typeparam name="TOutput">Type of outputs of programs this session learns.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.JsonSerializerSettings">
            <summary>
                Pass this property to json.net when serializing or deserializing a session object.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.JsonSerializerSettingsInstance">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.Grammar">
            <summary>
                The grammar of programs this session synthesizes. Currently used for the
                <see cref="P:Microsoft.ProgramSynthesis.Grammar.InputSymbol" /> only.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.LoggingTypeName">
            <summary>
                Identifier to use for the kind of session this is when logging. Usually just the name of the DSL like
                "Transformation.Text" or "Extraction.Web".
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.#ctor(Microsoft.ProgramSynthesis.Wrangling.ProgramLearner{`0,`1,`2},Microsoft.ProgramSynthesis.Wrangling.IProgramLoader{`0,`1,`2},Microsoft.ProgramSynthesis.Wrangling.Session.IJournalStorage,System.Globalization.CultureInfo,System.String,Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger)">
            <summary>
                Creates a new session.
            </summary>
            <param name="learner">The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.ProgramLearner`3" /> used to learn.</param>
            <param name="loader">
                The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.IProgramLoader`3" /> used to create
                <typeparamref name="TProgram" /> objects.
            </param>
            <param name="journalStorage">
                Backing store for the journal of user actions used to adapt to user preferences. May be
                null to not save this data.
            </param>
            <param name="culture">
                The <see cref="T:System.Globalization.CultureInfo" /> to use when learning programs; accessible using
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Culture" />. Used to select preferred date and number formats and
                defaults for other culture-specific settings.
            </param>
            <param name="loggingTypeName">
                Name to use to identify the type of this session in the logger. Defaults to
                <see cref="P:Microsoft.ProgramSynthesis.Grammar.Name" />.
            </param>
            <param name="logger">
                The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger" /> implementation to use for providing telemetry information.
            </param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.MaxCacheSize">
            <summary>
                Maximum number of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3" />s to cache results for.
                Defaults to 5.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.CleanCache">
            <summary>
                Remove old learning results from the cache.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.GetTopKQuestionsAsync(System.Nullable{System.Int32},System.Nullable{System.Double},System.Collections.Generic.IEnumerable{System.Type},System.Threading.CancellationToken)">
            <summary>
                Subclass should implement this to get the top questions to ask the user, if any. This implementation never returns
                any questions.
            </summary>
            <param name="k">An optional maximum number of questions to return.</param>
            <param name="confidenceThreshold">An optional minimum confidence for questions to be returned.</param>
            <param name="allowedTypes">
                An optional set of types of questions to return. If <c>null</c>, all types will be returned.
            </param>
            <param name="cancel"></param>
            <returns>A ranked list of questions to ask the user to improve the generated program.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering">
            <summary>
                A choice an input can correspond to, which is used to distinguish inputs when clustering. A good clustering
                contains one input for each value of the choice. A choice maps an input to one of <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering.NumChoices" />
                options, identified by the integers 0 through <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering.NumChoices" />. This mapping is performed by
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering.ChoiceFunc" /> (or <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering.ChoiceFor(`1)" />).
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering.#ctor(System.UInt32,System.Func{`1,System.Nullable{System.UInt32}},System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Tuple`2" /> class.</summary>
            <param name="numChoices">The range of <paramref name="choiceFunc" /> is [0, numChoices).</param>
            <param name="choiceFunc">Function to compute the choice for a given input or <c>null</c> if not relevant to that input.</param>
            <param name="significantEvenIfCorrect">
                If true, then when <paramref name="choiceFunc" /> is non-<c>null</c>, this
                overrides the guess that the top-program is correct.
            </param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering.NumChoices">
            <summary>
                The range of <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering.ChoiceFunc" />/<see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering.ChoiceFor(`1)" /> is [0, <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering.NumChoices" />).
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering.ChoiceFunc">
            <summary>
                Function to compute the value of this choice for a given input.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering.SignificantEvenIfCorrect">
            <summary>
                Allow inputs for which <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering.ChoiceFunc" /> returns a non-<c>null</c> value to be significant inputs even if
                they are considered to be correct already.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering.ChoiceFor(`1)">
            <summary>
                Compute the value of this choice for <paramref name="input" />.
            </summary>
            <param name="input">Input to compute choice for.</param>
            <returns>Choice selection for <paramref name="input" /> according to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering.ChoiceFunc" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChooseSignificantInputFromCluster(System.Collections.Generic.IReadOnlyList{`1})">
            <summary>
                Selects a representative input from a cluster of inputs. <paramref name="cluster" /> is a single cluster, so any of
                its elements should be an acceptable representative of the cluster, but a DSL may wish to override this to select
                the best representative.
            </summary>
            <param name="cluster">A collection of inputs which are all similar to each other.</param>
            <returns>An element of <paramref name="cluster" /> determined to be representative.</returns>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.NumSamplesForClusters">
            <summary>
                When working with a <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" />, the clustering algorithm avoids using the entire
                <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" /> in favor of sampling programs from it both randomly and by taking the top-k. This is how
                many samples to take and the number of top programs to use (so double this number is the total number of programs).
                This number is determined empirically by balancing time versus correctness; setting it higher rapidly makes
                computing the top-k slower.
            </summary>
            <remarks>
                Calling <see cref="M:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet.TopK(Microsoft.ProgramSynthesis.IFeature,System.Int32,Microsoft.ProgramSynthesis.LearningInputs)"/> with this value is the bottleneck in <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.GetSignificantInputsAsync(System.Nullable{System.Double},System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingOnlyInputs(Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest{`0,`1,`2},System.Double,System.Threading.CancellationToken)">
            <summary>
                Partition the inputs into clusters using only the inputs themselves. Cluster selection should be such that if an
                example is provided for at least one input in each cluster, then the desired program should be synthesized (if
                expressible). The number of clusters returned can be tuned using <paramref name="confidenceThreshold" />, where a
                lower threshold corresponds to more clusters (i.e. clusters are split even if there's low confidence in creating
                additional clusters).
            </summary>
            <param name="request">
                The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3" /> encompassing the information the
                user has provided so far.
            </param>
            <param name="confidenceThreshold">
                A number in [0,1] representing how confident the algorithm should be in the clusters
                it creates where higher thresholds correspond to more certain that the cluster is needed and therefore fewer
                clusters. A threshold of 1 means to only split clusters when completely certain.
            </param>
            <param name="cancel">Cancellation token.</param>
            <returns>
                A list of clusters sorted in descending order by confidence where a cluster is a tuple of a list of inputs in
                that cluster and a confidence value (higher values mean the user should look at those inputs first).
            </returns>
            <seealso cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsa(Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession{`0,`1,`2}.ClusterInputsUsingVsaRequest,System.Threading.CancellationToken)" />
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsaRequest">
            <summary>
                Type for wrapping the arguments to
                <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsa(Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession{`0,`1,`2}.ClusterInputsUsingVsaRequest,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsaRequest.Request">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3" /> encompassing the information the
                user has provided so far.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsaRequest.ConfidenceThreshold">
            <summary>
                A number in [0,1] representing how confident the algorithm should be in the clusters
                it creates where higher thresholds correspond to more certain that the cluster is needed and therefore fewer
                clusters. A threshold of 1 means to only split clusters when completely certain.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsaRequest.IncludeCorrectCluster">
            <summary>
                If <c>false</c>, then the inputs on which the learned program is correct (e.g. the
                examples and the inputs the algorithm finds indistinguishable from the examples) are omitted.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsaRequest.AllPrograms">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" /> of all programs consistent with <see cref="F:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsaRequest.Request" />
                from a call to <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.LearnAllCached(Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest{`0,`1,`2},System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsaRequest.TopProgram">
            <summary>
                The top program from <see cref="F:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsaRequest.AllPrograms" /> according to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode.MostLikely" />.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsaRequest.TopNoInputsProgram">
            <summary>
                The top program according to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode.MostLikely" /> learned using <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.LearnTopKCached(Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest{`0,`1,`2},Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Int32,System.Threading.CancellationToken)" />
                with all of the constraints but no inputs provided.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsaRequest.ExtraDistinguishers">
            <summary>
                An optional collection of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ChoiceForClustering" />s.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsa(Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession{`0,`1,`2}.ClusterInputsUsingVsaRequest,System.Threading.CancellationToken)">
            <summary>
                Cluster inputs using the VSA (<see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" />) of <see cref="F:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsaRequest.AllPrograms" />
                consistent with <see cref="F:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsaRequest.Request" />. Cluster selection should be such that if an
                example is provided for at least one input in each cluster, then the desired program should be synthesized (if
                expressible). The number of clusters returned can be tuned using
                <see cref="F:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsaRequest.ConfidenceThreshold" />, where a lower threshold corresponds to more
                clusters (i.e. clusters are split even if there's low confidence in creating additional clusters).
            </summary>
            <param name="ciuRequest">The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ClusterInputsUsingVsaRequest" /> wrapping the arguments to this method.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>
                A list of clusters sorted in descending order by confidence where a cluster is a tuple of a list of inputs in
                that cluster and a confidence value (higher values mean the user should look at those inputs first).
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.GetSignificantInputClustersAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
                Computes a partition of a subset of <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> such that including an
                example for any one input of each subset in the partition is sufficient for future learning. Enough representative
                inputs should be selected such that all of the patterns are present without keeping all of the inputs. This can be
                used to make a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3" /> smaller for saving and later reloading and/or to
                present those inputs to the user to increase their confidence that the learned program is correct.
            </summary>
            <param name="confidenceThreshold">
                A number in [0,1] representing how confident the algorithm should be in the inputs
                it selects where higher thresholds correspond to more certain that the input is needed and therefore fewer
                inputs. A threshold of 1 means to only include inputs when completely certain.
            </param>
            <param name="cancel">Cancellation token.</param>
            <returns>
                A list of disjoint subsets of <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> paired with confidence scores
                sorted in descending order by confidence (higher confidence values mean the user should look at those inputs first)
                or <c>null</c> if unable to select inputs for any reason. Only one input from each subset should be shown to the
                user, but which input to select is left up to the client of this API.
            </returns>
            <seealso cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.GetSignificantInputsAsync(System.Nullable{System.Double},System.Threading.CancellationToken)" />
            <seealso cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.ComputeTopKOutputsAsync(`1,System.Int32,Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Nullable{System.Double},System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.GetSignificantInputsAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
                Computes a subset of <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> which is sufficient for future
                learning. Enough representative inputs should be selected such that all of the patterns are present without keeping
                all of the inputs. This can be used to make a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3" /> smaller for saving
                and later reloading and/or to present those inputs to the user to increase their confidence that the learned
                program is correct.
            </summary>
            <param name="confidenceThreshold">
                A number in [0,1] representing how confident the algorithm should be in the inputs
                it selects where higher thresholds correspond to more certain that the input is needed and therefore fewer
                inputs. A threshold of 1 means to only include inputs when completely certain.
            </param>
            <param name="cancel">Cancellation token.</param>
            <returns>
                A list of inputs paired with confidence scores sorted in descending order by confidence (higher confidence values
                mean the user should look at those inputs first) or <c>null</c> if unable to select inputs for any reason.
            </returns>
            <seealso cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.GetSignificantInputClustersAsync(System.Nullable{System.Double},System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.ComputeTopKOutputsAsync(`1,System.Int32,Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Nullable{System.Double},System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSession`3.ComputeTopKOutputsAsync(`1,System.Int32,Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
                Compute the top-<paramref name="k" /> outputs for <paramref name="input" /> of programs that satisfy
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" />. This differs from taking the outputs of the top-<paramref name="k" /> programs from
                <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.LearnTopKAsync(System.Int32,Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Threading.CancellationToken)" /> in two ways: (1) more than <paramref name="k" /> programs are learned and only
                <em>distinct</em> outputs are returned, and (2) the <paramref name="confidenceThreshold" /> (defaults to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.ConfidenceThreshold" />) is used to discard programs that are much worse than the best program.
            </summary>
            <param name="input">Input to give outputs for.</param>
            <param name="k">How many outputs to attempt to generate. Will never generate more, but may generate fewer.</param>
            <param name="rankingMode">How the programs should be ranked.</param>
            <param name="confidenceThreshold">
                Optional value in [0,1] used to limit outputs to those likely to be useful. A value
                of 1 would mean to only return outputs which are tied for the best.
            </param>
            <param name="cancel">Cancellation token.</param>
            <returns>Up to <paramref name="k" /> of the best outputs for <paramref name="input" /> in ranked order.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.OutputDisambiguationQuestion`3">
            <summary>
                A question offering choices of outputs for a single input.
            </summary>
            <typeparam name="TProgram">Type of programs this question applies to.</typeparam>
            <typeparam name="TInput">Type of inputs to programs this question applies to.</typeparam>
            <typeparam name="TOutput">Type of outputs of programs this question applies to.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.OutputDisambiguationQuestion`3.#ctor(Microsoft.ProgramSynthesis.Wrangling.Session.Session{`0,`1,`2},`1,System.Collections.Generic.IReadOnlyList{`2})">
            <summary>
                Constructs a question disambiguating the correct output for <paramref name="input" />.
            </summary>
            <param name="session">
                The session associated with this question which will get its constraints when
                <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4.RespondWithOption(System.Nullable{System.Int32})" /> is called.
            </param>
            <param name="input">The input to choose an output for.</param>
            <param name="options">The proposed outputs for <paramref name="input" />.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.OutputDisambiguationQuestion`3.Input">
            <summary>
                Input this is disambiguating the output for.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.OutputDisambiguationQuestion`3.Options">
            <summary>
                A list of multiple choice options.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.OutputDisambiguationQuestion`3.ConstraintsFor(`2)">
            <summary>
                The constraints that correspond to a given response to this question.
            </summary>
            <param name="response">
                A response to the question; usually, but not required to be, an element of
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4.Options" />.
            </param>
            <returns>
                The meaning of the option in constraints or <c>null</c> if <paramref name="response" /> is not a meaningful
                response to the question.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4">
            <summary>
                Abstract base class for questions to ask the user.
            </summary>
            <typeparam name="TProgram">Type of programs this question applies to.</typeparam>
            <typeparam name="TInput">Type of inputs to programs this question applies to.</typeparam>
            <typeparam name="TOutput">Type of outputs of programs this question applies to.</typeparam>
            <typeparam name="TOption">Type of the choices this question offers as options.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4.#ctor(Microsoft.ProgramSynthesis.Wrangling.Session.Session{`0,`1,`2})">
            <summary>
                Constructs a question.
            </summary>
            <param name="session">
                The session associated with this question which will get its constraints when
                <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4.RespondWithOption(System.Nullable{System.Int32})" /> is called.
            </param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4.Session">
            <summary>
                The session this question is associated with. Responding to this question will add constraints to this session.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4.Options">
            <summary>
                A list of multiple choice options.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4.Response">
            <summary>
                The response which was given to this question if it has been answered.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4.Canceled">
            <summary>
                True if this question has been cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4.RespondWithOption(System.Nullable{System.Int32})">
            <summary>
                Give an answer to this question using one of the provided options.
            </summary>
            <param name="optionIndex">Either an index into <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.IQuestion.Options" /> or <c>null</c> meaning "none of the above".</param>
            <returns><c>true</c> if the response was accepted and new constraints were inserted into the session.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4.Respond(System.Object)">
            <summary>
                Give an answer to this question which might not be one of the provided options.
            </summary>
            <param name="response">
                Either a value which makes sense in <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.IQuestion.Options" /> (although it might not actually be in
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.IQuestion.Options" />) or <c>null</c> meaning "none of the above".
            </param>
            <returns><c>true</c> if the response was accepted and new constraints were inserted into the session.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4.Cancel">
            <summary>
                Refuse to answer this question. Indicates the user is unable or unwilling to provide this information.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4.Microsoft#ProgramSynthesis#Wrangling#Session#IQuestion#Options">
            <summary>
                A list of multiple choice options.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4.Respond(`3)">
            <summary>
                Give an answer to this question which might not be one of the provided options.
            </summary>
            <param name="response">
                Either a value which makes sense in <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.IQuestion.Options" /> (although it might not actually be in
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.IQuestion.Options" />) or <c>null</c> meaning "none of the above".
            </param>
            <returns><c>true</c> if the response was accepted and new constraints were inserted into the session.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4.ConstraintsFor(`3)">
            <summary>
                The constraints that correspond to a given response to this question.
            </summary>
            <param name="response">
                A response to the question; usually, but not required to be, an element of
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Question`4.Options" />.
            </param>
            <returns>
                The meaning of the option in constraints or <c>null</c> if <paramref name="response" /> is not a meaningful
                response to the question.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode">
            <summary>
                Strategy to use for ranking programs. Examples include the most likely program and the most performant program.
                Note that all learned programs will satisfy the constraints; ranking is used to select one of the many programs
                satisfying the constraints.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode.MostLikely">
            <summary>
                Use heuristics to select the program which most likely matches the user's intent.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSessionJsonSerializerSettings`3">
            <summary>
                Serializer settings to be used with Json.Net when serializing or deserializing a NonInteractiveSession
                object. This is normally exposed through a static property on the Session class.
            </summary>
            <typeparam name="TProgram">Program type used by the session class.</typeparam>
            <typeparam name="TInput">Input type used by the session class.</typeparam>
            <typeparam name="TOutput">Output type used by the session class.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.NonInteractiveSessionJsonSerializerSettings`3.SessionTypes">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.SessionJsonSerializerSettings`3">
            <summary>
                Serializer settings to be used with Json.Net when serializing or deserializing a Session object.
                This is normally exposed through a static property on the Session class.
            </summary>
            <typeparam name="TProgram">Program type used by the session class.</typeparam>
            <typeparam name="TInput">Input type used by the session class.</typeparam>
            <typeparam name="TOutput">Output type used by the session class.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.SessionJsonSerializerSettings`3.Initialize">
            <summary>
                Must be called before passing an instance to Json.Net.  Should normally be called by a static property
                on the matching session class.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.SessionJsonSerializerSettings`3.SessionTypes">
            <summary>
                IEnumerable of .net types of session objects which are valid when serializing to or deserializing from
                json.  Derived types should override this property and add their corresponding session type.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.SessionJsonSerializerSettings`3.ValueTypes">
            <summary>
                IEnumerable of .net types of value types which are valid when serializing to or deserializing from json.
                Derived types should override this property and add any value types supported by their corresponding
                session type.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.SessionJsonSerializerSettings`3.ConstraintTypes">
            <summary>
                IEnumerable of .net types of constraint objects which are valid types when serializing to or
                deserializing from json.  Derived types should override this property if their corresponding sesison 
                type supports any additional constraint types beyond this list.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3">
            <summary>
                A learning session for learning a program for a specific task. Key concepts are: <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> which
                provide the inputs known for the program at learning time.
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" /> which specify what the program must satisfy. <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Learn(Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Threading.CancellationToken)" /> which
                learns a program. <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.GetTopKQuestionsAsync(System.Nullable{System.Int32},System.Nullable{System.Double},System.Collections.Generic.IEnumerable{System.Type},System.Threading.CancellationToken)" /> and <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.IQuestion" /> in general which allows for
                active learning; that is, instead of the user coming up with constraints,
                the session can request information the learning algorithm expects to be valuable.
            </summary>
            <typeparam name="TProgram">Type of programs this session learns.</typeparam>
            <typeparam name="TInput">Type of inputs to programs this session learns.</typeparam>
            <typeparam name="TOutput">Type of outputs of programs this session learns.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.JsonSerializerSettings">
            <summary>
                Pass this property to json.net when serializing or deserializing a session object.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.JsonSerializerSettingsInstance">
            <summary>
                Provides instance access to the static property <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.JsonSerializerSettings" />; override in any subclass
                that has its own <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.JsonSerializerSettings" />.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3._backgroundTasks">
            <summary>
                The background tasks run by this session. Completed tasks may be cleared from this list.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3._conflicts">
            <summary>
                The <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Conflicts" /> between <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" />.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3._constraints">
            <summary>
                The constraints used for learning.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3._inputs">
            <summary>
                The inputs used for learning.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.JournalStorage">
            <summary>
                The backing store for the journal used for adaptive learning across sessions.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Culture">
            <summary>
                The <see cref="T:System.Globalization.CultureInfo" /> that learned programs will use. This may be used in learning to prefer certain date
                or number formats or other culture-specific settings. If not specified, <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
                is used by default.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.UseInputsInLearn">
            <summary>
                If <c>true</c> (default), then <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Learn(Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Threading.CancellationToken)" />, <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.LearnTopK(System.Int32,Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Threading.CancellationToken)" />, <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.LearnAll(System.Threading.CancellationToken)" />, and their
                async variants will use <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> when learning. Otherwise, other methods like
                <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.GetSignificantInputsAsync(System.Nullable{System.Double},System.Threading.CancellationToken)" /> may use
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> but explicitly learned programs will only use <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" />.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.DefaultConfidenceThreshold">
            <summary>
                The default value for <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.ConfidenceThreshold"/>. Empirically a good value.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.ConfidenceThreshold">
            <summary>
                The default confidence threshold for methods that take one. This is a value in the range [0,1] which represents the
                certainly level a computation should have for returning a result. That is at 0.95, methods will only return results
                that they are 95% confident should appear in the result set. This defaults to a sensible value so most clients
                should not need to modify this.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.CancellationTokenSource">
            <summary>
                The <see cref="T:System.Threading.CancellationTokenSource" /> for background tasks started by this session.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.AllowBackgroundComputations">
            <summary>
                If <c>true</c>, some operations may spawn background tasks, otherwise only the tasks requested will be run. These
                background tasks will make interactive uses of the session more responsive. Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.BackgroundTasks">
            <summary>
                The currently running background tasks.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Logger">
            <summary>
                Telemetry logger.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs">
            <summary>
                All known inputs. Used when learning programs to prefer programs that work on these inputs.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.RankingMode">
            <summary>
                Default <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.RankingMode" /> for Learn() calls.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints">
            <summary>
                Constraints to define what programs are valid to be learned.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Conflicts">
            <summary>
                The <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Conflicts" /> among <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" /> which make learning impossible. If this is non-empty
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.CanLearn" /> will be false.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.CanLearn">
            <summary>
                False if learning will definitely not return any programs due to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Conflicts" /> being non-empty.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.SetLogger(Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger)">
            <summary>
                Set the telemetry logger implementation.
            </summary>
            <param name="logger">
                Implementation of ILogger to use for telemetry.  Null is allowed.  If supplied, it turns off logging.
            </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.CancelAllBackgroundTasks">
            <summary>
                Cancel all currently running background tasks. Future method calls may start new background tasks.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.RunBackgroundTask(System.Action)">
            <summary>
                Run a task in the background if <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.AllowBackgroundComputations" />.
            </summary>
            <param name="action">Task to run.</param>
            <returns>True if the task is scheduled to run or false if it will not be run.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.RunTaskEventually(System.Action)">
            <summary>
                Run a task either in the background if <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.AllowBackgroundComputations" /> or on the same thread.
            </summary>
            <param name="action">Task to run.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.AddConstraints(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`1,`2}})">
            <summary>
                Add <paramref name="constraints" /> to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" />.
            </summary>
            <param name="constraints">New constraints for programs learned using future <c>.Learn()</c> calls.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.RemoveConstraints(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`1,`2}})">
            <summary>
                Remove <paramref name="constraints" /> from <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" />.
            </summary>
            <param name="constraints">Constraints to not use for programs learned using future <c>.Learn()</c> calls.</param>
            <returns>True if <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" /> was changed.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.RemoveAllConstraints">
            <summary>
                Reset <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" /> to an empty set.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.UpdateConflicts(System.Object,Microsoft.ProgramSynthesis.Utils.NotifyCollectionChangedEventArgs{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`1,`2}})">
            <summary>
                Update conflicts in response to the constraints being changed.
            </summary>
            <param name="sender">Ignored.</param>
            <param name="args">How the set of constraints changed.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.AddInputs(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                Add <paramref name="inputs" /> to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" />, the set of known inputs.
            </summary>
            <param name="inputs">New inputs to use when learning.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.RemoveInputs(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                Remove <paramref name="inputs" /> from <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" />, the set of known inputs.
            </summary>
            <param name="inputs">Inputs to not use when learning.</param>
            <returns>True if <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> was changed.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.RemoveAllInputs">
            <summary>
                Reset <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> to an empty set.
            </summary>
        </member>
        <member name="E:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.InputsChanged">
            <summary>
                Event fired after the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> collection is modified.
            </summary>
        </member>
        <member name="E:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.ConstraintsChanged">
            <summary>
                Event fired after the <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" /> collection is modified.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.AddInputs(`1[])">
            <summary>
                Add <paramref name="inputs" /> to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" />, the set of known inputs.
            </summary>
            <param name="inputs">New inputs to use when learning.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.RemoveInputs(`1[])">
            <summary>
                Remove <paramref name="inputs" /> from <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" />, the set of known inputs.
            </summary>
            <param name="inputs">Inputs to not use when learning.</param>
            <returns>True if <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> was changed.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.AddConstraints(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`1,`2}[])">
            <summary>
                Add <paramref name="constraints" /> to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" />.
            </summary>
            <param name="constraints">New constraints for programs learned using future <c>.Learn()</c> calls.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.RemoveConstraints(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`1,`2}[])">
            <summary>
                Remove <paramref name="constraints" /> from <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" />.
            </summary>
            <param name="constraints">Constraints to not use for programs learned using future <c>.Learn()</c> calls.</param>
            <returns>True if <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" /> was changed.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.BuildLearnProgramRequest(System.Nullable{System.Boolean})">
            <summary>
                Build an immutable object containing the current information needed for learning a program.
            </summary>
            <param name="useInputsInLearn">
                If <c>true</c> (defaults to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.UseInputsInLearn" />), <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> will
                be included in the <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest`3" />; otherwise, only
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" /> will be included.
            </param>
            <returns>An immutable object wrapping the current values of <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> and <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" />.</returns>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.LoggingTypeName">
            <summary>
                Identifier to use for the kind of session this is when logging. Usually just the name of the DSL like
                "Transformation.Text" or "Extraction.Web".
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.LearnTopKCached(Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest{`0,`1,`2},Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Override in subclasses to implement learning of the top-<paramref name="k" /> programs.
            </summary>
            <param name="request">Inputs and constraints to use when learning.</param>
            <param name="rankingMode">How the programs should be ranked.</param>
            <param name="k">
                Minimum number of programs to learn if possible. May only return fewer programs if all programs are
                returned.
            </param>
            <param name="cancel">Cancellation token.</param>
            <returns>The top-<see cref="!:k" /> (by <paramref name="rankingMode" />) programs satisfying <paramref name="request" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Learn(Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Threading.CancellationToken)">
            <summary>
                Learns the top program.
            </summary>
            <param name="rankingMode">What "top" means.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>The top program or null if no program can be learned.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.LearnAsync(Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Threading.CancellationToken)">
            <summary>
                Learns the top program. This runs a task on a separate thread after capturing the current <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" />.
            </summary>
            <param name="rankingMode">What "top" means.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>The top program or null if no program can be learned.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.LearnTopK(System.Int32,Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Threading.CancellationToken)">
            <summary>
                Learns the top-<paramref name="k" /> programs.
            </summary>
            <param name="k">
                Minimum number of programs to learn if possible. May only return fewer programs if all programs are
                returned.
            </param>
            <param name="rankingMode">How the programs should be ranked.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>
                The top-<paramref name="k" /> programs (according to <paramref name="rankingMode" />). May contain fewer than
                <paramref name="k" /> programs only if there do not exist <paramref name="k" /> programs that satisfy the
                constraints.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.LearnTopKAsync(System.Int32,Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Threading.CancellationToken)">
            <summary>
                Learns the top-<paramref name="k" /> programs. This runs a task on a separate thread after capturing the current
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> and <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" />.
            </summary>
            <param name="k">
                Minimum number of programs to learn if possible. May only return fewer programs if all programs are
                returned.
            </param>
            <param name="rankingMode">How the programs should be ranked.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>
                The top-<paramref name="k" /> programs (according to <paramref name="rankingMode" />). May contain fewer than
                <paramref name="k" /> programs only if there do not exist <paramref name="k" /> programs that satisfy the
                constraints.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.LearnAllCached(Microsoft.ProgramSynthesis.Wrangling.Session.LearnProgramRequest{`0,`1,`2},System.Threading.CancellationToken)">
            <summary>
                Override in subclasses to implement learning of the entire VSA.
            </summary>
            <param name="request">Inputs and constraints to use when learning.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>All programs satisfying <paramref name="request" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.LearnAll(System.Threading.CancellationToken)">
            <summary>
                Learns all programs satisfying the constraints.
            </summary>
            <param name="cancel">Cancellation token.</param>
            <returns>
                All programs satisfying the constraints. May be <c>null</c> or empty if no programs satisfy the constraints.
                Note this collection may be too large to enumerate.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.LearnAllAsync(System.Threading.CancellationToken)">
            <summary>
                Learns all programs satisfying the constraints. This runs a task on a separate thread after capturing the current
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> and <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" />.
            </summary>
            <param name="cancel">Cancellation token.</param>
            <returns>
                All programs satisfying the constraints. May be <c>null</c> or empty if no programs satisfy the constraints.
                Note this collection may be too large to enumerate.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.GetTopKQuestionsAsync(System.Nullable{System.Int32},System.Nullable{System.Double},System.Collections.Generic.IEnumerable{System.Type},System.Threading.CancellationToken)">
            <summary>
                Gets the top questions to ask the user, if any. Either <paramref name="k" /> or
                <paramref name="confidenceThreshold" /> must be specified.
            </summary>
            <param name="k">An optional maximum number of questions to return.</param>
            <param name="confidenceThreshold">An optional minimum confidence for questions to be returned.</param>
            <param name="allowedTypes">
                An optional set of types of questions to return. If <c>null</c>, all types will be
                returned.
            </param>
            <param name="cancel">Cancellation token.</param>
            <returns>A ranked list of questions to ask the user to improve the generated program.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.GetSignificantInputClustersAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
                Computes a partition of a subset of <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> such that including an
                example for any one input of each subset in the partition is sufficient for future learning. Enough representative
                inputs should be selected such that all of the patterns are present without keeping all of the inputs. This can be
                used to make a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3" /> smaller for saving and later reloading and/or to
                present those inputs to the user to increase their confidence that the learned program is correct.
            </summary>
            <param name="confidenceThreshold">
                A number in [0,1] representing how confident the algorithm should be in the inputs
                it selects where higher thresholds correspond to more certain that the input is needed and therefore fewer
                inputs. A threshold of 1 means to only include inputs when completely certain.
            </param>
            <param name="cancel">Cancellation token.</param>
            <returns>
                A list of disjoint subsets of <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> paired with confidence scores sorted in descending order by
                confidence (higher confidence values mean the user should look at those inputs first) or <c>null</c> if unable to
                select inputs for any reason. Only one input from each subset should be shown to the user, but which input to
                select is left up to the client of this API.
            </returns>
            <seealso cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.GetSignificantInputsAsync(System.Nullable{System.Double},System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.ComputeTopKOutputsAsync(`1,System.Int32,Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Nullable{System.Double},System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.GetSignificantInputsAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
                Computes a subset of <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Inputs" /> which is sufficient for future
                learning. Enough representative inputs should be selected such that all of the patterns are present without keeping
                all of the inputs. This can be used to make a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3" /> smaller for saving
                and later reloading and/or to present those inputs to the user to increase their confidence that the learned
                program is correct.
            </summary>
            <param name="confidenceThreshold">
                A number in [0,1] representing how confident the algorithm should be in the inputs
                it selects where higher thresholds correspond to more certain that the input is needed and therefore fewer
                inputs. A threshold of 1 means to only include inputs when completely certain.
            </param>
            <param name="cancel">Cancellation token.</param>
            <returns>
                A list of inputs paired with confidence scores sorted in descending order by confidence (higher confidence values
                mean the user should look at those inputs first) or <c>null</c> if unable to select inputs for any reason.
            </returns>
            <seealso cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.GetSignificantInputClustersAsync(System.Nullable{System.Double},System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.ComputeTopKOutputsAsync(`1,System.Int32,Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Nullable{System.Double},System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.ComputeTopKOutputsAsync(`1,System.Int32,Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
                Compute the top-<paramref name="k" /> outputs for <paramref name="input" /> of programs that satisfy
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Constraints" />. This differs from taking the outputs of the top-<paramref name="k" /> programs from
                <see cref="M:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.LearnTopKAsync(System.Int32,Microsoft.ProgramSynthesis.Wrangling.Session.RankingMode,System.Threading.CancellationToken)" /> in two ways: (1) more than <paramref name="k" /> programs are learned and only
                <em>distinct</em> outputs are returned, and (2) the <paramref name="confidenceThreshold" /> (defaults to
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.ConfidenceThreshold" />) is used to discard programs that are much worse than the best program.
            </summary>
            <param name="input">Input to give outputs for.</param>
            <param name="k">How many outputs to attempt to generate. Will never generate more, but may generate fewer.</param>
            <param name="rankingMode">How the programs should be ranked.</param>
            <param name="confidenceThreshold">
                Optional value in [0,1] used to limit outputs to those likely to be useful. A value
                of 1 would mean to only return outputs which are tied for the best.
            </param>
            <param name="cancel">Cancellation token.</param>
            <returns>Up to <paramref name="k" /> of the best outputs for <paramref name="input" /> in ranked order.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.IProgramSetWrapper">
            <summary>
                Gives access to the programs in a VSA as <typeparamref name="TProgram" />s. This wraps a <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.IProgramSetWrapper.ProgramSet" />
                object providing access to its <see cref="T:Microsoft.ProgramSynthesis.AST.ProgramNode" />s as more usable <typeparamref name="TProgram" />s.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.IProgramSetWrapper.RealizedPrograms">
            <summary>
                The programs in this program set. Note that this may contain a very large number of programs (possibly many
                trillions), so enumerating the entire list may not be possible.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.IProgramSetWrapper.ProgramSet">
            <summary>
                The underlying VSA (<see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.IProgramSetWrapper.ProgramSet" />).
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.SignificantInput`1">
            <summary>
                An input along with a confidence value (0-1) that that input is worth letting the user know about.
            </summary>
            <typeparam name="TInput">Type of <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.SignificantInput`1.Input"/>.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.SignificantInput`1.#ctor(System.Double,`0)">
            <summary>
                Constructs a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.SignificantInput`1"/>.
            </summary>
            <param name="confidence">The confidence in [0,1] that this input is significant.</param>
            <param name="input">The input.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.SignificantInput`1.Confidence">
            <summary>
                A confidence value in the range [0,1] where greater values mean higher confidence that this input should be shown
                to the user.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.SignificantInput`1.Input">
            <summary>
                This input.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.Session.SignificantInputCluster`1">
            <summary>
                A set of inputs that are similiar to each other along with a confidence value (0-1) that those inputs are worth
                letting the user know about.
            </summary>
            <typeparam name="TInput">Type of inputs being clustered.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.SignificantInputCluster`1.#ctor(System.Double,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
                Constructs a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.SignificantInputCluster`1"/>.
            </summary>
            <param name="confidence">The confidence in [0,1] that this cluster is significant.</param>
            <param name="inputs">The inputs in this cluster.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.SignificantInputCluster`1.Confidence">
            <summary>
                A confidence value in the range [0,1] where greater values mean higher confidence that this cluster should be shown
                to the user.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Wrangling.Session.SignificantInputCluster`1.Inputs">
            <summary>
                The inputs in this cluster.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.Session.Z3Resolution.Resolver(System.Object,System.ResolveEventArgs)">
            <summary>
                Attempts to load a platform-specific assembly from a platform-specific subdirectory
                (<c>x64</c> or <c>x86</c>) of the current assembly's location.
                Only fires for assemblies whose name starts with <see cref="F:Microsoft.ProgramSynthesis.Wrangling.Session.Z3Resolution.Z3DllName"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.TableProgram`1">
            <summary>
                A compound program that returns a table of multiple columns.
            </summary>
            <typeparam name="TRegion">The region of the field.</typeparam>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.TransformationProgram`3">
            <summary>
                A program which transforms values of type <typeparamref name="TInput" /> to values of type
                <typeparamref name="TOutput" />.
                The input and output types may be the same.
            </summary>
            <typeparam name="TProgram">The concrete class extending this.</typeparam>
            <typeparam name="TInput">The input type of the program.</typeparam>
            <typeparam name="TOutput">The output type of the program.</typeparam>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.TransformationProgram`3.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode,System.Double)">
            <summary>
                Constructs a transformation program wrapping <paramref name="programNode" /> with the score
                <paramref name="score" />.
            </summary>
            <param name="programNode">The program to wrap.</param>
            <param name="score">The ranking score of <paramref name="programNode" />.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.TransformationProgram`3.Run(`1)">
            <summary>
                Run this program to transform <paramref name="input" />.
            </summary>
            <param name="input">The input to be transformed.</param>
            <returns>The result of running the transformation program.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.UnknownType.Equals(Microsoft.ProgramSynthesis.Wrangling.UnknownType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.UnknownType.IsValidObject(Microsoft.ProgramSynthesis.Wrangling.ITypedValue)">
            <summary>
                Checks if an object is valid element of the given type.
            </summary>
            <param name="obj">Object to check.</param>
            <returns>True if object can be treated as a value of this type or false otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.UnknownType.IsAssignableFrom(Microsoft.ProgramSynthesis.Wrangling.IType)">
            <summary>
                Checks if this type is a superset of another type. That is, if true, then whenever <paramref name="other" />
                returns true for <see cref="M:Microsoft.ProgramSynthesis.Wrangling.IType.IsValidObject(Microsoft.ProgramSynthesis.Wrangling.ITypedValue)" /> so does this.
            </summary>
            <param name="other">Type to check if it can be used whenever this is expected.</param>
            <returns>True if <paramref name="other" /> is a subtype of this type.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.UnknownType.Equals(Microsoft.ProgramSynthesis.Wrangling.IType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.UnknownType.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Wrangling.UnknownType.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Wrangling.XmlSchemaPrintVisitor`3">
            <summary>
            SchemaPrintVisitor used to get <see cref="F:Microsoft.ProgramSynthesis.AST.ASTSerializationFormat.XML"/> representation of SchemaNode.
            </summary>
        </member>
    </members>
</doc>
