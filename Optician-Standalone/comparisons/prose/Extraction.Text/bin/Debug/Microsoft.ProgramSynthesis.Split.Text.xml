<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ProgramSynthesis.Split.Text</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ProgramSynthesis.Split.Text.NthExampleConstraint">
            <summary>
                Constraint which specifies that the nth split should have a given value on a given input string region.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.NthExampleConstraint.#ctor(System.String,System.Int32,System.String)">
            <summary>
                Constructs a constraint to use particular string delimiters when learning split programs.
            </summary>
            <param name="inputString">The input region</param>
            <param name="splitIndex">The split index for which the example is given</param>
            <param name="value">The example value</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.NthExampleConstraint.Valid(Microsoft.ProgramSynthesis.Program{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.NthExampleConstraint.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]})">
            <summary>
                Checks if these constraints are obviously not valid together.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if there is a conflict, false otherwise
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.NthExampleConstraint.Equals(Microsoft.ProgramSynthesis.Split.Text.NthExampleConstraint)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.NthExampleConstraint.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.NthExampleConstraint.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.NthExampleConstraint.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.Translation.Python.PythonModule.GenerateCode(System.String)">
            <summary>
                Generates code for all the functions that have been bound to a name in this module.
            </summary>
            <param name="headerModuleReference">
                A reference to the header module that the code in this module is dependent on.
            </param>
            <returns>A representation of the code for this module.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.Translation.Python.PythonModule.GenerateUnisolatedCode(System.String)">
            <summary>
                Generates unisolated code, i.e., code that executes/lives in the global namespace,
                provided subclasses override this method appropriately.
                The default behavior is to call <see cref="M:Microsoft.ProgramSynthesis.Translation.Module`1.GenerateCode(`0)" />.
            </summary>
            <param name="headerModuleReference">
                A reference to the header module that the code in this module is dependent on.
            </param>
            <returns>A representation of the code corresponding to this module.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Split.Text.Translation.Python.PythonTranslator">
            <summary>
                A Python translator for the Automatic Split DSL.
                Like <see cref="T:Microsoft.ProgramSynthesis.Translation.Python.PythonTranslator`3" />, this
                class is not thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.Translation.Python.PythonTranslator.GenerateHeaderModule(Microsoft.ProgramSynthesis.Split.Text.SplitProgram,System.String)">
            <summary>
                Generates a module containing the header (if any) for
                the given program <see cref="!:p" />.
                The header can include any definitions required for the generated
                program corresponding to <see cref="!:p" /> to execute.
            </summary>
            <param name="p">A generated program</param>
            <param name="headerModuleName">The name of the header module.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Translation.Module`1" /> which contains the definitions that all code generated by this translator can
                implicitly depend on.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.Translation.Python.PythonTranslator.GenerateOperatorApplication(System.String,System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Translation.SSARegister{System.String}})">
            <summary>
                Generates an application of the operator named <see cref="!:operatorName" />
                with <see cref="!:arguments" /> as its arguments.
            </summary>
            <param name="operatorName">The name of the operator which is to be applied</param>
            <param name="arguments">The arguments to the operator <see cref="!:operatorName" /></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.Translation.Python.PythonTranslator.CreateModule(System.String)">
            <summary>
                Creates a new module with the given name.
            </summary>
            <param name="moduleName">The name of the module to create.</param>
            <returns>A new <see cref="T:Microsoft.ProgramSynthesis.Translation.Module`1" /> named <see cref="!:moduleName" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.Translation.Python.PythonTranslator.GenerateLiteralRepresentation(System.Object,System.Type)">
            <summary>
                Generates the representation of the literal in the target language.
            </summary>
            <param name="literalValue">An <see cref="T:System.Object" /> representing the value of the literal.</param>
            <param name="literalType">The type of the literal.</param>
            <returns>
                A representation of <see cref="!:literalValue" /> interpreted as a value
                of the type <see cref="!:literalType" /> in the target language.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Split.Text.DelimiterStringsConstraint">
            <summary>
                Constraint which specifies delimiter strings to be used for learning.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.DelimiterStringsConstraint.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Constructs a constraint to use particular string delimiters when learning split programs.
            </summary>
            <param name="delimiterStrings">The delimiter strings to use</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.DelimiterStringsConstraint.Valid(Microsoft.ProgramSynthesis.Program{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.DelimiterStringsConstraint.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]})">
            <summary>
                Checks if these constraints are obviously not valid together.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if there is a conflict, false otherwise
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.DelimiterStringsConstraint.Equals(Microsoft.ProgramSynthesis.Split.Text.DelimiterStringsConstraint)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.DelimiterStringsConstraint.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.DelimiterStringsConstraint.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.DelimiterStringsConstraint.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Split.Text.FillStrategyConstraint">
            <summary>
                Constraint which specifies the fill strategy to use when the number of split cells is not equal to the number specified in the split program
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.FillStrategyConstraint.#ctor(Microsoft.ProgramSynthesis.Split.Text.Semantics.FillStrategy)">
            <summary>
                Constructs a constraint to use a particular fill strategy when learning programs.
            </summary>
            <param name="fillStrategy">The fill strategy to use</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.FillStrategyConstraint.Valid(Microsoft.ProgramSynthesis.Program{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.FillStrategyConstraint.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]})">
            <summary>
                Checks if these constraints are obviously not valid together.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                False as this constraint cannot conflict with any others.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.FillStrategyConstraint.Equals(Microsoft.ProgramSynthesis.Split.Text.FillStrategyConstraint)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.FillStrategyConstraint.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.FillStrategyConstraint.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.FillStrategyConstraint.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Split.Text.IncludeDelimitersInOutput">
            <summary>
                Constraint which indicates whether delimiter cells should be returned by a split program.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.IncludeDelimitersInOutput.#ctor(System.Boolean)">
            <summary>
                Constructs a constraint to include/exclude the delimiters.
            </summary>
            <param name="include">Indicates whether to include delimiters in program output</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Split.Text.IncludeDelimitersInOutput.IncludeDelimiters">
            <summary>
                Indicates if delimiters should be included in the output of the program.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.IncludeDelimitersInOutput.Valid(Microsoft.ProgramSynthesis.Program{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.IncludeDelimitersInOutput.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]})">
            <summary>
                Checks if these constraints are obviously not valid together.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.IncludeDelimitersInOutput.Equals(Microsoft.ProgramSynthesis.Split.Text.IncludeDelimitersInOutput)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.IncludeDelimitersInOutput.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.IncludeDelimitersInOutput.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.IncludeDelimitersInOutput.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Split.Text.SimpleDelimiter">
            <summary>
                Constraint which indicates whether simple single delimiter programs should be learnt.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SimpleDelimiter.Valid(Microsoft.ProgramSynthesis.Program{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SimpleDelimiter.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]})">
            <summary>
                Checks if these constraints are obviously not valid together.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                False as this constraint cannot conflict with any others.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SimpleDelimiter.Equals(Microsoft.ProgramSynthesis.Split.Text.SimpleDelimiter)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SimpleDelimiter.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SimpleDelimiter.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SimpleDelimiter.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Split.Text.Program">
                Currently not being used - to be incorporated in the SplitProgram class. 
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Split.Text.Program.ProgramNode">
            <summary>
                The <see cref="P:Microsoft.ProgramSynthesis.Split.Text.Program.ProgramNode" /> object which contains the actual JSON Transformation program.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Split.Text.Program.ScoreFeature">
            <summary>
                The feature used by default to rank programs.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.Program.Learn(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Learn top-ranked <see cref="T:Microsoft.ProgramSynthesis.Split.Text.Program" /> for a given set of input strings.
                In the case of a tie, only one result will be returned.
            </summary>
            <param name="examples">The set of input examples.</param>
            <param name="cancel">
                The token to monitor for cancellation requests. The default value is
                <see cref="P:System.Threading.CancellationToken.None" />.
            </param>
            <returns>The top-ranked <see cref="T:Microsoft.ProgramSynthesis.Split.Text.Program" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.Program.Learn(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion},System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Learn top-ranked <see cref="T:Microsoft.ProgramSynthesis.Split.Text.Program" /> for a given set of input <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" />s.
                In the case of a tie, only one result will be returned.
            </summary>
            <param name="examples">The set of input examples.</param>
            <param name="cancel">
                The token to monitor for cancellation requests. The default value is
                <see cref="P:System.Threading.CancellationToken.None" />.
            </param>
            <returns>The top-ranked <see cref="T:Microsoft.ProgramSynthesis.Split.Text.Program" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.Program.Run(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion)">
            <summary>
                Executes the program on an input <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" /> to obtain the output.
            </summary>
            <param name="input">The input token.</param>
            <returns>The result output.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.Program.Run(System.String)">
            <summary>
                Executes the program on an input string to obtain the output.
            </summary>
            <param name="input">The input token.</param>
            <returns>The result output.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.Program.Serialize">
            <summary>
                Serializes a program to a string that can be loaded using
                <see cref="M:Microsoft.ProgramSynthesis.Wrangling.IProgramLoader`3.Load(System.String,Microsoft.ProgramSynthesis.AST.ASTSerializationFormat)" />.
            </summary>
            <returns>A machine-readable string representation of this program.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.Program.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.Program.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.Program.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Split.Text.ProgramProperties">
            <summary>
                Stores the metadata of <see cref="T:Microsoft.ProgramSynthesis.Split.Text.SplitProgram" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.ProgramProperties.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructs new object.
            </summary>
            <param name="delimiter">The delimiter string if the program is simple, otherwise null.</param>
            <param name="columnCount"> The number of columns (excluding delimiters) in the program.</param>
            <param name="splitCount">The number of splits (including delimiters) in the program.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Split.Text.ProgramProperties.Delimiter">
            <summary>
                If this is a simple delimiter program, then return the delimiter string, otherwise null.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Split.Text.ProgramProperties.ColumnCount">
            <summary>
                The number of data columns (excluding delimiters).
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Split.Text.ProgramProperties.SplitCount">
            <summary>
                The number of split counts (both delimiters and columns).
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Split.Text.SplitProgramLearner">
            <summary>
                Class for learning <see cref="T:Microsoft.ProgramSynthesis.Split.Text.SplitProgram" />s.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Split.Text.SplitProgramLearner.ScoreFeature">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.FeatureInfo" /> used for ranking the top-k programs in
                <see cref="M:Microsoft.ProgramSynthesis.Wrangling.ProgramLearner`3.LearnTopK(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`1,`2}},System.Int32,System.Collections.Generic.IEnumerable{`1},System.Nullable{System.Threading.CancellationToken})" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SplitProgramLearner.LearnTopK(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]}},System.Int32,System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion},System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Learn the top <paramref name="k" /> programs that satisfy the given constraints. 
                Note: this method currently does not support non-empty output constraints.
            </summary>
            <param name="constraints">The output constraints</param>
            <param name="k">The number of programs to learn</param>
            <param name="additionalInputs">The additional inputs the programs can be executed</param>
            <param name="cancel">Cancellation token</param>
            <returns>The top k learned programs</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SplitProgramLearner.LearnAll(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]}},System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion},System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Learn the set of programs that satisfy the given constraints. 
                Note: this method currently does not support non-empty output constraints.
            </summary>
            <param name="constraints">The output constraints</param>
            <param name="additionalInputs">The additional inputs the programs can be executed</param>
            <param name="cancel">Cancellation token</param>
            <returns>The set of programs learnt</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SplitProgramLearner.LearnProgram(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion},System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Learn the highest ranked program from the given inputs.
            </summary>
            <param name="inputs">The inputs from which the program is to be learnt</param>
            <param name="cancel">Cancellation token</param>
            <returns>The top learnt program (or null if no program is learnt)</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SplitProgramLearner.LearnTableExtraction(System.String[],System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell[]}},System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
                Learn a table from the given list of rows.
            </summary>
            <param name="rows">The string values of all the rows</param>
            <param name="constraints">Constraints on the learning</param>
            <param name="includeDelimiters">Indicates if delimiter columns should be included in the output.</param>
            <param name="learnSimpleDelimiters">Indicates if simple delimiter programs are to be learnt.</param>
            <param name="showSigInputs">Indicates if significant inputs are to be included before the actual results</param>
            <param name="numLearningInputs">The number of inputs to use in learning, or all of this is -1</param>
            <returns>The list of learnt columns, where each column is a list of the column values for each row.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Split.Text.SplitProgram">
            <summary>
                The program for splitting a <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" /> into a list of <see cref="T:Microsoft.ProgramSynthesis.Split.Text.Semantics.SplitCell" />s.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SplitProgram.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode)">
            <summary>
                Constructs a split program wrapping <paramref name="programNode" />
            </summary>
            <param name="programNode">The program to wrap.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Split.Text.SplitProgram.Properties">
            <summary>
                The properties of the program.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SplitProgram.Run(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion)">
            <summary>
                Run this program to transform <paramref name="input" />.
            </summary>
            <param name="input">The input to be transformed.</param>
            <returns>The result of running the transformation program.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Split.Text.SplitProgramLoader">
            <summary>
                Factory class for loading serialized <see cref="T:Microsoft.ProgramSynthesis.Split.Text.SplitProgram" />s.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Split.Text.SplitProgramLoader.Instance">
            <summary>
                Singleton instance of <see cref="T:Microsoft.ProgramSynthesis.Split.Text.SplitProgramLoader" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SplitProgramLoader.Load(System.String,Microsoft.ProgramSynthesis.AST.ASTSerializationFormat)">
            <summary>
                Loads a <see cref="T:Microsoft.ProgramSynthesis.Split.Text.SplitProgram" /> which was serialized using
                <see cref="M:Microsoft.ProgramSynthesis.Program`2.Serialize(Microsoft.ProgramSynthesis.AST.ASTSerializationFormat)" />.
            </summary>
            <param name="serializedProgram">
                A string generated by <see cref="M:Microsoft.ProgramSynthesis.Program`2.Serialize(Microsoft.ProgramSynthesis.AST.ASTSerializationFormat)" /> representing a
                <see cref="T:Microsoft.ProgramSynthesis.Split.Text.Program" />.
            </param>
            <param name="serializationFormat">The serialization format of <paramref name="serializedProgram" />.</param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Split.Text.Program" /> equivalent to the one converted to the input string.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SplitProgramLoader.Create(Microsoft.ProgramSynthesis.AST.ProgramNode)">
            <summary>
                Wraps a <see cref="T:Microsoft.ProgramSynthesis.AST.ProgramNode" /> in a <see cref="T:Microsoft.ProgramSynthesis.Split.Text.SplitProgram" />. <paramref name="program" /> must be a
                valid program for a <see cref="T:Microsoft.ProgramSynthesis.Split.Text.SplitProgram" />.
            </summary>
            <param name="program">The code of the program.</param>
            <returns>A strongly-typed <see cref="T:Microsoft.ProgramSynthesis.Split.Text.SplitProgram" /> object wrapping <paramref name="program" />.</returns>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Split.Text.SplitSessionJsonSerializerSettings.SessionTypes">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Split.Text.SplitSessionJsonSerializerSettings.ConstraintTypes">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Split.Text.SplitSession">
            <summary>
                The session for performing a split operation. Note: currently the learning is based only on inputs, and various
                output constraints are planned to be supported in the future.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SplitSession.#ctor(Microsoft.ProgramSynthesis.Wrangling.Session.IJournalStorage,System.Globalization.CultureInfo,Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger)">
            <summary>
                Creates a new session object with no inputs.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Split.Text.SplitSession.JsonSerializerSettings">
            <summary>
                Pass this property to json.net when serializing or deserializing a session object.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Split.Text.SplitSession.JsonSerializerSettingsInstance">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SplitSession.CreateStringRegion(System.String)">
            <summary>
                Creates a <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" /> for a string.
            </summary>
            <param name="s">The input string.</param>
            <returns>The corresponding <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SplitSession.LearnOutputs">
            <summary>
                Perform the splitting on the current inputs.
            </summary>
            <returns>The result of the splitting.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SplitSession.GetSignificantInputsAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
                Returns a subset of inputs that represent mutually distinct formats found among all inputs
            </summary>
            <param name="confidenceThreshold">
                A number in [0,1] representing how confident the algorithm should be in the inputs
                it selects where higher thresholds correspond to more certain that the input is needed and therefore fewer
                inputs. A threshold of 1 means to only include inputs when completely certain.
            </param>
            <param name="cancel">Cancellation token.</param>
            <returns>
                A list of inputs paired with confidence scores sorted in descending order by confidence (higher confidence values
                mean the user should look at those inputs first) or <c>null</c> if unable to select inputs for any reason.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Split.Text.SplitSession.GetSignificantInputClustersAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
                Returns a partition of a subset of inputs that represent mutually distinct formats found among all inputs
            </summary>
            <param name="confidenceThreshold">
                A number in [0,1] representing how confident the algorithm should be in the inputs
                it selects where higher thresholds correspond to more certain that the input is needed and therefore fewer
                inputs. A threshold of 1 means to only include inputs when completely certain.
            </param>
            <param name="cancel">Cancellation token.</param>
            <returns>
                A list of list of inputs paired with confidence scores sorted in descending order by confidence (higher confidence
                values mean the user should look at those inputs first) or <c>null</c> if unable to select inputs for any reason.
            </returns>
        </member>
    </members>
</doc>
