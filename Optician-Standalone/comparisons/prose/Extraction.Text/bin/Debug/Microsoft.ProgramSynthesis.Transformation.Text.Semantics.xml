<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ProgramSynthesis.Transformation.Text.Semantics</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor">
            <summary>
                An <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor" /> whose extraction logic is specified by a single regular expression.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.Regex">
            <summary>
                The <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.Regex" /> object characterizing the entity/concept to be extracted.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.Extract(System.String)">
            <summary>
                Extract all instances of the concept/entity that are present in <paramref name="s" />.
            </summary>
            <param name="s">The input <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> from which the concept/entity is to be extracted from.</param>
            <returns>
                A sequence of start and end positions, one for each instance of the entity/concept extracted from
                <paramref name="s" />.
                The semantics of each <see cref="T:System.Tuple" /> in the result is that the first element defines the start of the
                instance of the entity/concept, and
                the second element denotes the end (not inclusive) of the instance of the entity/concept.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.BindTranslation``1(Microsoft.ProgramSynthesis.Translation.Module{``0},System.String,Microsoft.ProgramSynthesis.Translation.Target,System.String)">
            <summary>
                Translates this extractor into a function in the target language and binds the function
                to the specified name in the module.
            </summary>
            <param name="module">The module where the translation resides.</param>
            <param name="name">The name of the translated function.</param>
            <param name="translationTarget">The target language for the translation.</param>
            <param name="headerModuleName">The name of the header module used in this translation.</param>
            <typeparam name="T">A type that can represent programs in the target language.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.Score">
            <summary>
                The score for this extractor. Higher scores imply better extractors.
                This value is expected to be set in the range [0, 1].
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.RenderXMLImpl">
            <summary>
                Serializes this object into an <see cref="T:System.Xml.Linq.XElement" />.
            </summary>
            <returns>An <see cref="T:System.Xml.Linq.XElement" /> representing this object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.RenderHumanReadableImpl">
            <summary>
                Serializes this object into a human readable string
            </summary>
            <returns>A human readable string serialization of this object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.#ctor(System.String,System.Double)">
            <summary>
                Constructor.
            </summary>
            <param name="regexString">The regular expression string that characterizes the entity to be extracted.</param>
            <param name="score">The score for this extractor. This must be between 0.0 and 1.0.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.#ctor(System.Text.RegularExpressions.Regex,System.Double)">
            <summary>
                Constructor.
            </summary>
            <param name="regex">The <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.Regex" /> object that characterizes the entity to be extracted.</param>
            <param name="score">The score for this extractor. This must be between 0.0 and 1.0.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.TryParseXML(System.Xml.Linq.XElement)">
            <summary>
                Parses an XML representation of an object of this class.
            </summary>
            <param name="literal">The <see cref="T:System.Xml.Linq.XElement" /> corresponding to a serialization of this class.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor" /> corresponding to the serialized representation in
                <paramref name="literal" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor.TryParseHumanReadable(System.String)">
            <summary>
                Parses a human readable representation of an object of this class.
            </summary>
            <param name="literal">The human readable representation of an object of this class.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.RegexBasedExtractor" /> corresponding to the serialized version of the object in
                <paramref name="literal" />.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor">
            <summary>
                An abstract class for pluggable extractors into Transformation.Text
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor.Extract(System.String)">
            <summary>
                Extract all instances of the concept/entity that are present in <paramref name="s" />.
            </summary>
            <param name="s">The input <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> from which the concept/entity is to be extracted from.</param>
            <returns>
                A sequence of start and end positions, one for each instance of the entity/concept extracted from
                <paramref name="s" />.
                The semantics of each <see cref="T:System.Tuple" /> in the result is that the first element defines the start of the
                instance of the entity/concept, and
                the second element denotes the end (not inclusive) of the instance of the entity/concept.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor.BindTranslation``1(Microsoft.ProgramSynthesis.Translation.Module{``0},System.String,Microsoft.ProgramSynthesis.Translation.Target,System.String)">
            <summary>
                Translates this extractor into a function in the target language and binds the function
                to the specified name in the module.
            </summary>
            <param name="module">The module where the translation resides.</param>
            <param name="name">The name of the translated function.</param>
            <param name="translationTarget">The target language for the translation.</param>
            <param name="headerModuleName">The name of the header module used in this translation.</param>
            <typeparam name="T">A type that can represent programs in the target language.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor.Score">
            <summary>
                The score for this extractor. Higher scores imply better extractors.
                This value is expected to be set in the range [0, 1].
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor.RenderXMLImpl">
            <summary>
                Serializes this object into an <see cref="T:System.Xml.Linq.XElement" />.
            </summary>
            <returns>An <see cref="T:System.Xml.Linq.XElement" /> representing this object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor.RenderHumanReadableImpl">
            <summary>
                Serializes this object into a human readable string
            </summary>
            <returns>A human readable string serialization of this object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor.RenderHumanReadable">
            <summary>
                Render this as a human-readable string representation. This should be parseable by the corresponding
                <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseHumanReadableString" /> method.
            </summary>
            <returns>A compact string representation of this object that is easy for a human to understand.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor.RenderXML">
            <summary>
                Render this as XML. This should be parseable by the corresponding <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseXML" />
                method.
            </summary>
            <returns>An XML representation of this object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec">
            <summary>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec" /> specifies a rounding operation. A rounding operation is specified by a set of
                equidistant dates/times defined by a <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.Zero" /> point and a distance <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.Delta" /> in units
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.Unit"/>. Of the two numbers closest to the number being rounded, which one is selected is determined by
                the <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.Mode" />.
            </summary>
            <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.RoundPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec)" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.#ctor(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,System.UInt32,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode,System.Nullable{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart},System.UInt32)">
            <summary>
                Constructs a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec" /> specifying a rounding operation.
            </summary>
            <param name="zero">
                The lower bound of the first range that starts on or after the absolute zero point
                (e.g,. for the ranges 11PM-1AM, 1AM-3AM, etc., it would be 1AM).
            </param>
            <param name="delta">The increment between dates/times to round to.</param>
            <param name="unit">The unit of the <paramref name="delta"/>.</param>
            <param name="mode">
                Whether rounding is <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Up" />, <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.UpOrNext" />, or
                <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Down" />
            </param>
            <param name="upperExcludePart">
                The unit of the amount to exclude in the display of the upper bound of each range.
            </param>
            <param name="upperExcludeAmount">
                The amount to exclude in the display of the upper bound of each range.  The unit of this amount
                is given by <paramref name="upperExcludePart"/>.
            </param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.Zero">
            <summary>
                The zero-point of the set of numbers to round to. Numbers are rounded to some multiple of <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.Delta" /> away
                from this value.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.Delta">
            <summary>
                The increment between numbers to round to. Numbers are rounded to some multiple of this value away from
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.Zero" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.Unit">
            <summary>
                The unit of measurement for the <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.Delta"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.Mode">
            <summary>
                Determines which of the two closest numbers to round to. May be <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Up" />,
                <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.UpOrNext" />, or <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Down" />
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.UpperExcludePart">
            <summary>
                The unit of the amount to exclude in the display of the upper bound of each range.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.UpperExcludeAmount">
            <summary>
                The amount to exclude in the display of the upper bound of each range.  The unit of this amount
                is given by <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.UpperExcludePart"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.RenderHumanReadable">
            <summary>
                Render this as a human-readable string representation. This should be parseable by the corresponding
                <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseHumanReadableString" /> method.
            </summary>
            <returns>A compact string representation of this object that is easy for a human to understand.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.RenderXML">
            <summary>
                Render this as XML. This should be parseable by the corresponding <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseXML" />
                method.
            </summary>
            <returns>An XML representation of this object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.ConstantDateTimeFormatPart">
            <summary>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart"/> which is always exactly the same string.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.ConstantDateTimeFormatPart.#ctor(System.String)">
            <summary>
                Creates a new <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.ConstantDateTimeFormatPart" />.
            </summary>
            <param name="constant">The string this must match exactly.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.ConstantDateTimeFormatPart.#ctor(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion)">
            <summary>
                Creates a new <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.ConstantDateTimeFormatPart" />.
            </summary>
            <param name="constant">The string this must match exactly.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.ConstantDateTimeFormatPart.ConstantString">
            <summary>
                The string this matches.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.ConstantDateTimeFormatPart.ToString(System.Int32)">
            <summary>
                Convert a value to a string according to this date format.
                The inverse of <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.ParseFullString(System.String)" />
            </summary>
            <param name="value">Ignored.</param>
            <returns><see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.ConstantDateTimeFormatPart.ConstantString" /></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.ConstantDateTimeFormatPart.ParseNext(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion)">
            <summary>
                Parse a substring of <paramref name="sr" /> starting at the beginning.
            </summary>
            <param name="sr"></param>
            <returns>A tuple of the substring used and the value parsed.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.ConstantDateTimeFormatPart.FromConstantFormat(System.String)">
            <summary>
                Parses a datetime format string which matches a constant string.
            </summary>
            <param name="format">A constant datetime format, possibly with escaping to ensure it's interpreted as a constant.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.ConstantDateTimeFormatPart" /> that corresponds to the same constant string as
                <paramref name="format" />.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache">
            <summary>
                Cache for datetime parsing operations, similar to (and dependent on) <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringLearningCache" />.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache.StaticCaches">
            <summary>
                Cache of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache" /> objects indexed by the <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.S" /> of the
                <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" /> it is a cache for.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache.Formats">
            <summary>
                Atomic formats used to build up larger format strings. Cached like the static tokens in
                <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringLearningCache" />.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache._allFormatMatches">
            <summary>
                Memoization dictionary for <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache.AllFormatMatchesFor(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.LearningCacheSubstring,System.Boolean)" />.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache._cache">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringLearningCache" /> for the <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" /> this caches information on. All access
                to the string is done through this field.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache._dtMatches">
            <summary>
                Stores all <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" />es of a given <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" />.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache._endingTokenMatches">
            <summary>
                Stores all <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" />es that end at a position.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache._startingTokenMatches">
            <summary>
                Stores all <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" />es that start at a position.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache._initialized">
            <summary>
                True once <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache.Formats" /> have been loaded into the matches dictionaries.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache.#ctor(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringLearningCache)">
            <summary>
                Construct a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache" /> for the same string as <paramref name="cache" />.
            </summary>
            <param name="cache">The <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringLearningCache" /> to use when learning dates formats.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache.For(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.LearningCacheSubstring)">
            <summary>
                Gets the <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache" /> for <paramref name="sr" />.
            </summary>
            <param name="sr"><see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" /> to get date format information on.</param>
            <returns>The cached <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache" /> if available or a new one otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache.Initialize">
            <summary>
                Initializes the <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache" /> by loading all of the <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache.Formats" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache.AddDateFormat(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)">
            <summary>
                Finds all matches of <paramref name="format" /> in the string and records them.
            </summary>
            <param name="format"><see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> to cache information on.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache.Parse(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,Microsoft.ProgramSynthesis.Extraction.Text.Semantics.LearningCacheSubstring)">
            <summary>
                Parses <paramref name="sr" /> according to <paramref name="format" /> if possible. This function is memoized so
                repeat calls with the same <paramref name="format" /> on regions of the same string will be fast.
            </summary>
            <param name="format"><see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> to use.</param>
            <param name="sr"><see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" /> to parse.</param>
            <returns>
                The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" /> with the information on the parse or <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" />
                if <paramref name="sr" /> could not be parsed with <paramref name="format" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache.AllFormatMatchesFor(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.LearningCacheSubstring,System.Boolean)">
            <summary>
                Finds all matches of <paramref name="sr" /> for any <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> which is "reasonable" according
                to <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.Heuristics" />. This function is memoized so repeat calls on regions of the same string are fast.
            </summary>
            <param name="sr"><see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" /> to look for datetimes in.</param>
            <param name="mustBeFullLength">
                If true, matches must match all of <paramref name="sr" />, otherwise they may also match
                substrings of <paramref name="sr" />.
            </param>
            <returns>
                All <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" />es that could possibly correspond to information about datetimes in
                <paramref name="sr" /> according to <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.Heuristics" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache.AllReasonableCombinedMatches(System.Collections.Generic.IEnumerable{System.Collections.Generic.ICollection{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch}})">
            <summary>
                Uses <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.Heuristics" /> to determine which of the
                <see cref="M:Microsoft.ProgramSynthesis.Utils.CollectionUtils.CartesianProduct``3(System.Collections.Generic.IDictionary{``0,``1})" /> of <paramref name="matchParts" /> are
                reasonable <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" />es.
            </summary>
            <param name="matchParts">
                All pieces of matches to try to combine. Matches in the same list are overlapping and
                therefore could never be used together. The lists are in the order of the matches in the string.
            </param>
            <returns>All matches made of pieces from <paramref name="matchParts" /> which satisfy <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.Heuristics" />.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat">
            <summary>
                Wrapper for a datetime format string. Supports more operations than the .NET <see cref="T:System.DateTime" /> type,
                particularly involving information that doesn't form a complete datetime.
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" />s are made out of a sequence of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" />s.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart})">
            <summary>
                Constructs a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> from a sequence of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" />s.
            </summary>
            <param name="formatParts">The parts that make up this format.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.#ctor(System.String)">
            <summary>
                Constructs a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> by parsing a format string into <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" />s.
            </summary>
            <param name="format">Format string to parse using <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.ParseFormatString(System.String)" />.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.FormatParts">
            <summary>
                The parts this format is made out of.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.FormatString">
            <summary>
                The format string this wraps in the format used by <see cref="M:System.DateTime.ToString" /> and
                <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.PosixFormatString">
            <summary>
                The format string this wraps in the format used by POSIX <tt>strftime</tt>.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.MatchedPartsMask">
            <summary>
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.MatchedParts"/> as a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.MatchedParts">
            <summary>
                Which parts of a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> this matches.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.Token">
            <summary>
                The token matches of this appear within, or null if matches are not limited to single token. Used to avoid looking
                elsewhere in the string. This may match a substring of that token.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.IsNumeric">
            <summary>
                Does this format only match numbers?
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.RenderHumanReadable">
            <summary>
                Render this as a human-readable string representation. This should be parseable by the corresponding
                <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseHumanReadableString" /> method.
            </summary>
            <returns>A compact string representation of this object that is easy for a human to understand.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.RenderXML">
            <summary>
                Render this as XML. This should be parseable by the corresponding <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseXML" />
                method.
            </summary>
            <returns>An XML representation of this object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.ParseAllNext(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,System.Int32,System.Nullable{System.UInt32},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime)">
            <summary>
                Finds all parses of some suffix of this format.
            </summary>
            <param name="sr">
                The <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" /> being parsed. Note this parses beginning at <paramref name="start" />,
                not beginning at <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Start" />.
            </param>
            <param name="index">The index of the next <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.FormatParts" /> to parse with.</param>
            <param name="start">The position in <paramref name="sr" /> to start parsing at.</param>
            <param name="partialDateTime">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> parsed so far.</param>
            <returns>
                All <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" />es of <paramref name="sr" /> starting at <paramref name="start" /> and
                beginning with <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.FormatParts" />[<paramref name="index" />].
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.ToString(System.DateTime)">
            <summary>
                Renders <paramref name="dt" /> according to this date format.
            </summary>
            <param name="dt"><see cref="T:System.DateTime" /> to convert to a string.</param>
            <returns>A string in this datetime format using information from <paramref name="dt" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.ToString(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime)">
            <summary>
                Renders <paramref name="dt" /> according to this date format.
            </summary>
            <param name="dt"><see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> to convert to a string.</param>
            <returns>A string in this datetime format using information from <paramref name="dt" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.TryParseFromXML(System.Xml.Linq.XElement)">
            <summary>
                Load a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> that had been serialized to XML using <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.RenderXML" />.
            </summary>
            <param name="literal">An XML element generated by <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.RenderXML" />.</param>
            <returns>The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> deserialized from <paramref name="literal" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.TryParseHumanReadable(System.String)">
            <summary>
                Load a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> that had been serialized to a string using <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.RenderHumanReadable" />.
            </summary>
            <param name="literal">A string generated by <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.RenderHumanReadable" />.</param>
            <returns>The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> deserialized from <paramref name="literal" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to the current
                <see cref="T:System.Object" />.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>
                A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.ToString">
            <summary>
                Returns the .NET <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.FormatString" /> corresponding to this.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.AllParses(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.LearningCacheSubstring)">
            <summary>
                Computes all parses of <paramref name="ss" /> according to this format.
            </summary>
            <param name="ss">
                <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.LearningCacheSubstring" /> to look in for substrings to parse as datetimes according to
                this format.
            </param>
            <returns>
                All substrings of <paramref name="ss" /> that match this format as
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" /> objects.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch">
            <summary>
                A specific match of a <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch.DateTimeFormat" /> within a <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch.#ctor(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime)">
            <summary>
                Constructs a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" />.
            </summary>
            <param name="region">The position of the match.</param>
            <param name="dateTimeFormat">The format used to make the match.</param>
            <param name="partialDateTime">
                The information extracted from <paramref name="region" /> according to
                <paramref name="dateTimeFormat" />.
            </param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch.PartialDateTime">
            <summary>
                The information extracted by this match. That is, the information contained in <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch.Region" /> according to
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch.DateTimeFormat" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch.DateTimeFormat">
            <summary>
                The format used for the match.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch.Region">
            <summary>
                The position matched.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch.Explains(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch)">
            <summary>
                Checks if the information in <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch.PartialDateTime" /> is a superset of the information in another
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" />. Used to determine if <paramref name="other" /> is a valid output if this is the
                input.
            </summary>
            <param name="other">Match that may have come from this.</param>
            <returns>True if <paramref name="other" /> can be computed from this.</returns>
            <seealso cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Explains(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime)" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch.op_Equality(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch)">
            <summary>
                Checks if two date format matches are equal.
            </summary>
            <param name="left">The first date format match.</param>
            <param name="right">The second date format match.</param>
            <returns>
                True if <paramref name="left" /> and <paramref name="right" /> represent the same date format match.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch.op_Inequality(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch)">
            <summary>
                Checks if two date format matches are not equal.
            </summary>
            <param name="left">The first date format match.</param>
            <param name="right">The second date format match.</param>
            <returns>
                False if <paramref name="left" /> and <paramref name="right" /> represent the same date format match.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart">
            <summary>
                The smallest piece of a DateTimeFormat. Either a single custom date specifier or a constant string.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.#ctor(System.String,Microsoft.ProgramSynthesis.Utils.Optional{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart},Microsoft.ProgramSynthesis.Utils.Optional{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Token},System.Int32,System.Int32,System.String)">
            <summary>
            </summary>
            <param name="formatString">
                The format string corresponding to this according to
                <see cref="M:System.DateTime.ToString(System.String)" />.
            </param>
            <param name="matchedPart">The part of a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> this parses information about (if any).</param>
            <param name="token">The <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.Token" /> parses of this will be found within or null if matches will span tokens.</param>
            <param name="minimumLength">The minimum length of strings this parses/outputs.</param>
            <param name="maximumLength">The maximum length of strings this parses/outputs.</param>
            <param name="posixFormatString">The format string corresponding to this according to the POSIX datetime functions.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.MinimumLength">
            <summary>
                The fewest number of characters this may parse/output.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.MaximumLength">
            <summary>
                The greatest number of characters this may parse/output.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.PosixFormatString">
            <summary>
                The POSIX datetime format string corresponding to this. Can be concated together to form a longer datetime format.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.FormatString">
            <summary>
                The .NET format string for this. Can be concated together to form a longer datetime format.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.Token">
            <summary>
                The token matches of this appear within. Used to avoid looking elsewhere in the string. This may match a substring.
                Will be missing for constants.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.MatchedPart">
            <summary>
                The part of the datetime matched or <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" /> if this is a constant.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.IsNumeric">
            <summary>
                Does this format parse only numbers.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.ParseAll(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion)">
            <summary>
                Find all substrings of <paramref name="sr" /> which can be parsed by this format.
            </summary>
            <param name="sr"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.ParseFullString(System.String)">
            <summary>
                Parse a string according to this date format where the entire string corresponds to this format.
                The inverse of <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.ToString(System.Int32)" />.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.ParseNext(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion)">
            <summary>
                Parse a substring of <paramref name="sr" /> starting at the beginning.
            </summary>
            <param name="sr">
                The <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" /> to look for parses in, beginning at <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Start" />
                and ending anywhere before <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.End" />.
            </param>
            <returns>A tuple of the substring used and the value parsed or null if there is no valid parse.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.ParseAllNext(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion)">
            <summary>
                Finds all parses of this starting at the beginning of <paramref name="sr" />. Due to some datetime formats not
                being a fixed length, there may be ambiguity leading to more than one possible parse.
            </summary>
            <param name="sr">
                The <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" /> to look for parses in, beginning at <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Start" />
                and ending anywhere before <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.End" />.
            </param>
            <returns>
                Every substring starting at <paramref name="sr" />'s <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Start" /> which could be parsed
                by this format in a tuple of the matched <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" /> and the value of the
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.MatchedPart" /> for that parse.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.ToString(System.Int32)">
            <summary>
                Convert a value to a string according to this date format.
                The inverse of <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.ParseFullString(System.String)" />.
            </summary>
            <param name="value">The value of <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.MatchedPart" />.</param>
            <returns>
                The string representation of a <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.MatchedPart" /> with value <paramref name="value" /> according to
                this format.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.ToString(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime)">
            <summary>
                Formats <paramref name="dt" /> according to this datetime format.
            </summary>
            <param name="dt"><see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> to format.</param>
            <returns>The string representation of <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.MatchedPart" /> of <paramref name="dt" /> according to this format.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.Create(System.String)">
            <summary>
                Creates a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" /> corresponding to the given format string fragment.
                <paramref name="format" /> must refer to only one part of the format string: either a constant or a sequence of the
                same letter corresponding to a format identifier.
            </summary>
            <param name="format">A format string fragment.</param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" /> which corresponds to <paramref name="format" />.</returns>
            <seealso cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.ParseFormatString(System.String)" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.ParseFormatString(System.String)">
            <summary>
                Parses a datetime format string into a sequence of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" />s.
            </summary>
            <param name="format">A datetime format string.</param>
            <returns>A enumeration of each fragment of <paramref name="format" /> converted to a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" />.</returns>
            <seealso cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.Create(System.String)" />
            <seealso cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPartUtil">
            <summary>
                Utility functions for sequences of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" />s.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPartUtil.HasNonDelimitedNumbers(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)">
            <summary>
                Checks if there are any adjacent <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart" />s in
                <paramref name="dateTimeFormat" />. Important because the boundary between them could be unclear, and there's
                a high probability that is actually a number, not a date.
            </summary>
            <param name="dateTimeFormat">
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> whose <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.FormatParts" /> should be
                checked.
            </param>
            <returns>
                True if there exists a pair of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart" />s at adjacent indexes in
                <paramref name="dateTimeFormat" />'s <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.FormatParts" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPartUtil.HasNonDelimitedNumbers(System.Collections.Generic.IReadOnlyList{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart})">
            <summary>
                Checks if there are any adjacent <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart" />s in
                <paramref name="dateTimeFormatParts" />. Important because the boundary between them could be unclear, and there's
                a high probability that is actually a number, not a date.
            </summary>
            <param name="dateTimeFormatParts">List of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" />s to check.</param>
            <returns>
                True if there exists a pair of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart" />s at adjacent indexes in
                <paramref name="dateTimeFormatParts" />.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatUtil">
            <summary>
                Utility functions for datetime format strings (both .NET and POSIX).
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatUtil.Escape(System.String)">
            <summary>
                Escapes a string to be used as a constant in a .NET datetime format.
            </summary>
            <param name="constStr">Constant string the format should match.</param>
            <returns>A format string that will match <paramref name="constStr" /> when used as a .NET datetime format.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatUtil.Unescape(System.String)">
            <summary>
                Unescapes a .NET datetime format that matches a constant string.
            </summary>
            <param name="constantFormat">A .NET datetime format that matches a constant string.</param>
            <returns>The constant string matched by <paramref name="constantFormat" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatUtil.EscapeForPosix(System.String)">
            <summary>
                Escapes a string to be used as a constant in a POSIX datetime format.
            </summary>
            <param name="constStr">Constant string the format should match.</param>
            <returns>A format string that will match <paramref name="constStr" /> when used as a POSIX datetime format.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatUtil.Parse(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,System.String)">
            <summary>
                Parses <paramref name="str" /> according to <paramref name="format" /> if possible. This function is memoized so
                repeat calls with the same <paramref name="format" /> on regions of the same string will be fast.
            </summary>
            <param name="format"><see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> to use.</param>
            <param name="str"><see cref="T:System.String" /> to parse.</param>
            <returns>
                The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" /> with the information on the parse or <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" />
                if <paramref name="str" /> could not be parsed with <paramref name="format" />.
            </returns>
            <seealso cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache.Parse(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,Microsoft.ProgramSynthesis.Extraction.Text.Semantics.LearningCacheSubstring)" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatUtil.Parse(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,Microsoft.ProgramSynthesis.Extraction.Text.Semantics.LearningCacheSubstring)">
            <summary>
                Parses <paramref name="ss" /> according to <paramref name="format" /> if possible. This function is memoized so
                repeat calls with the same <paramref name="format" /> on regions of the same string will be fast.
            </summary>
            <param name="format"><see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> to use.</param>
            <param name="ss"><see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.LearningCacheSubstring" /> to parse.</param>
            <returns>
                The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" /> with the information on the parse or <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" />
                if <paramref name="ss" /> could not be parsed with <paramref name="format" />.
            </returns>
            <seealso cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache.Parse(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,Microsoft.ProgramSynthesis.Extraction.Text.Semantics.LearningCacheSubstring)" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatUtil.MatchSameStrings(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)">
            <summary>
                Checks if two <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" />s could possibly match the same string.
            </summary>
            <param name="a">A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" />.</param>
            <param name="b">A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" />.</param>
            <returns>True if there exists a string that matches both <paramref name="a" /> and <paramref name="b" />.</returns>
            <seealso cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatUtil.IsAmbiguous(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)"/>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatUtil.IsAmbiguous(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)">
            <summary>
                Checks if two <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" />s could possibly match the same string and give different values.
            </summary>
            <param name="a">A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" />.</param>
            <param name="b">A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" />.</param>
            <returns>
                True if there exists a string that matches both <paramref name="a" /> and <paramref name="b" /> such that
                different <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" />s would be parsed.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatUtil.GetDefaultDateTimeFormat(System.Collections.Immutable.IImmutableSet{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart})">
            <summary>
                Get a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> whose <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.MatchedParts" /> is <paramref name="parts" />.
            </summary>
            <param name="parts">A collection of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" />s.</param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> for formatting <paramref name="parts" />.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart">
            <summary>
                Enum of the smallest pieces of a datetime. May need multiple parts to have an interpretable datetime.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Year">
            <summary>
                <see cref="P:System.DateTime.Year"/>
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Month">
            <summary>
                <see cref="P:System.DateTime.Month"/>
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Day">
            <summary>
                <see cref="P:System.DateTime.Day"/>
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Hour">
            <summary>
                <see cref="P:System.DateTime.Hour"/>
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Minute">
            <summary>
                <see cref="P:System.DateTime.Minute"/>
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Second">
            <summary>
                <see cref="P:System.DateTime.Second"/>
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Millisecond">
            <summary>
                <see cref="P:System.DateTime.Millisecond"/>
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.HourInPeriod">
            <summary>
                <see cref="P:System.DateTime.Hour"/> in 12-hour format instead of 24-hour.
            </summary>
            <seealso cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Period"/>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Period">
            <summary>
                The AM/PM indicator. <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Period"/>
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.DayOfWeek">
            <summary>
                <see cref="P:System.DateTime.DayOfWeek"/>
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Quarter">
            <summary>
                The quarter (1-4) of the year. Determined by the month.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.Period">
            <summary>
                Period of time during a day (AM or PM).
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.Period.AM">
            <summary>
                A.M.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.Period.PM">
            <summary>
                P.M.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartUtil">
            <summary>
                Utility functions for <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" />.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartUtil.StandardDateTimeParts">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" />s corresponding to the arguments to the <see cref="T:System.DateTime" /> constructor.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartUtil.MonthToQuarter(System.Int32)">
            <summary>
                Gets the quarter number for a given month.
            </summary>
            <param name="month">A month number (1-12).</param>
            <returns>The corresponding quarter number (1-4).</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartUtil.HourInPeriodToHour(System.Int32,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.Period)">
            <summary>
                Gets the 24-hour hour from a 12-hour hour and the AM/PM indicator.
            </summary>
            <param name="hourInPeriod">The hour in the time period (1-12).</param>
            <param name="period">The time period (AM/PM).</param>
            <returns>The hour in 24-hour format (0-23).</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartUtil.GetValue(System.DateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart)">
            <summary>
                Gets the <paramref name="part" /> value out of the <see cref="T:System.DateTime" /> <paramref name="dt" />.
            </summary>
            <param name="dt"><see cref="T:System.DateTime" /> to extract value from.</param>
            <param name="part">Part of the datetime to extract.</param>
            <returns>The <paramref name="part" /> of <paramref name="dt" /> cast to the common denominator type of int.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartUtil.CanExplain(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart)">
            <summary>
                Checks if <paramref name="parts" /> covers enough information to possibly compute
                <paramref name="toExplain" />.
                In the simplest case, this just checks if <paramref name="toExplain" /> is in
                <paramref name="parts" />.
            </summary>
            <param name="parts">Set of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" /> representing the input information.</param>
            <param name="toExplain"><see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" /> representing the desired output information.</param>
            <returns>
                True if given values for <paramref name="parts" />, a value for <paramref name="toExplain" /> can be
                computed.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartUtil.CanExplain(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet,System.Collections.Immutable.IImmutableSet{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart})">
            <summary>
                Checks if <paramref name="parts" /> covers enough information to possibly compute
                <paramref name="partsToExplain" />.
                In the simplest case, this just checks if <paramref name="partsToExplain" /> is a subset of
                <paramref name="parts" />.
            </summary>
            <param name="parts">Set of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" /> representing the input information.</param>
            <param name="partsToExplain">Set of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" /> representing the desired output information.</param>
            <returns>
                True if given values for <paramref name="parts" />, values for <paramref name="partsToExplain" /> can be
                computed.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartUtil.IsDatePart(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart)">
            <summary>
                Is <paramref name="part" /> a part of the date (as opposed to the time)?
            </summary>
            <param name="part">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" />.</param>
            <returns>True if <paramref name="part" /> is year, month, day, or day of week.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartUtil.IsTimePart(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart)">
            <summary>
                Is <paramref name="part" /> a part of the time (as opposed to the date)?
            </summary>
            <param name="part">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" />.</param>
            <returns>True if <paramref name="part" /> is hour, minute, second, or millisecond.</returns>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartUtil.PartKindCount">
            <summary>
                The number of possible different <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart"/> components in a date.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartUtil.MaxValue(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart)">
            <summary>
                The maximum legal value for a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart"/>, independent of other values.
            </summary>
            <remarks>
                For example, the maximum value for <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Month"/> is 31
                even though Feburary 31st does not exist.
            </remarks>
            <param name="part">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" />.</param>
            <returns>The maximal legal value for <paramref name="part" />.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet">
            <summary>
                Specialized type for holding a set of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" /> as a bitmask.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet.#ctor(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart[])">
            <summary>
                Construct a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet" /> with the specified <paramref name="parts" />.
            </summary>
            <param name="parts"><see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" /> values to include.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet.All">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet" /> of all <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" /> values.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet.Empty">
            <summary>
                The empty <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet.Contains(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart)">
            <summary>
                Returns <c>true</c> if <paramref name="part" /> is in this set.
            </summary>
            <param name="part">Part to look for.</param>
            <returns><c>true</c> if this set contains <paramref name="part" />. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet.op_Equality(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet)">
            <summary>
                Returns <c>true</c> if <paramref name="left" /> and <paramref name="right" /> contain exactly the same elements.
            </summary>
            <param name="left">The left set.</param>
            <param name="right">The right set.</param>
            <returns>Whether the two sets are identical.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet.op_Inequality(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet)">
            <summary>
                Returns <c>true</c> if <paramref name="left" /> and <paramref name="right" /> do not contain exactly the same
                elements.
            </summary>
            <param name="left">The left set.</param>
            <param name="right">The right set.</param>
            <returns>Whether the two sets differ.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeType">
            <summary>
                A type for a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> with the specified <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" />s included.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeType.Any">
            <summary>
                Type for any <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeType.FullDate">
            <summary>
                Type for a date which includes a year, month, and day.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeType._hashCode">
            <summary>
                Cached hashcode value.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeType.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart})">
            <summary>
                Constructs a new <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeType" /> which includes the specified parts.
            </summary>
            <param name="parts">
                The datetime parts which must be included in values of this type, or <c>null</c> if no any set of
                parts is okay.
            </param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeType.Parts">
            <summary>
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" />s which must be included in values of this type or <c>null</c> to indicate that no
                particular set of parts is required.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeType.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeType.IsValidObject(Microsoft.ProgramSynthesis.Wrangling.ITypedValue)">
            <summary>
                Checks if an object is valid element of the given type.
            </summary>
            <param name="obj">Object to check.</param>
            <returns>True if object can be treated as a value of this type or false otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeType.IsAssignableFrom(Microsoft.ProgramSynthesis.Wrangling.IType)">
            <summary>
                Checks if this type is a superset of another type. That is, if true, then whenever <paramref name="other" />
                returns true for <see cref="M:Microsoft.ProgramSynthesis.Wrangling.IType.IsValidObject(Microsoft.ProgramSynthesis.Wrangling.ITypedValue)" /> so does this.
            </summary>
            <param name="other">Type to check if it can be used whenever this is expected.</param>
            <returns>True if <paramref name="other" /> is a subtype of this type.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeType.Equals(Microsoft.ProgramSynthesis.Wrangling.IType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeType.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeType.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeType.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.FormattedPartialDateTimeType">
            <summary>
                A type for a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> with a specific <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.FormattedPartialDateTimeType.#ctor(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)">
            <summary>
                Constructs a new <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.FormattedPartialDateTimeType" /> for <paramref name="format" />.
            </summary>
            <param name="format">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> of values of this type.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.FormattedPartialDateTimeType.Format">
            <summary>
                The format this values of this type.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.FormattedPartialDateTimeType.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.FormattedPartialDateTimeType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.FormattedPartialDateTimeType.IsAssignableFrom(Microsoft.ProgramSynthesis.Wrangling.IType)">
            <summary>
                Checks if this type is a superset of another type. That is, if true, then whenever <paramref name="other" />
                returns true for <see cref="M:Microsoft.ProgramSynthesis.Wrangling.IType.IsValidObject(Microsoft.ProgramSynthesis.Wrangling.ITypedValue)" /> so does this.
            </summary>
            <param name="other">Type to check if it can be used whenever this is expected.</param>
            <returns>True if <paramref name="other" /> is a subtype of this type.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.FormattedPartialDateTimeType.IsValidObject(Microsoft.ProgramSynthesis.Wrangling.ITypedValue)">
            <summary>
                Checks if an object is valid element of the given type.
            </summary>
            <param name="obj">Object to check.</param>
            <returns>True if object can be treated as a value of this type or false otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.FormattedPartialDateTimeType.Equals(Microsoft.ProgramSynthesis.Wrangling.IType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.FormattedPartialDateTimeType.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.FormattedPartialDateTimeType.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.FormattedPartialDateTimeType.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.Heuristics">
            <summary>
                Heuristics for datetime parsing. These methods are used to select "reasonable" datetime matches out of the set of
                all valid datetime matches.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.Heuristics.MaxConstantLength">
            <summary>
                Maximum length of constants between non-constant formats.
            </summary>
            <seealso cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.Heuristics.CreateDateTimeFormatIfReasonable(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart})"/>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.Heuristics.IsReasonableDateTimeMatchPrefix(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch)">
            <summary>
                Checks whether a match could be the prefix of a reasonable datetime match and therefore if longer matches starting
                with <paramref name="match" /> are worth considering.
            </summary>
            <param name="match">Prefix to consider.</param>
            <returns>True if it is worth considering longer matches with this prefix.</returns>
            <seealso cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.Heuristics.IsReasonableDateTimeMatch(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch)" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.Heuristics.CreateDateTimeFormatIfReasonable(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart})">
            <summary>
                Constructs a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> only if <paramref name="formatParts" /> satisfies some heuristics of
                being a format a human would actually use.
            </summary>
            <param name="formatParts"><see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" />s proposed to use in a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" />.</param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> or null if <paramref name="formatParts" /> is deemed unreasonable.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart">
            <summary>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart"/> that matches a number.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart.ZeroStringRegion">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion"/> containing the character zero. Used to check for zero-padding.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart.MaximumValue">
            <summary>
                The maximum int value this may parse and therefore maximum input value to <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart._parseFunc"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart.MinimumValue">
            <summary>
                The minimum int value this may parse and therefore minimum input value to <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart._parseFunc"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart._outputFunc">
            <summary>
                Adjustment function to call on the internal value before outputting as a number string for this format.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart._parseFunc">
            <summary>
                Adjustment function to call to convert the parsed number into the internal value.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart.#ctor(System.Char,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart,System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32},System.Func{System.Int32,System.Int32},System.String)">
            <summary>
                Initializes a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart"/>.
            </summary>
            <param name="formatChar">The character for this format part. The format string is this character repeated <paramref name="minimumLength"/> times.</param>
            <param name="matchedPart">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart"/> this parses values of.</param>
            <param name="minimumLength">The minimum number of characters for a number this parses/outputs.</param>
            <param name="maximumLength">The maximum number of characters for a number this parses/outputs.</param>
            <param name="minValue">The least valid value this may parse/output.</param>
            <param name="maxValue">The greatest valid value this may parse/output.</param>
            <param name="parseFunc">Optional function to call after parsing. Should be inverse of <paramref name="outputFunc"/>.</param>
            <param name="outputFunc">Optional function to call before outputting number. Should be inverse of <paramref name="parseFunc"/>.</param>
            <param name="posixFormatString">The datetime format string for POSIX datetime functions.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart.ParseAllNext(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion)">
            <summary>
                Finds all parses of this starting at the beginning of <paramref name="sr" />. Due to some datetime formats not
                being a fixed length, there may be ambiguity leading to more than one possible parse.
            </summary>
            <param name="sr">
                The <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" /> to look for parses in, beginning at <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Start" />
                and ending anywhere before <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.End" />.
            </param>
            <returns>
                Every substring starting at <paramref name="sr" />'s <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Start" /> which could be parsed
                by this format in a tuple of the matched <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" /> and the value of the
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.MatchedPart" /> for that parse.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart.ParseNext(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion)">
            <summary>
                Parse a substring of <paramref name="sr" /> starting at the beginning.
            </summary>
            <param name="sr">
                <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion" /> to parse starting at <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Start" /> and ending at or
                before <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.End" />.
            </param>
            <returns>A tuple of the substring used and the value parsed.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart.ToString(System.Int32)">
            <summary>
                Convert a value to a string according to this date format.
                The inverse of <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.ParseFullString(System.String)" />
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.NumericDateTimeFormatPart.IsNumeric">
            <summary>
                Does this format parse only numbers (always returns true).
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeData">
            <summary>
                A fast and small (50 bytes) representation for the values stored in a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeData.SetParts">
            <summary>
                A set specifying which date parts are set in the current instance.
                Bits are indexed by the values of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeData.Values">
            <summary>
                A vector that stores the values for all date parts represented by the current instance.
                If a bit for a certain <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" /> kind is set in <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeData.SetParts" />, then
                the corresponding vector element at the same index contains the value of this date part kind.
                If a bit is not set, the corresponding vector element is <c>0</c>.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTimeData.TryAdd(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart,System.Int32)">
            <summary>
                Set value if it is absent or return <c>false</c> if existing value is different.
            </summary>
            <param name="part">
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" /> to set value for; if currently set, will be checked if it agrees with
                <paramref name="newValue" />.
            </param>
            <param name="newValue">Value to set for <paramref name="part" />.</param>
            <returns><c>true</c> if this now has value <paramref name="newValue" /> for <paramref name="part" />.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime">
            <summary>
                A <see cref="T:System.DateTime" /> that may be missing information. For example, a date with a day of the month and a year
                but not a month.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Empty">
            <summary>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> with no information stored in it. All fields are
                <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Parts">
            <summary>
                The set of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" /> this contains information on. This corresponds to which properties are not
                <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" />.
            </summary>
            <seealso cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Get(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart)" />
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.SetParts">
            <summary>
                A bitmask specifying which date parts are set in the current instance.
                Bits are indexed by the values of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Year">
            <summary>
                <see cref="P:System.DateTime.Year" />
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Month">
            <summary>
                <see cref="P:System.DateTime.Month" />
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Day">
            <summary>
                <see cref="P:System.DateTime.Day" />
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.DayOfWeek">
            <summary>
                <see cref="P:System.DateTime.DayOfWeek" />
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Hour">
            <summary>
                <see cref="P:System.DateTime.Hour" />
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.HourInPeriod">
            <summary>
                <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.HourInPeriod" />
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Period">
            <summary>
                <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Period" />
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Minute">
            <summary>
                <see cref="P:System.DateTime.Minute" />
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Second">
            <summary>
                <see cref="P:System.DateTime.Second" />
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Millisecond">
            <summary>
                <see cref="P:System.DateTime.Millisecond" />
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Quarter">
            <summary>
                The quarter (1-4) of the year. Computed from the month.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Contains(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart)">
            <summary>
                Indicates whether the current object contains a value for the date part specified by <paramref name="part" />.
            </summary>
            <param name="part">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" /> to check.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Get(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart)">
            <summary>
                Returns the value of the specified <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" /> of this or <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" /> if
                this does not contain information on <paramref name="part" />.
            </summary>
            <param name="part">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" /> whose value is returned.</param>
            <returns>The value of <paramref name="part" /> or <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Create(System.DateTime)">
            <summary>
                Creates a complete <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> with all of the information from <paramref name="dt" />. Since
                <paramref name="dt" /> is a concrete <see cref="T:System.DateTime" />, the resulting <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> will
                have all fields filled in.
            </summary>
            <param name="dt"><see cref="T:System.DateTime" /> to convert to a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" />.</param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> equivalent to <paramref name="dt" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.ToDateTime">
            <summary>
                Creates a <see cref="T:System.DateTime" /> which is equivalent to this for all fields for which this has a value. All fields
                for which this has <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" />, the returned <see cref="T:System.DateTime" /> may have any value.
            </summary>
            <returns>A <see cref="T:System.DateTime" /> representation of this.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Explains(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime)">
            <summary>
                Checks if the information in this is a superset of the information in another <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" />. Used
                to determine if <paramref name="toExplain" /> is a valid output if this is the input.
            </summary>
            <param name="toExplain">Values that may have come from this.</param>
            <returns>True if <paramref name="toExplain" /> can be computed from this.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.CombineWith(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime)">
            <summary>
                Combines two <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" />s into a single <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> containing the
                information from both.
            </summary>
            <param name="other"><see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> to combine with this.</param>
            <returns>
                A combined <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> or <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" /> if this is inconsistent with
                <paramref name="other" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.With(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart,System.Int32)">
            <summary>
                Creates a new <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> with the information from this and also a <paramref name="part" />
                value of <paramref name="value" />.
            </summary>
            <param name="part">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" /> of the new information.</param>
            <param name="value">The value of the new information.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> identical to this except it also has a <paramref name="part" /> of
                <paramref name="value" />, or <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" /> if that is inconsistent.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to the current
                <see cref="T:System.Object" />.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>
                A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.op_Equality(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime)">
            <summary>
                Checks if two partial date times are equal.
            </summary>
            <param name="left">The first partial date time.</param>
            <param name="right">The second partial date time.</param>
            <returns>
                True if <paramref name="left" /> and <paramref name="right" /> represent the same date time.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.op_Inequality(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime)">
            <summary>
                Checks if two partial date times are not equal.
            </summary>
            <param name="left">The first partial date time.</param>
            <param name="right">The second partial date time.</param>
            <returns>
                False if <paramref name="left" /> and <paramref name="right" /> represent the same date time.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.RenderHumanReadable">
            <summary>
                Render this as a human-readable string representation. This should be parseable by the corresponding
                <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseHumanReadableString" /> method.
            </summary>
            <returns>A compact string representation of this object that is easy for a human to understand.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime.RenderXML">
            <summary>
                Render this as XML. This should be parseable by the corresponding <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseXML" />
                method.
            </summary>
            <returns>An XML representation of this object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart">
            <summary>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" /> that matches a word. Each word matched has a distinct corresponding
                <see cref="T:System.Int32" /> value.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart.#ctor(System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart,System.Collections.Immutable.IImmutableDictionary{System.Int32,System.String},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart,System.String)">
            <summary>
                Constructs a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart" />.
            </summary>
            <param name="formatString">The .NET <see cref="T:System.DateTime" /> format string for this.</param>
            <param name="matchedPart">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" /> this matches.</param>
            <param name="stringLookup">The correspondence between matched strings and the parsed values.</param>
            <param name="abbreviationOf">
                If not <c>null</c>, then this is an abbreviation of a longer format. Useful because values
                of this format maybe prefixes of values of that format.
            </param>
            <param name="posixFormatString">The POSIX format string for this.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart.StringLookup">
            <summary>
                The correspondence of values to words.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart.AbbreviationOf">
            <summary>
                If not <c>null</c>, then this is an abbreviation of a longer format. Useful because values
                of this format maybe prefixes of values of that format.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart.ParseNext(Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringRegion)">
            <summary>
                Parse a substring of <paramref name="sr" /> starting at the beginning.
            </summary>
            <param name="sr"></param>
            <returns>A tuple of the substring used and the value parsed.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart.ToString(System.Int32)">
            <summary>
                Convert a value to a string according to this date format.
                The inverse of <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart.ParseFullString(System.String)" />
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart.CreateDayOfWeek(System.String,System.String)">
            <summary>
                Creates a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart" /> that matches a day of the week. Uses the
                <paramref name="formatString" /> parameter and <see cref="T:System.DateTime" /> to get the values for
                <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
            <param name="formatString">
                The .NET <see cref="T:System.DateTime" /> format string to create a
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart" /> for. Used to determine what strings to use.
            </param>
            <param name="posixFormat">The corresponding POSIX format string.</param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart" /> equivalent to <paramref name="formatString" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart.CreateMonth(System.String,System.String)">
            <summary>
                Creates a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart" /> that matches a month name. Uses the
                <paramref name="formatString" /> parameter and <see cref="T:System.DateTime" /> to get the values for
                <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
            <param name="formatString">
                The .NET <see cref="T:System.DateTime" /> format string to create a
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart" /> for. Used to determine what strings to use.
            </param>
            <param name="posixFormat">The corresponding POSIX format string.</param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart" /> equivalent to <paramref name="formatString" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart.CreatePeriod(System.String)">
            <summary>
                Creates a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart" /> that matches a period designator. Uses the
                <paramref name="formatString" /> parameter and <see cref="T:System.DateTime" /> to get the values for
                <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
            <param name="formatString">
                The .NET <see cref="T:System.DateTime" /> format string to create a
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart" /> for. Used to determine what strings to use.
            </param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.StringDateTimeFormatPart" /> equivalent to <paramref name="formatString" />.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor">
            <summary>
                A class that contains all the metadata about an entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.EntityName">
            <summary>
                The canonical, unlocalized, name of the entity.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.ExtractorFactoryDelegate">
            <summary>
                A delegate type that can be used to create a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that produces entities of type
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.Type" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.Type">
            <summary>
                The .NET <see cref="T:System.Type" /> use to represent instances of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.EntityType">
            <summary>
                The <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.EntityType" /> of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.ExtractorFactory">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.ExtractorFactoryDelegate" /> used to construct a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that yields
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" />s of type <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.Type" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.PythonTypeName">
            <summary>
                The name of <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.Type" /> in the Python world.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.ExtractorType">
            <summary>
                The <see cref="T:System.Type" /> of the <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that produces instances of
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.Type" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.PythonExtractorTypeName">
            <summary>
                The name of <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.ExtractorType" /> in the Python world.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.#ctor(System.String,System.Type,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType,System.String,System.Type,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.ExtractorFactoryDelegate)">
            <summary>
                Creates a new <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor" />.
            </summary>
            <param name="entityName">The canonical, non-localized name of this entity.</param>
            <param name="type">The <see cref="T:System.Type" /> of the instances of this entity.</param>
            <param name="entityType">The <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.EntityType" /> of instances of this entity.</param>
            <param name="pythonTypeName">The name of the Python counterpart to <paramref name="type" />.</param>
            <param name="extractorType">
                The <see cref="T:System.Type" /> of the <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that produces
                entities of <see cref="T:System.Type" /> <paramref name="type" />.
            </param>
            <param name="pythonExtractorTypeName">The name of the Python counterpart to <paramref name="extractorType" />.</param>
            <param name="extractorFactory">
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.ExtractorFactoryDelegate" /> factory that creates
                <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" />s of <see cref="T:System.Type" /> <paramref name="extractorType" />.
            </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.#ctor(System.String,System.Type,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType,System.Type)">
            <summary>
                Creates a new <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor" />. The <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.PythonTypeName" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.PythonExtractorTypeName" /> are assumed to be the same as <paramref name="type.Name.Name" /> and
                <paramref name="extractorType.Name.Name" />.
                Instances of <paramref name="extractorType" /> are created using a call to the default constructor for
                <paramref name="extractorType" />.
            </summary>
            <param name="entityName">The canonical, non-localized name of this entity.</param>
            <param name="type">The <see cref="T:System.Type" /> of the instances of this entity.</param>
            <param name="entityType">The <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor.EntityType" /> of instances of this entity.</param>
            <param name="extractorType">
                The <see cref="T:System.Type" /> of the <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" /> that produces
                entities of <see cref="T:System.Type" /> <paramref name="type" />.
            </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.PrecedenceBasedTokenComparer">
            <summary>
                A <see cref="T:System.Collections.Generic.IComparer`1" /> that compares <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken" /> based on their
                precedences.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.PrecedenceBasedTokenComparer.Compare(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken,Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken)">
            <summary>
                Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the
                other.
            </summary>
            <returns>
                A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as
                shown in the following table.
                Value                                   Meaning
                Less than zero        <paramref name="x" /> is less than <paramref name="y" />.
                Zero                  <paramref name="x" /> equals <paramref name="y" />.
                Greater than zero     <paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.PrecedenceBasedTokenComparer.Instance">
            <summary>
                The singleton instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenFilters.ResolveSubsumptionByPrecedence(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityToken})">
            <summary>
                Handles subsumption based on token precedence.
            </summary>
            <param name="tokens">The set of tokens.</param>
            <returns>A sequence of tokens such that no token in the sequence is subsumed by another in the sequence.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection">
            <summary>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor" /> that consists of a set of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" />s.
                This class helps when correlated extractions are to be performed.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection.Tokenizers">
            <summary>
                The set of tokenizers.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer})">
            <summary>
                Constructor.
            </summary>
            <param name="tokenizers">The set of tokenizers.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection.#ctor(Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer[])">
            <summary>
                Constructor.
            </summary>
            <param name="tokenizers">The set of tokenizers.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="other">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection.RenderHumanReadable">
            <summary>
                Render this as a human-readable string representation. This should be parseable by the corresponding
                <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseHumanReadableString" /> method.
            </summary>
            <returns>A compact string representation of this object that is easy for a human to understand.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection.RenderXML">
            <summary>
                Render this as XML. This should be parseable by the corresponding <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseXML" />
                method.
            </summary>
            <returns>An XML representation of this object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection.TryParseXML(System.Xml.Linq.XElement)">
            <summary>
                Parse an XML serialized representation of an object of class <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection" />.
            </summary>
            <param name="literal">The XML serialized representation of a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection" />.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection" /> that corresponds to the XML serialized version in
                <paramref name="literal" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection.TryParseHumanReadable(System.String)">
            <summary>
                Parse a human readable serialized representation of an object of class <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection" />.
            </summary>
            <param name="literal">The human readab;e serialized representation of a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection" />.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection" /> that corresponds to the human readable serialized version in
                <paramref name="literal" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection.CreateExtractorFor(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType)">
            <summary>
                Creates a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor" /> for a specfic <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType" />.
            </summary>
            <param name="entityType">The entity type that is to be extracted.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor" /> that extracts non-subsumed instances of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType" /> from an
                input string.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityMappings">
            <summary>
                Helper class to map between <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType" />, and the <see cref="T:System.Type" /> of an entity as well as the
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor" /> for an entity.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityMappings.EntityDescriptors">
            <summary>
                Maps an <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType" /> to its <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityDescriptor" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityMappings.TypeToEntityType">
            <summary>
                Maps a <see cref="T:System.Type" /> to its <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType" />.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor">
            <summary>
                An adapter to turn a combination of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection" /> and <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.EntityType" /> into a
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.Tokenizers">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection" /> to use.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.EntityType">
            <summary>
                The type of entities to be extracted. See <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.EntityType" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.EntityTokenType">
            <summary>
                The <see cref="T:System.Type" /> of entities to be extracted.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.#ctor(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollection,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType)">
            <summary>
                Constructor.
            </summary>
            <param name="tokenizers">The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.EntityExtraction.Entities.EntityBasedTokenizer" />.</param>
            <param name="entityType">The <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.EntityType" /> to extract.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.Extract(System.String)">
            <summary>
                Extract all instances of the concept/entity that are present in <paramref name="s" />.
            </summary>
            <param name="s">The input <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> from which the concept/entity is to be extracted from.</param>
            <returns>
                A sequence of start and end positions, one for each instance of the entity/concept extracted from
                <paramref name="s" />.
                The semantics of each <see cref="T:System.Tuple" /> in the result is that the first element defines the start of the
                instance of the entity/concept, and
                the second element denotes the end (not inclusive) of the instance of the entity/concept.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.BindTranslation``1(Microsoft.ProgramSynthesis.Translation.Module{``0},System.String,Microsoft.ProgramSynthesis.Translation.Target,System.String)">
            <summary>
                Translates this extractor into a function in the target language and binds the function
                to the specified name in the module.
            </summary>
            <param name="module">The module where the translation resides.</param>
            <param name="name">The name of the translated function.</param>
            <param name="translationTarget">The target language for the translation.</param>
            <param name="headerModuleName">The name of the header module used in this translation.</param>
            <typeparam name="T">A type that can represent programs in the target language.</typeparam>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.Score">
            <summary>
                The score for this extractor. Higher scores imply better extractors.
                This value is expected to be set in the range [0, 1].
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.TryParseXML(System.Xml.Linq.XElement)">
            <summary>
                Parses an XML representation of this object produced by <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor.RenderXML" />.
            </summary>
            <param name="literal">The serialized XML representation.</param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor" /> that corresponds to <paramref name="literal" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.TryParseHumanReadable(System.String)">
            <summary>
                Parses a human-readable representation of this object produced by
                <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor.RenderHumanReadable" />.
            </summary>
            <param name="literal">The serialized representation.</param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor" /> that corresponds to <paramref name="literal" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.RenderXMLImpl">
            <summary>
                Serializes this object into an <see cref="T:System.Xml.Linq.XElement" />.
            </summary>
            <returns>An <see cref="T:System.Xml.Linq.XElement" /> representing this object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.TokenizerCollectionToExtractor.RenderHumanReadableImpl">
            <summary>
                Serializes this object into a human readable string
            </summary>
            <returns>A human readable string serialization of this object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType">
            <summary>
                An enumerated type that represents entity types.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.Unknown">
            <summary>
                Represents an unknown or unsupported EntityType.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.DomainName">
            <summary>
                Represents a domain name, e.g. "microsoft.com"
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.Url">
            <summary>
                Represents a URL, e.g. "https://code.msdn.microsoft.com/"
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.CreditCardNumber">
            <summary>
                Represents a credit card number, e.g. "1234-5678-4321-8765"
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.MaskedCreditCardNumber">
            <summary>
                Represents a masked credit card number, e.g. "XXXX-XXXX-XXXX-1234"
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.SocialSecurityNumber">
            <summary>
                Represents a social security number, e.g. 123-45-6789
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.MaskedSocialSecurityNumber">
            <summary>
                Represents a masked social security number, e.g. XXX-XX-1234
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.Date">
            <summary>
                Represents a date.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.Time">
            <summary>
                Represents a time.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.EmailAddress">
            <summary>
                Represents an email address, e.g. somebody@example.com.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.Path">
            <summary>
                Represents a Unix or Windows Style path, e.g. "C:\Windows" or "/usr/bin/ls".
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.FileName">
            <summary>
                Represents a file name in a Windows or Unix style path.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.Guid">
            <summary>
                Represents a GUID.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.HexadecimalNumber">
            <summary>
                Represents a hexadecimal number, e.g. 0x1234ABCD.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.IpV4Address">
            <summary>
                Represents an IPV4 address, e.g. 192.168.4.48
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.IpV4CidrAddress">
            <summary>
                Represents a CIDR IPV4 address, e.g. 192.168.4.48/24
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.IpV6Address">
            <summary>
                Represents an IPV6 address, e.g. "2001:db8:85a3::8a2e:370:7334".
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.IpV6CidrAddress">
            <summary>
                Represents a CIDR IPV6 address, e.g. "2001:db8:85a3::8a2e:370:7334/64".
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.MacAddress">
            <summary>
                Represents a MAC address, e.g. "01-23-45-67-89-ab" or "01:23:45:67:89:ab", etc.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.Currency">
            <summary>
                Represents a currency value/amount. e.g. "$1234.56", or "€567.21".
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.Number">
            <summary>
                Represents a number in various decimal formats. e.g. "123.4", "123E12", "-45.2", etc.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ExtractByEntity.EntityType.PhoneNumber">
            <summary>
                Represents a phone number. e.g. "(555)-123-4567", etc.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IIndexableRow">
            <summary>
                An input row which consists of columns indexed by <see cref="T:System.Int32" />s. Each value is an
                <see cref="T:System.Object" /> which must actually be a <see cref="T:System.String" /> (other types will be supported in the future).
                The indexing corresponds to the program's <c>ColumnUsed</c> property such that <c>0</c> refers to the first column
                listed in that property.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IIndexableRow.TryGetValue(System.Int32,System.Object@)">
            <summary>
                Gets the value of the column at (zero-based) index <paramref name="index" /> of the program's <c>columnsUsed</c>
                and puts it in <paramref name="value" /> if possible.
            </summary>
            <param name="index">
                The zero-based index the column in the <c>columnsUsed</c> collection of the program.
            </param>
            <param name="value">
                The value of the column. This must be a <see cref="T:System.String" />. Future versions will support other types.
            </param>
            <returns>
                <code>true</code> if the column exists and <paramref name="value" /> has been populated, or <code>false</code>
                otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IndexableRowWrapper">
            <summary>
                Wrapper to allow an <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IIndexableRow"/> to be used as an <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IRow"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IndexableRowWrapper.#ctor(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IIndexableRow)">
            <summary>
                Wrap <paramref name="indexableRow"/> in an <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IRow"/>.
            </summary>
            <param name="indexableRow">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IIndexableRow"/> to wrap.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IndexableRowWrapper.IndexableRow">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IIndexableRow"/> being wrapped.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IndexableRowWrapper.ColumnNames">
            <summary>
                Method not implemented.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IndexableRowWrapper.TryGetValue(System.String,System.Object@)">
            <summary>
                Method not implemented.
            </summary>
            <param name="columnName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IndexableRowWrapper.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IRow)">
            <summary>
                Method not implemented.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails">
            <summary>
                Miscellaneous number format details. This type is separate from <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat" /> so additional fields
                can be added to it without changing the signature of <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.BuildNumberFormat(System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails)" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails.#ctor(Microsoft.ProgramSynthesis.Utils.Optional{System.Char},Microsoft.ProgramSynthesis.Utils.Optional{System.UInt32},Microsoft.ProgramSynthesis.Utils.Optional{System.Decimal})">
            <summary>
                Constructs a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails"/> wrapping the parameters.
            </summary>
            <param name="separatorChar">Character used to separate segments before the decimal (e.g. comma in "4,904,582.92").</param>
            <param name="separatedSectionSize">Number of characters in segments before the decimal (e.g. 3 in "4,904,582.92").</param>
            <param name="scale">
                Scaling factor to apply before formatting number. Usually a power of 10. Usually used for
                formatting percentages.
            </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails.#ctor">
            <summary>
                Construct default <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails"/>. The <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails.SeparatorChar"/> of comma is used by default.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails.#ctor(System.Nullable{System.Char},System.Nullable{System.UInt32},System.Nullable{System.Decimal})">
            <summary>
                Constructs a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails"/> wrapping the parameters.
            </summary>
            <param name="separatorChar">Character used to separate segments before the decimal (e.g. comma in "4,904,582.92").</param>
            <param name="separatedSectionSize">Number of characters in segments before the decimal (e.g. 3 in "4,904,582.92").</param>
            <param name="scale">
                Scaling factor to apply before formatting number. Usually a power of 10. Usually used for
                formatting percentages.
            </param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails.SeparatorChar">
            <summary>
                Character used to separate segments before the decimal (e.g. comma in "4,904,582.92").
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails.SeparatedSectionSize">
            <summary>
                Number of characters in segments before the decimal (e.g. 3 in "4,904,582.92").
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails.Scale">
            <summary>
                Scaling factor to apply before formatting number. Usually a power of 10. Usually used for
                formatting percentages.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails.Default">
            <summary>
                Default instance of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails"/>. The <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails.SeparatorChar"/> of comma is used by default.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails.RenderHumanReadable">
            <summary>
                Render this as a human-readable string representation. This should be parseable by the corresponding
                <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseHumanReadableString" /> method.
            </summary>
            <returns>A compact string representation of this object that is easy for a human to understand.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails.RenderXML">
            <summary>
                Render this as XML. This should be parseable by the corresponding <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseXML" />
                method.
            </summary>
            <returns>An XML representation of this object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails.ToString">
            <summary>
                Returns a string that represents the value of this <see cref="T:System.Tuple`3" /> instance.
            </summary>
            <returns>
                The string representation of this <see cref="T:System.Tuple`3" /> object.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat">
            <summary>
                A format for displaying numbers. Includes information about how many leading and trailing zeros and spaces to
                display and other formatting details.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.#ctor(Microsoft.ProgramSynthesis.Utils.Optional{System.UInt32},Microsoft.ProgramSynthesis.Utils.Optional{System.UInt32},Microsoft.ProgramSynthesis.Utils.Optional{System.UInt32},Microsoft.ProgramSynthesis.Utils.Optional{System.UInt32},Microsoft.ProgramSynthesis.Utils.Optional{System.UInt32},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails)">
            <summary>
                Construct a new <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat" /> providing all of the details.
            </summary>
            <param name="minTrailingZeros">Minimum number of digits after the decimal.</param>
            <param name="maxTrailingZeros">Maximum number of digits after the decimal.</param>
            <param name="minTrailingZerosAndWhitespace">
                Minimum number of characters after the decimal including whitespace
                padding.
            </param>
            <param name="minLeadingZeros">Minimum number of digits before the decimal.</param>
            <param name="minLeadingZerosAndWhitespace">
                Minimum number of characters before the decimal including whitespace
                padding.
            </param>
            <param name="details">Other format details in a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails"/>.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.MinTrailingZeros">
            <summary>
                Minimum number of digits after the decimal.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.MaxTrailingZeros">
            <summary>
                Maximum number of digits after the decimal.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.MinTrailingZerosAndWhitespace">
            <summary>
                Minimum number of characters after the decimal including whitespace
                padding.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.MinLeadingZeros">
            <summary>
                Minimum number of digits before the decimal.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.MinLeadingZerosAndWhitespace">
            <summary>
                Minimum number of characters before the decimal including whitespace
                padding.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.Details">
            <summary>
                Other number format details.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.SeparatorChar">
            <summary>
                Character used to separate segments before the decimal (e.g. comma in "4,904,582.92").
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.SeparatedSectionSize">
            <summary>
                Number of characters in segments before the decimal (e.g. 3 in "4,904,582.92").
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.Scale">
            <summary>
                Scaling factor to apply before formatting number. Usually a power of 10. Usually used for
                formatting percentages.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.RenderHumanReadable">
            <summary>
                Render this as a human-readable string representation. This should be parseable by the corresponding
                <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseHumanReadableString" /> method.
            </summary>
            <returns>A compact string representation of this object that is easy for a human to understand.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.RenderXML">
            <summary>
                Render this as XML. This should be parseable by the corresponding <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseXML" />
                method.
            </summary>
            <returns>An XML representation of this object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.Rescale(System.Decimal,System.Decimal)">
            <summary>
                Multiply <paramref name="number" /> by <paramref name="scale" /> maintaining the significant digits in
                <paramref name="number" />.
            </summary>
            <param name="number">Number to multiply by a power of 10.</param>
            <param name="scale">Power of 10 to multiply <paramref name="number" /> by to move the decimal point.</param>
            <returns><paramref name="number" /> with the decimal point moved by multiplying by <paramref name="scale" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.ToString(System.Decimal)">
            <summary>
                Converts a number to a string according to this format.
            </summary>
            <param name="value">Number to format.</param>
            <returns>A string representing <paramref name="value" /> as determined by this format.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.GetDecimalPartString(System.Decimal)">
            <summary>
                Gets the string representation of just the decimal digits of a number. E.g. 1.32 goes to "32" and 4 goes to
                <c>null</c>.
            </summary>
            <param name="number">Number to get decimal of.</param>
            <returns>String representation of the decimal digits of <paramref name="number" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.ParseNumber(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring)">
            <summary>
                Parse a string as a number in a very forgiving manner, accepting any format that FormatNumber might output as well
                as ones it won't.
            </summary>
            <param name="numberString">Number to parse.</param>
            <returns>The number parsed or <c>null</c> if <paramref name="numberString" /> is not a number.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.ParseNumber(System.String)">
            <summary>
                Parse a string as a number in a very forgiving manner, accepting any format that FormatNumber might output as well
                as ones it won't.
            </summary>
            <param name="numberString">Number to parse.</param>
            <returns>The number parsed or <c>null</c> if <paramref name="numberString" /> is not a number.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.IsValidNumberString(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring)">
            <summary>
                If true, then <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.Learn(System.Collections.Generic.IEnumerable{System.Tuple{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,System.Decimal}},Microsoft.ProgramSynthesis.Rules.BlackBoxRule)" /> will treat <paramref name="numberString" /> as a number.
            </summary>
            <param name="numberString">String to check if it is a number.</param>
            <returns>True if <paramref name="numberString" /> is a number.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.IsValidNumberString(System.String)">
            <summary>
                If true, then <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.Learn(System.Collections.Generic.IEnumerable{System.Tuple{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,System.Decimal}},Microsoft.ProgramSynthesis.Rules.BlackBoxRule)" /> will treat <paramref name="numberString" /> as a number.
            </summary>
            <param name="numberString">String to check if it is a number.</param>
            <returns>True if <paramref name="numberString" /> is a number.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.IsAllowedScalePower(System.Int32)">
            <summary>
                May a number be scaled by 10<sup><paramref name="power" /></sup> when formatted.
            </summary>
            <param name="power">The power of 10 to consider.</param>
            <returns><c>true</c> is <paramref name="power" /> is a reasonable power of 10 for scaling a number.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.Learn(System.Collections.Generic.IEnumerable{System.Tuple{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,System.Decimal}},Microsoft.ProgramSynthesis.Rules.BlackBoxRule)">
            <summary>
                Learns a <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.JoinProgramSet" /> of the Transformation.Text programs generating the
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat" />s which format <paramref name="toFormatPairs" />.
            </summary>
            <param name="toFormatPairs">
                Pairs of numbers with their desired formatting string. The formats generated by this all
                guarantee that formatting the number will produce the string.
            </param>
            <param name="buildNumberFormatRule">The grammar rule for <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.BuildNumberFormat(System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails)" />.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" /> of programs that generate <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat" /> or null if
                <paramref name="toFormatPairs" /> cannot be generated by any <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to the current
                <see cref="T:System.Object" />.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>
                A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.op_Equality(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat)">
            <summary>
                Checks if two number formats are equal.
            </summary>
            <param name="left">The first number format.</param>
            <param name="right">The second number format.</param>
            <returns>
                True if <paramref name="left" /> and <paramref name="right" /> represent the same number format.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.op_Inequality(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat)">
            <summary>
                Checks if two number formats are not equal.
            </summary>
            <param name="left">The first number format.</param>
            <param name="right">The second number format.</param>
            <returns>
                False if <paramref name="left" /> and <paramref name="right" /> represent the same number format.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberType">
            <summary>
                A type for a <see cref="T:System.Decimal" /> number with an optional <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat" />.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberType.Integer">
            <summary>
                Type for a number displayed as an integer.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberType.#ctor(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat)">
            <summary>
            </summary>
            <param name="format">The format to be used when displaying the number as a string.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberType.Format">
            <summary>
                The format to be used when displaying the number as a string.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberType.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberType.GetTypedValue(Microsoft.ProgramSynthesis.Wrangling.ITypedValue)">
            <summary>
                If possible, get <paramref name="obj" /> as type <see cref="T:System.Decimal" /> according to this type.
            </summary>
            <param name="obj"><see cref="T:Microsoft.ProgramSynthesis.Wrangling.ITypedValue" /> to convert to <see cref="T:System.Decimal" />.</param>
            <returns>
                <paramref name="obj" /> converted to <see cref="T:System.Decimal" /> according to this or
                <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberType.IsValidObject(Microsoft.ProgramSynthesis.Wrangling.ITypedValue)">
            <summary>
                Checks if an object is valid element of the given type.
            </summary>
            <param name="obj">Object to check.</param>
            <returns>True if object can be treated as a value of this type or false otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberType.IsAssignableFrom(Microsoft.ProgramSynthesis.Wrangling.IType)">
            <summary>
                Checks if this type is a superset of another type. That is, if true, then whenever <paramref name="other" />
                returns true for <see cref="M:Microsoft.ProgramSynthesis.Wrangling.IType.IsValidObject(Microsoft.ProgramSynthesis.Wrangling.ITypedValue)" /> so does this.
            </summary>
            <param name="other">Type to check if it can be used whenever this is expected.</param>
            <returns>True if <paramref name="other" /> is a subtype of this type.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberType.Equals(Microsoft.ProgramSynthesis.Wrangling.IType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberType.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberType.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberType.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode">
            <summary>
                Specifies what logic to use to decide to round up or down.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Nearest">
            <summary>
                Round to the nearest number, greater on ties.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Down">
            <summary>
                Always round down.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Up">
            <summary>
                Always round up.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.UpOrNext">
            <summary>
                Always increase value: if already rounded, go to the next value up.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.TowardZero">
            <summary>
                Never change more significant digits. Same as <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Down" /> for positive numbers and <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Up" /> for
                negative numbers.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.AwayFromZero">
            <summary>
                Round away from zero. Opposite of <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.TowardZero" />. Same as <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Up" /> for positive numbers and
                <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Down" /> for negative numbers.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec">
            <summary>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec" /> specifies a rounding operation. A rounding operation is specified by a set of
                equidistant numbers defined by a <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec.Zero" /> point and a distance <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec.Delta" />. Of the two numbers
                closest to the number being rounded, which one is selected is determined by the <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec.Mode" />.
            </summary>
            <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.RoundNumber(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec)" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec.#ctor(System.Decimal,System.Decimal,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode)">
            <summary>
                Constructs a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec" /> specifying a rounding operation.
            </summary>
            <param name="zero">
                The zero-point of the set of numbers to round to. Must be closer to 0 than <paramref name="delta" />.
            </param>
            <param name="delta">The increment between numbers to round to.</param>
            <param name="mode">
                Whether rounding is <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Nearest" />, <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Down" />, or
                <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Up" />
            </param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec.Zero">
            <summary>
                The zero-point of the set of numbers to round to. Numbers are rounded to some multiple of <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec.Delta" /> away
                from this value.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec.Delta">
            <summary>
                The increment between numbers to round to. Numbers are rounded to some multiple of this value away from
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec.Zero" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec.Mode">
            <summary>
                Determines which of the two closest numbers to round to. May be <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Nearest" />,
                <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Down" />, or <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingMode.Up" />
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec.RenderHumanReadable">
            <summary>
                Render this as a human-readable string representation. This should be parseable by the corresponding
                <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseHumanReadableString" /> method.
            </summary>
            <returns>A compact string representation of this object that is easy for a human to understand.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec.RenderXML">
            <summary>
                Render this as XML. This should be parseable by the corresponding <see cref="P:Microsoft.ProgramSynthesis.Utils.ParseableAttribute.ParseXML" />
                method.
            </summary>
            <returns>An XML representation of this object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IRow">
            <summary>
                An input row which consists of one or more named columns identified by <see cref="T:System.String" />s. Each value is an
                <see cref="T:System.Object" /> which must actually be a <see cref="T:System.String" /> (other types will be supported in the future).
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IRow.ColumnNames">
            <summary>
                Optional field giving the names of all of the columns in the row. Note that if this is missing during learning,
                then the set of available column names will have to be provided in some other way.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IRow.TryGetValue(System.String,System.Object@)">
            <summary>
                Gets the value of the column named <paramref name="columnName" /> and puts it in <paramref name="value" /> if
                possible.
            </summary>
            <param name="columnName">The name of the column to get.</param>
            <param name="value">
                The value of the column. This must be a <see cref="T:System.String" /> (except internally during learning it may be a
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" />). Future versions will support other types.
            </param>
            <returns>
                <code>true</code> if the column exists and <paramref name="value" /> has been populated, or <code>false</code>
                otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.OutputsFeatureExtractor.#ctor(Microsoft.ProgramSynthesis.Grammar)">
            <summary>
                This initializes the features according to the grammar. The grammar used here is TransformationText
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.RankingScore">
            <summary>
                Transformation.Text feature calculator for the default ranking score (as a <see cref="T:System.Double" />).
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.RankingScore.FeatureName">
            <summary>
                Feature name.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.RankingScore._featureExtractor">
            <summary>
                This stores the features which are later used for re-ranking.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.RankingScore.UseMlRanker">
            <summary>
                When this flag is set then ML Ranker is used. By deafault ML Ranker is not used.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.RankingScore.#ctor(Microsoft.ProgramSynthesis.Grammar,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Constructs an instance of this feature calculator to compute the value of this feature
                on Transformation.Text programs.
            </summary>
            <param name="grammar">The grammar of Transformation.Text</param>
            <param name="randomSeed">Random seed to use for any random operations like sampling the inputs.</param>
            <param name="useMlRanker">If <c>true</c>, most of the logic in this file is ignored in favor of the ML ranker.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.RankingScore.GetFeatureValueForVariable(Microsoft.ProgramSynthesis.AST.VariableNode)">
            <summary>
                Calculates the value of the feature represented by the current instance
                for a given <see cref="T:Microsoft.ProgramSynthesis.AST.VariableNode" /> program <paramref name="variable" />.
            </summary>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.RankingScore.MaybeGetColumnName(Microsoft.ProgramSynthesis.Features.LearningInfo)">
            <summary>
                Gets the column name selected for a <see cref="T:Microsoft.ProgramSynthesis.Features.LearningInfo" />. This is useful for being able to use additional
                inputs, which will not have the column name set.
            </summary>
            <param name="learningInfo">
                <see cref="T:Microsoft.ProgramSynthesis.Features.LearningInfo" /> to extract the column name from. This must be a <see cref="T:Microsoft.ProgramSynthesis.Features.LearningInfo" /> for a rule below
                the <c>LetColumnName</c> rule.
            </param>
            <returns>The column being processed by this part of the ranking procedure.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.RankingScore.BindColumnNameIfMissing(Microsoft.ProgramSynthesis.State,System.String)">
            <summary>
                Bind the <c>columnName</c> and <c>x</c> (column value) symbols in a state if they are missing. They will get set in
                the inputs in the spec, but they don't get set in the additional inputs, so to use additional inputs, the
                <paramref name="columnName" /> has to be read out of the spec and bound with this method.
            </summary>
            <param name="state">
                Input state that may be missing bindings for <c>x</c> and <c>columnName</c>. If they are not
                missing, then <c>columnName</c> must be <paramref name="columnName" />.
            </param>
            <param name="columnName">
                Column name to use; get this by looking up <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.RankingScore._columnNameSymbol" /> in a
                <see cref="T:Microsoft.ProgramSynthesis.State" /> from the spec.
            </param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.State" /> that has the <c>columnName</c> and <c>x</c> symbols set properly.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Ranking.MachineLearnedRankingScore.CreateDefault(Microsoft.ProgramSynthesis.Grammar)">
            <summary>
                Creates an instance of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Ranking.MachineLearnedRankingScore" /> with a default set of features.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Ranking.MachineLearnedRankingScore.Coefficients">
            <summary>
                A vector of coefficients corresponding to <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Ranking.MachineLearnedRankingScore.Features" /> (in order). Can be reassigned manually.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Ranking.RankingFeature">
            <summary>
                A ranking feature accumulates a custom numerical value associated with a <see cref="T:Microsoft.ProgramSynthesis.AST.ProgramNode" />.
                It is used in <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Ranking.MachineLearnedRankingScore" /> as a score component with a weight of
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Ranking.RankingFeature.LearnedCoefficient" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Ranking.RankingFeature.InitialOptimizationCoefficient">
            <summary>
                Initial coefficient for an optimization procedure that optimizes the ranking score on a dataset.
                Defaults to <c>0</c>.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Ranking.RankingFeature.AccumulateDefinitions">
            <summary>
                <para>
                    If <c>true</c>, a computation of this feature for a "defining" <see cref="T:Microsoft.ProgramSynthesis.AST.ProgramNode" /> also includes
                    the values of this feature from the children.
                    If <c>false</c>, each "defining" <see cref="T:Microsoft.ProgramSynthesis.AST.ProgramNode" /> overrides the computation and calculates
                    the feature value afresh.
                    Defaults to <c>true</c>.
                </para>
                <para>
                    Set to <c>false</c> to, e.g., compute a feature value only at the topmost level of a recursive
                    operator chain such as <c>Concat</c>.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.RowExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IRow"/> and <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IIndexableRow"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.RowExtensions.GetValue(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IRow,System.String)">
            <summary>
                Gets the value of the column named <paramref name="columnName" /> in <paramref name="row"/>.
            </summary>
            <param name="row">Row to get value from.</param>
            <param name="columnName">The name of the column to get.</param>
            <returns>
                The value of the column. The <see cref="M:System.Object.ToString" /> of this value will be used. Future versions may
                use other information for certain input types.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">May be thrown if <paramref name="columnName" /> is not a valid column name.</exception>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.RowExtensions.GetValue(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IIndexableRow,System.Int32)">
            <summary>
                Gets the value of the column at index <paramref name="index" /> of the program's <c>columnsUsed</c> in
                <paramref name="row" />.
            </summary>
            <param name="row">Row to get value from.</param>
            <param name="index">
                The index of the column in the <c>columnsUsed</c> collection of the program.
            </param>
            <returns>
                The value of the column. The <see cref="M:System.Object.ToString" /> of this value will be used. Future versions may
                use other information for certain input types.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">May be thrown if <paramref name="index" /> is not a valid column index.</exception>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring">
            <summary>
                A substring that compares on value of the substring (as opposed to the position).
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring._hashCode">
            <summary>
                Memoization of the hashcode.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.Type">
            <summary>
                The type of the object. Used to convert to a strongly typed value.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.WithType(Microsoft.ProgramSynthesis.Wrangling.IType)">
            <summary>
                Creates a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> referencing the same substring with the <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.Type" />
                <paramref name="type" />.
            </summary>
            <param name="type">The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.IType" /> of the new <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" />.</param>
            <returns>A new <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> equivalent to this except for the <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.Type" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring)">
            <summary>
                Indicates whether the current region is equivalent to <paramref name="obj" />.
            </summary>
            <returns>
                True if the current region has the same <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Value" />,
                as the <paramref name="obj" /> parameter; otherwise, false.
            </returns>
            <param name="obj">A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> to compare with this.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.op_Equality(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring)">
            <summary>
                Checks if <paramref name="left" /> and <paramref name="right" /> are the same substring.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> to compare.</param>
            <param name="right">The second <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> to compare.</param>
            <returns>
                True if <paramref name="left" /> and <paramref name="right" /> have the same
                <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Value" />.
            </returns>
            <seealso cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring)" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.op_Inequality(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring)">
            <summary>
                Checks if <paramref name="left" /> and <paramref name="right" /> are different substrings.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> to compare.</param>
            <param name="right">The second <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> to compare.</param>
            <returns>
                False if <paramref name="left" /> and <paramref name="right" /> have the same
                <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Value" />.
            </returns>
            <seealso cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring)" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.Create(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32},Microsoft.ProgramSynthesis.Wrangling.IType)">
            <summary>
                Creates a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> of the specified string and indexes.
            </summary>
            <param name="s">String to take a substring of.</param>
            <param name="start">The start index (inclusive).</param>
            <param name="end">The end index (exclusive).</param>
            <param name="type">The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.IType"/> of the <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring"/>.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> object representing the specified substring or <code>null</code> if
                <paramref name="s" /> is null.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.Slice(System.UInt32,System.Nullable{System.UInt32})">
            <summary>
                Return a sub-region of <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.SubstringInfo.S" /> between <paramref name="start" /> and <paramref name="end" />.
            </summary>
            <param name="start">The starting position of the slice.</param>
            <param name="end">The ending position of the slice.</param>
            <returns>The sliced sub-region.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.Concat(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring)">
            <summary>
                Constructs a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> of this concatenated with <paramref name="other" />. This concatenates
                the <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Value" />s of the two substrings.
            </summary>
            <param name="other">LearningCacheSubstring to concatenate after this one.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> of <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Value" /> concatenated with the
                <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Value" /> of <paramref name="other" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring.GetTypedValue``1">
            <summary>
                If possible, get this value as type <typeparamref name="T" />. This uses <see cref="P:Microsoft.ProgramSynthesis.Wrangling.ITypedValue.Type" /> and
                <see cref="M:Microsoft.ProgramSynthesis.Wrangling.IType`1.GetTypedValue(Microsoft.ProgramSynthesis.Wrangling.ITypedValue)" /> to do the conversion. This method exists to allow implementers of this
                interface to memoize the result.
            </summary>
            <typeparam name="T">Type to attempt to convert to.</typeparam>
            <returns>
                This value converted to <typeparamref name="T" /> according to <see cref="P:Microsoft.ProgramSynthesis.Wrangling.ITypedValue.Type" /> or
                <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" />.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.WholeColumnsUsed">
            <summary>
                Transformation.Text feature calculator for a <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> of <see cref="T:System.String" /> of column
                names of inputs used.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.WholeColumnsUsed.#ctor(Microsoft.ProgramSynthesis.Grammar,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.WholeColumnUsed,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.InputsUsed)">
            <summary>
            Constructs an instance of this feature calculator to compute the value of this feature on Transformation.Text programs.
            </summary>
            <param name="grammar">The grammar of Transformation.Text</param>
            <param name="wholeColumnUsed">An instance of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.WholeColumnUsed"/> feature calculator</param>
            <param name="inputsUsed">An instance of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.InputsUsed"/> feature calculator</param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.InputsUsed">
            <summary>
                Transformation.Text feature calculator for a <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> of <see cref="T:System.String" /> of column names of inputs used.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.InputsUsed.#ctor(Microsoft.ProgramSynthesis.Grammar)">
            <summary>
            Constructs an instance of this feature calculator to compute the value of this feature on Transformation.Text programs.
            </summary>
            <param name="grammar">The grammar of Transformation.Text</param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.NamespaceDoc">
            <summary>
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics"/> defines the operators for the Transformation.Text language.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics">
            <summary>
                The implementations of the operators in the Transformation.Text language.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.Tokens">
            <summary>
                The list of tokens to learn from.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.GetStaticTokenByName(System.String)">
            <summary>
                Returns the token having name matches <paramref name="name" />.
            </summary>
            <param name="name">The token name.</param>
            <returns>The token matching <paramref name="name" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.IfThenElse(System.Boolean,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring)">
            <summary>
                The conditional operator, which returns one of two values depending on the value of a Boolean condition.
            </summary>
            <param name="pred">The condition.</param>
            <param name="t">The first value.</param>
            <param name="st">The second value.</param>
            <returns>Returns <paramref name="t" /> if <paramref name="pred" />, <paramref name="st" /> otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ConstStr(System.String)">
            <summary>
                Wraps a constant string in a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" />.
            </summary>
            <param name="s">The constant string.</param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> containing exactly <paramref name="s" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ChooseInput(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IRow,System.String)">
            <summary>
                Selects the column <paramref name="columnName" /> from the input row <paramref name="row" />.
            </summary>
            <param name="row">Input to read column from.</param>
            <param name="columnName">Name of column to read.</param>
            <returns>
                The value of the specified cell cast to <c>string</c> as a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> (unless it is already
                a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" />).
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.IndexInput(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IRow,System.Int32)">
            <summary>
                Selects the column from the input row <paramref name="row" /> at (zero-based) index <paramref name="index" /> of
                the program's <c>columnsUsed</c>.
                NOTE: This method may NOT appear in serialized programs.
            </summary>
            <param name="row">Input to read column from.</param>
            <param name="index">Index (zero-based) of the column name in the program's <c>columnsUsed</c>.</param>
            <returns>The value of the specified cell as a <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.AsValueSubstring(System.Object)">
            <summary>
                Converts an <see cref="T:System.Object" /> from an <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.IRow" /> into a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" />.
                NOTE: This method may NOT appear in serialized programs.
            </summary>
            <param name="obj">Object to convert to a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" />.</param>
            <returns>
                <paramref name="obj" /> cast to <c>string</c> as a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> (unless it is already a
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" />).
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.Concat(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring)">
            <summary>
                Concatenates two <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" />s. Semantically equivalent to concatenating their
                <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Value" /> properties and constructing a new <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" />.
            </summary>
            <param name="s1">The left <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" />.</param>
            <param name="s2">The right <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" />.</param>
            <returns>The concatenation of the two <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" />s.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ToLowercase(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring)">
            <summary>
                Converts <paramref name="s" /> to lowercase according to the invariant culture.
            </summary>
            <param name="s">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> to convert to lowercase.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> containing the <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Value" /> of <paramref name="s" />
                converted to lowercase.
            </returns>
            <seealso cref="M:System.String.ToLowerInvariant" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ToUppercase(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring)">
            <summary>
                Converts <paramref name="s" /> to uppercase according to the invariant culture.
            </summary>
            <param name="s">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> to convert to uppercase.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> containing the <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Value" /> of <paramref name="s" />
                converted to uppercase.
            </returns>
            <seealso cref="M:System.String.ToUpperInvariant" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ToSimpleTitleCase(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring)">
            <summary>
                Converts <paramref name="s" /> to title case according to the invariant culture.
                This implements a simple definition of "title case" where every letter (according to
                <see cref="M:System.Char.IsLetter(System.Char)" />)
                not following another letter is converted to uppercase and all other letters are converted to lowercase.
            </summary>
            <param name="s">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> to convert to title case.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> containing the <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Value" /> of <paramref name="s" />
                converted to title case.
            </returns>
            <seealso cref="M:System.Char.ToLowerInvariant(System.Char)" />
            <seealso cref="M:System.Char.ToUpperInvariant(System.Char)" />
            <seealso cref="M:System.Char.IsLetter(System.Char)" />
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.SubStr(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,System.Tuple{System.Nullable{System.UInt32},System.Nullable{System.UInt32}})">
            <summary>
                Takes a substring of the <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> <paramref name="sr" /> based on start and end positions in
                <paramref name="pp" />.
            </summary>
            <param name="sr">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> to take a substring of.</param>
            <param name="pp">
                The start (inclusive) and end (exclusive) positions for the substring operation. If either is null,
                the result is null.
            </param>
            <returns>The substring if <paramref name="pp" /> contains valid start and end positions, or null otherwise.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.RSubStr(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,System.Nullable{System.UInt32})">
            <summary>
                Removes the first <paramref name="idx" /> characters from the start of <paramref name="s" />.
            </summary>
            <param name="s">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> to take a substring of.</param>
            <param name="idx">The number of characters to </param>
            <returns>
                A substring removing the first <paramref name="idx" /> characters of <paramref name="s" />, or null if
                <paramref name="idx" /> is null or invalid.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.Add(System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
                Adds two numbers.
            </summary>
            <param name="x">The first number or null.</param>
            <param name="y">The second number or null.</param>
            <returns>The sum of <paramref name="x" /> and <paramref name="y" /> or null if either is null.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.AbsolutePosition(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,System.Int32)">
            <summary>
                Computes an absolute position within an input string, possibly relative to the end.
                If <paramref name="k" /> is negative, it is interpreted as counting from the right, with -1 being the position at
                the end of the string.
                Note that <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.S" /> property (NOT the <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.Value" /> property) of
                <paramref name="s" /> is used for the string length because it corresponds to the input string as opposed to some
                computed substring.
            </summary>
            <param name="s">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> whose <see cref="P:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.Substring.S" /> property is used for the string.</param>
            <param name="k">A positive int of in index into the string or a negative int </param>
            <returns>
                The positive absolute position, or null if <paramref name="k" /> does not reference a position within
                <paramref name="s" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.RegexPosition(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,System.Tuple{Microsoft.ProgramSynthesis.Extraction.Text.Semantics.RegularExpression,Microsoft.ProgramSynthesis.Extraction.Text.Semantics.RegularExpression},System.Int32)">
            <summary>
                The position in <paramref name="sr" /> of the <paramref name="k" />th match of the regular expression
                <paramref name="RR" />.
                If <paramref name="k" /> is negative, then the matches are counted from the end. That is, -1 means to return the
                index of the last match.
            </summary>
            <param name="sr">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> to search through.</param>
            <param name="RR">The <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.RegularExpression" /> to match on.</param>
            <param name="k">Which match of <paramref name="RR" /> to give the position for.</param>
            <returns>The position of the specified match of <paramref name="RR" /> or null if no such match exists.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.RegexPositionPair(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Extraction.Text.Semantics.RegularExpression,System.Int32)">
            <summary>
                Compute the position pair for a custom extractor.
            </summary>
            <param name="sr">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> to search through.</param>
            <param name="r">The <see cref="T:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.RegularExpression" /> to match on.</param>
            <param name="k">
                The index of the match to use for computing the position pair. If negative, the value -1 corresponds to
                the last match, and so on.
            </param>
            <returns>
                A tuple containing the start and end indexes of the <paramref name="k" />th match of <paramref name="r" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ExternalExtractorPositionPair(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor,System.Int32)">
            <summary>
                Compute the position pair for a custom extractor.
            </summary>
            <param name="x">The substring to use as input to the extractor.</param>
            <param name="extractor">The custom extractor to use.</param>
            <param name="k">
                The index of the match to use for computing the position pair. If negative, the value -1 corresponds to
                the last match, and so on.
            </param>
            <returns>
                A tuple containing the start and end indexes of the <paramref name="k" />th instance entity/concept extracted
                by <paramref name="extractor" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParseNumber(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails)">
            <summary>
                Parse a decimal number from a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" />.
            </summary>
            <param name="sr">String to parse number from.</param>
            <param name="formatDetails">Format details to use to decide how to parse number.</param>
            <returns>
                The <see cref="T:System.Decimal" /> parsed value of <paramref name="sr" />, or <code>null</code> if
                <paramref name="sr" /> is <code>null</code> or does not represent a valid <see cref="T:System.Decimal" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.RoundNumber(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec)">
            <summary>
                Round a number according to the given rounding specification. A rounding specification includes a
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec.Zero" />, <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec.Delta" />, and <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec.Mode" />.
            </summary>
            <param name="number">The number to round.</param>
            <param name="roundingSpecification">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec" /> describing how to round.</param>
            <returns>
                <paramref name="number" /> rounded according to <paramref name="roundingSpecification" /> or <code>null</code>
                if <paramref name="number" /> is <code>null</code>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.BuildNumberFormat(System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails)">
            <summary>
                Constructs a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat"/>.
            </summary>
            <param name="minTrailingZeros">Minimum number of digits after the decimal.</param>
            <param name="maxTrailingZeros">Maximum number of digits after the decimal.</param>
            <param name="minTrailingZerosAndWhitespace">
                Minimum number of characters after the decimal including whitespace
                padding.
            </param>
            <param name="minLeadingZeros">Minimum number of digits before the decimal.</param>
            <param name="minLeadingZerosAndWhitespace">
                Minimum number of characters before the decimal including whitespace
                padding.
            </param>
            <param name="details">Other format details in a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails"/>.</param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat"/> wrapping the arguments.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumber(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat)">
            <summary>
                Formats a number as a string according to <paramref name="format" />.
            </summary>
            <param name="number">The number to be formatted.</param>
            <param name="format">The rules to use for converting <paramref name="number" /> to a string.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> of <paramref name="number" /> formatted according to
                <paramref name="format" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumericRange(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec)">
            <summary>
                Format a numeric range (e.g. 34.1 to "30-35").
            </summary>
            <param name="number">The number to format.</param>
            <param name="format">The number format to use for the lower and upper ends of the range.</param>
            <param name="delimiter">The delimiter to put between the lower and upper ends of the range.</param>
            <param name="lowerRounding">The rounding specification for the lower end of the range.</param>
            <param name="upperRounding">The rounding specification for the upper end of the range.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> of the format "{lower}{delimiter}{upper}" where lower and upper are
                <paramref name="number" /> rounded using <paramref name="lowerRounding" /> and <paramref name="upperRounding" />
                respectively and formatted using <paramref name="format" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParsePartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat[])">
            <summary>
                Parses a datetime into a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime"/> from one or more possible input datetime formats.
                Note this does not return a <see cref="T:System.DateTime"/> because it allows parsing dates that <see cref="T:System.DateTime"/>
                will refuse to represent due to not having enough information like just a day of the week.
            </summary>
            <param name="s">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> to parse as a datetime.</param>
            <param name="inputFormats">
                The date formats to try, in order, to parse <paramref name="s" /> with according to <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateFormatCache.Parse(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,Microsoft.ProgramSynthesis.Extraction.Text.Semantics.LearningCacheSubstring)"/>.
            </param>
            <returns>
                The datetime in <paramref name="s" /> or null if unable to parse a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> out of <paramref name="s" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)">
            <summary>
                Reformats a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime"/> into a given output datetime format.
            </summary>
            <param name="dt">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> to format as string.</param>
            <param name="outputFormat">The date format to use according to <see cref="M:System.DateTime.ToString(System.String)" /></param>
            <returns>
                The datetime in <paramref name="dt" /> reformatted according to <paramref name="outputFormat" /> or null if
                unable to use the given format.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.GetBiggestTimePart(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime)">
            <summary>
                Finds the largest time unit that is set in the given <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime"/>.
            </summary>
            <param name="dt">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime"/> to search.</param>
            <returns>
                The largest time unit that is set in <paramref name="dt" /> or <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Hour"/>
                if none are found.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.GetNextBiggerPart(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart)">
            <summary>
                Returns the next bigger <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart"/> for a time unit.
            </summary>
            <param name="unit">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart"/> to increase.</param>
            <returns>The next bigger <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart"/> than <paramref name="unit"/>.</returns>
            <throws><see cref="T:System.NotImplementedException"/> if <paramref name="unit"/> is not a time unit.</throws>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.GetNextSmallerPart(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart)">
            <summary>
                Returns the next smaller <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart"/> time unit for a unit.
            </summary>
            <param name="unit">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart"/> to decrease.</param>
            <returns>The next smaller <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart"/> than <paramref name="unit"/>.</returns>
            <throws>
                <see cref="T:System.NotImplementedException"/> if <paramref name="unit"/> is
                <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Millisecond"/> or a date unit larger than <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart.Day"/>.
            </throws>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.IncludeSmallerParts(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet)">
            <summary>
               Adds all time parts smaller than the largest time part in a bitmask of date/time parts.
            </summary>
            <param name="parts">The bitmask to update.</param>
            <remarks>
                Basic operations for <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart"/> bitmasks can be found in
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartUtil"/>.
            </remarks>
            <returns>
                A new bitmask with an additional bit set for each time part that is smaller
                than the largest time part in <param ref="parts"/>
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.GetPartialDateTimeOnlyTime(System.Int64,System.Nullable{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePartSet})">
            <summary>
                Convert a number of milliseconds into a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime"/> of time parts.
            </summary>
            <param name="milliseconds">The time specified as the number of milliseconds since midnight.</param>
            <param name="optionalPartSpec">
                An optional bitmask specifying which units in the resulting
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime"/> should be given values.
            </param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime"/> corresponding to the number of milliseconds provided.
                If <paramref name="optionalPartSpec"/> is specified, then omitted parts are set to zero
                and the corresponding milliseconds are discarded.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.GetMillisecondsForPart(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart)">
            <summary>
                Returns the number of milliseconds in one instance of the specified time unit.
            </summary>
            <param name="part">The unit to convert to milliseconds.</param>
            <returns>The number of milliseconds in one <paramref name="part"/>.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.GetTotalMilliseconds(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime)">
            <summary>
                Returns the number of milliseconds in a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime"/>.  Units
                larger than hours are ignored.
            </summary>
            <param name="dt">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime"/> to convert to milliseconds.</param>
            <returns>The number of milliseconds in <paramref name="dt"/>.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.Add(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,System.Int32,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart)">
            <summary>
                Add a specified number of a specified time unit to a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime"/>.
            </summary>
            <param name="datetime">The base time.</param>
            <param name="amount">The number of <paramref name="part"/>s to add to <paramref name="datetime"/>.</param>
            <param name="part">The unit to add.</param>
            <returns>
                The result of adding <paramref name="amount"/> <paramref name="part"/>s to <paramref name="datetime"/>.
                Unit larger than the largest time unit in <paramref name="datetime"/> are discarded.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.RoundPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec)">
            <summary>
                Round a date/time according to the given rounding specification. A rounding specification includes a
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.Zero" />, <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.Delta" />,
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.Unit" />, <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.Mode" />, and optionally
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.UpperExcludePart"/> and <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec.UpperExcludeAmount"/>.
            </summary>
            <param name="dateTime">The date/time to round.</param>
            <param name="roundingSpecification">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec" /> describing how to round.</param>
            <returns>
                <paramref name="dateTime" /> rounded according to <paramref name="roundingSpecification" /> or <code>null</code>
                if <paramref name="dateTime" /> is <code>null</code>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatDateTimeRange(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec)">
            <summary>
                Format a date/time range (e.g. 2:22pm to "2:00pm-3:00pm").
            </summary>
            <param name="datetime">The date/time to format.</param>
            <param name="format">The date/time format to use for the lower and upper ends of the range.</param>
            <param name="delimiter">The delimiter to put between the lower and upper ends of the range.</param>
            <param name="lowerRounding">The rounding specification for the lower end of the range.</param>
            <param name="upperRounding">The rounding specification for the upper end of the range.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> of the format "{lower}{delimiter}{upper}" where lower and upper are
                <paramref name="datetime" /> rounded using <paramref name="lowerRounding" /> and <paramref name="upperRounding" />
                respectively and formatted using <paramref name="format" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.Lookup(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,System.Collections.Generic.IReadOnlyDictionary{Microsoft.ProgramSynthesis.Utils.Optional{System.String},System.String})">
            <summary>
                Looks a string up in a dictionary.
            </summary>
            <param name="x">String to lookup.</param>
            <param name="lookupDictionary">
                A dictionary which maps <c>string</c>s to <c>string</c>s. Keys are actually
                <see cref="T:Microsoft.ProgramSynthesis.Utils.Optional`1" /> because <c>null</c> is not allowed as a dictionary key, so
                <see cref="F:Microsoft.ProgramSynthesis.Utils.Optional`1.Nothing" /> is used instead.
            </param>
            <returns>
                The string found in <paramref name="lookupDictionary" /> wrapped in a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring" /> or
                <c>null</c> if <paramref name="x" /> is not in <paramref name="lookupDictionary" />.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.WholeColumnUsed">
            <summary>
                Transformation.Text feature calculator that determines whether a subprogram uses an entire
                column that is provided to it.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.WholeColumnUsed.#ctor(Microsoft.ProgramSynthesis.Grammar)">
            <summary>
                Constructs an instance of this feature calculator to compute the value of this feature on
                Transformation.Text programs.
            </summary>
            <param name="grammar">The grammar of Transformation.Text</param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.LookupFallbackMode">
            <summary>
                Selection for when falling back to a <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.Lookup(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,System.Collections.Generic.IReadOnlyDictionary{Microsoft.ProgramSynthesis.Utils.Optional{System.String},System.String})" /> transformation is allowed.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.LookupFallbackMode.Heuristic">
            <summary>
                Allow the synthesizer to choose based on its own heuristics.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.LookupFallbackMode.Always">
            <summary>
                Always fall back to a lookup if no other program can be learned.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.LookupFallbackMode.Never">
            <summary>
                Never fall back to a lookup, even if no other program can be learned.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ConcatLocation">
            <summary>
                Where in the output string concatenations are allowed.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ConcatLocation.Anywhere">
            <summary>
                Between any two characters.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ConcatLocation.AtTokenBoundaries">
            <summary>
                Only at token boundaries, as defined by <see cref="F:Microsoft.ProgramSynthesis.Extraction.Text.Semantics.StringLearningCache.StaticTokens"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses">
            <summary>
                The witness functions for Transformation.Text.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options">
            <summary>
                Options used by the witness functions.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.OutputType">
            <summary>
                The required output type.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.ParseSingleDateFormat">
            <summary>
                If true, then don't generate <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParsePartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat[])" /> calls that use multiple formats.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.AllowTransformations(Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind[])">
            <summary>
                Allow specific transformations to be used.
            </summary>
            <param name="transformations">The transformations that are to be enabled.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.ForbidTransformations(Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind[])">
            <summary>
                Forbid specific transformations from being used.
            </summary>
            <param name="transformations">The transformations that are to be forbidden.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.AllowAllTransformations">
            <summary>
                Allow all possible transformations.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.ForbidAllTransformations">
            <summary>
                Forbid all possible transformations.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.AllowedTransformations">
            <summary>
                Bitmask of allowed <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind"/>s.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.AllowConcat">
            <summary>
                If false, don't generate <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.Concat(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.ConcatLocation">
            <summary>
                Where the output may be the result of string concatenation. Note that this does not determine whether concatenation
                will be learned at all which is controlled by <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.AllowConcat" />/<see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.AllowedTransformations" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.LookupFallbackMode">
            <summary>
                Determines whether <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.Lookup(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,System.Collections.Generic.IReadOnlyDictionary{Microsoft.ProgramSynthesis.Utils.Optional{System.String},System.String})" /> will be generated as a fallback if no other program can be
                learned. <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.LookupFallbackMode.Heuristic"/> by default.
            </summary>
            <seealso cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.LookupFallbackMode"/>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.AllowConstantProgram">
            <summary>
                If <c>false</c>, then programs which do not depend on the input (only contain <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ConstStr(System.String)" />)
                may not be learned.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.RequiredColumns">
            <summary>
                The columns which must be used by any valid program.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.ForbiddenConstants">
            <summary>
                Strings which may not be used by <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ConstStr(System.String)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.RandomSeed">
            <summary>
                Seed used for initializing <see cref="T:System.Random" /> when randomness is required to ensure the random values are
                deterministic.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.ExternalExtractors">
            <summary>
                The set of custom extractors that can be used to learn the <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ExternalExtractorPositionPair(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.CustomExtraction.CustomExtractor,System.Int32)" /> operator.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.GetCaseInsensitiveSubStrings(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring})">
            <summary>
            Looks for substrings with a case-insensitive comparison.
            For use with case transformation witness functions which are going to
            change the case of the result anyway, so the input case doesn't matter.
            </summary>
            <param name="xSR">String to search for substrings</param>
            <param name="outputs">Strings to search for</param>
            <returns>All of the substrings of xSR that match outputs case-insensitively</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.MatchWithState">
            <summary>
                Wrapper type for a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" /> which is a parse of an output as a datetime, paired with the
                corresponding input state for that output.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.MatchWithState.InputState">
            <summary>
                The input state which has to provide the information to build the output.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.MatchWithState.Match">
            <summary>
                The parse of the output as a datetime.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.MatchWithState.#ctor(Microsoft.ProgramSynthesis.State,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch)">
            <summary>
                Initializes a new instance of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.MatchWithState" />.
            </summary>
            <param name="inputState">The input.</param>
            <param name="match">The interpretation of the output as a datetime.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.GetOutputMatchesByFormat(Microsoft.ProgramSynthesis.Specifications.DisjunctiveExamplesSpec)">
            <summary>
                Finds the set of all <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" />s which work for every example. The output is a mapping from
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> to a mapping from every input to the possible ways to parse one of the possible
                outputs to match that format. Since <paramref name="spec" /> is a <see cref="T:Microsoft.ProgramSynthesis.Specifications.DisjunctiveExamplesSpec" />, each
                input may correspond to multiple different output strings in addition to using different formats to parse the same
                output string. The parse of the output can be used to determine if a given parse of the input provides the needed
                information to explain that date.
            </summary>
            <param name="spec">
                <see cref="T:Microsoft.ProgramSynthesis.Specifications.DisjunctiveExamplesSpec" /> giving the inputs and all of the valid output strings for
                each input.
            </param>
            <returns>
                For each format that could be used for the output, for each input state, a parse of the output according to
                that format.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.BindColumnNameIfMissing(Microsoft.ProgramSynthesis.State,System.String)">
            <summary>
                Bind the <c>columnName</c> and <c>x</c> (column value) symbols in a state if they are missing. They will get set in
                the inputs in the spec, but they don't get set in the additional inputs, so to use additional inputs, the
                <paramref name="columnName" /> has to be read out of the spec and bound with this method.
            </summary>
            <param name="state">
                Input state that may be missing bindings for <c>x</c> and <c>columnName</c>. If they are not
                missing, then <c>columnName</c> must be <paramref name="columnName" />.
            </param>
            <param name="columnName">
                Column name to use; get this by looking up <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses._columnNameSymbol" /> in a
                <see cref="T:Microsoft.ProgramSynthesis.State" /> from the spec.
            </param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.State" /> that has the <c>columnName</c> and <c>x</c> symbols set properly.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.GetExampleInputStatesIfAny(Microsoft.ProgramSynthesis.Learning.LearningTask)">
            <summary>
                Get the input states which examples have been provided for or <c>null</c> if no examples were given. This special
                cases <see cref="T:Microsoft.ProgramSynthesis.Specifications.OutputNotNullSpec" /> with a single input because that is used so there is a state that gets the
                <c>columnName</c> set.
            </summary>
            <param name="task">
                The <see cref="T:Microsoft.ProgramSynthesis.Learning.LearningTask" /> to get the <see cref="T:Microsoft.ProgramSynthesis.Specifications.Spec" /> and
                <see cref="P:Microsoft.ProgramSynthesis.Learning.LearningTask.AdditionalInputs" /> from.
            </param>
            <returns>The distinct input states actually referenced by the examples.</returns>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormat">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> required for the output, if any. The <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.Options.OutputType" /> may
                specify a specific datetime format for the output. If it does, <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.Concat(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring)" /> will not be allowed,
                so this format corresponds to the output for the <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)" /> rule.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatParts">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" />s required to appear in the output, if any. This is a weaker constraint than
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormat" /> because instead of giving a specific format, it just specifies what information
                must be included in the output format.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.GetColumnName(Microsoft.ProgramSynthesis.Specifications.Spec)">
            <summary>
                Gets the column name selected for a <see cref="T:Microsoft.ProgramSynthesis.Specifications.Spec" />. This is useful for being able to use additional
                inputs, which will not have the column name set, via running <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.BindColumnNameIfMissing(Microsoft.ProgramSynthesis.State,System.String)" /> on them.
            </summary>
            <param name="spec">
                <see cref="T:Microsoft.ProgramSynthesis.Specifications.Spec" /> to extract the column name from. This must be a spec for a symbol below
                the <c>LetColumnName</c> rule.
            </param>
            <returns>The column being processed by this part of the learning procedure.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.GetColumnName(Microsoft.ProgramSynthesis.Learning.LearningTask)">
            <summary>
                Gets the column name selected for a <see cref="T:Microsoft.ProgramSynthesis.Learning.LearningTask" />. This is useful for being able to use additional
                inputs, which will not have the column name set, via running <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.BindColumnNameIfMissing(Microsoft.ProgramSynthesis.State,System.String)" /> on them.
            </summary>
            <param name="task">
                <see cref="T:Microsoft.ProgramSynthesis.Learning.LearningTask" /> to extract the column name from. This must be a task for a symbol below
                the <c>LetColumnName</c> rule.
            </param>
            <returns>The column being processed by this part of the learning procedure.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo">
            <summary>
                Wraps information about what datetime format to choose for the output. Many different types of information are used: an
                explicit <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.Format" /> given, a set of <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.Parts" /> which must be included in the output, an explicit
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.RangeFormat" /> given, and parses of the example outputs given by <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.OutputDtMatchByState" /> or
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.OutputDtRangeByState" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.Format">
            <summary>
                The exact <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> the output should be in. If <c>null</c>, then the format has to be learned.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.Parts">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" />s which must appear in the output. If <c>null</c>, then the set is not restricted
                (same as if it is empty).
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.RangeFormat">
            <summary>
                The exact <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.DateTimeRangeFormat" /> the output should be in. If <c>null</c>, then the output is not
                a range.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.OutputDtMatchByState">
            <summary>
                A mapping from input states to outputs for that input parsed according to <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.Format" />. If this is not
                <c>null</c>, then <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.Format" /> must also be not <c>null</c>.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.OutputDtRangeByState">
            <summary>
                A mapping from input states to output ranges for that input parsed according to <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.RangeFormat" />.
                If this is not <c>null</c>, then <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.RangeFormat" /> must also be not <c>null</c>.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.AllowNumericInputFormats">
            <summary>
                If true, this output format may be used with input formats consisting only of digits. This is false for output
                formats consisting only of digits in order to prevent using date transformations on numbers.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.GetPossibleOutputFormatInfosFromConstraints(Microsoft.ProgramSynthesis.Specifications.Spec)">
            <summary>
                Selects <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo" />s representing the possible output datetime formats. based on the
                examples and type constraints.
            </summary>
            <param name="spec">The spec to synthesize the <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)" /> rule from.</param>
            <returns>
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo" />s to use to inform the synthesis of
                <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParsePartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat[])" /> rules.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.ExtractSubDateTimeFormat(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,System.Collections.Immutable.IImmutableSet{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart})">
            <summary>
                Find a piece of a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> that matches a given smaller set of parts. For example (using
                concrete dates instead of formats for explanation purposes), given a format like "July 12, 2034" and the parts
                Month and Day, want to get just "July 12".
            </summary>
            <param name="format">The format to attempt to find a subformat of.</param>
            <param name="outputParts">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart" />s that must appear in the subformat.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> which is a subformat (or all of) <paramref name="format" /> that includes
                <paramref name="outputParts" />. Note this will return <paramref name="format" /> unless it can find a subformat
                that matches exactly <paramref name="outputParts" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.ChooseOutputDateTimeFormat(System.Collections.Generic.IReadOnlyList{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo)">
            <summary>
                Choose an output <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> when there are no examples and the constraints do not give a
                specific format. This code tries to use a format matching the input if possible, and falls back to a default format
                from <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatUtil.GetDefaultDateTimeFormat(System.Collections.Immutable.IImmutableSet{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart})" />.
            </summary>
            <param name="inputFormats">Formats that may be parsed by code using this output <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" />.</param>
            <param name="outputFormatInfo">Information on what the output format should look like.</param>
            <returns>A single <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> determined to be the best choice given the inputs and constraints.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.BuildOutputDtFormatProgramSet(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)">
            <summary>
                Build a singleton <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" /> containing a <see cref="T:Microsoft.ProgramSynthesis.AST.LiteralNode" /> of
                <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses._outputDtFormatSymbol" />.
            </summary>
            <param name="format">The output <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> this <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" /> will evaluate to.</param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" /> containing just <paramref name="format" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.LearnReformatDateForParseWithoutExamples(Microsoft.ProgramSynthesis.VersionSpace.JoinProgramSet,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo,Microsoft.ProgramSynthesis.Rules.BlackBoxRule,Microsoft.ProgramSynthesis.State)">
            <summary>
                Learn a <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)" /> program set for a specific
                <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParsePartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat[])" /> program set without any examples, so the output format depends on the
                constraints and the input formats.
            </summary>
            <param name="conversionParseDateSet">The <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParsePartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat[])" /> program set used to parse the input date.</param>
            <param name="outputFormatInfo">
                The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo" /> to give to
                <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.ChooseOutputDateTimeFormat(System.Collections.Generic.IReadOnlyList{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo)" />.
            </param>
            <param name="formatDateRule">The <see cref="T:Microsoft.ProgramSynthesis.Rules.BlackBoxRule" /> for <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)" />.</param>
            <param name="anyState">
                Any <see cref="T:Microsoft.ProgramSynthesis.State" />; used to call <see cref="M:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet.ClusterOnInput(Microsoft.ProgramSynthesis.State)" /> for a constant
                so its value doesn't matter.
            </param>
            <returns>
                A collection of <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" />s which parse the date using some program from
                <paramref name="conversionParseDateSet" /> and format the date according to <paramref name="outputFormatInfo" /> and the date
                formats used by <paramref name="conversionParseDateSet" /> for parsing input dates.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.LearnReformatDateForOutputFormatInfo(Microsoft.ProgramSynthesis.Learning.SynthesisEngine,Microsoft.ProgramSynthesis.Rules.BlackBoxRule,Microsoft.ProgramSynthesis.Learning.LearningTask{Microsoft.ProgramSynthesis.Specifications.Spec},System.Threading.CancellationToken,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo)">
            <summary>
                Learns a <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" /> of <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)" /> which has
                <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParsePartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat[])" /> as its first argument (hence "reformat") where the output format is
                constrained by <paramref name="outputFormatInfo" />.
            </summary>
            <param name="engine">The synthesis engine.</param>
            <param name="formatDateRule">The <see cref="T:Microsoft.ProgramSynthesis.Rules.BlackBoxRule" /> for <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)" />.</param>
            <param name="task">The <see cref="T:Microsoft.ProgramSynthesis.Learning.LearningTask" /> for the <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)" /> rule.</param>
            <param name="cancel">Cancellation token.</param>
            <param name="outputFormatInfo">Information on what the output format should look like.</param>
            <returns>
                A list of <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" />s of <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)" />, where each one uses a
                different output format.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.LearnReformatDate(Microsoft.ProgramSynthesis.Learning.SynthesisEngine,Microsoft.ProgramSynthesis.Rules.BlackBoxRule,Microsoft.ProgramSynthesis.Learning.LearningTask{Microsoft.ProgramSynthesis.Specifications.Spec},System.Threading.CancellationToken)">
            <summary>
                Learns a <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" /> of <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)" /> which has
                <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParsePartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat[])" /> as its first argument (hence "reformat").
            </summary>
            <param name="engine">The synthesis engine.</param>
            <param name="formatDateRule">The <see cref="T:Microsoft.ProgramSynthesis.Rules.BlackBoxRule" /> for <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)" />.</param>
            <param name="task">The <see cref="T:Microsoft.ProgramSynthesis.Learning.LearningTask" /> for the <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)" /> rule.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" /> of <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)" /> which has
                <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParsePartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat[])" /> as its first argument.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.LearnSubstringForParseDate(Microsoft.ProgramSynthesis.Learning.SynthesisEngine,Microsoft.ProgramSynthesis.Learning.LearningTask,System.Threading.CancellationToken,System.String,System.Collections.Generic.IReadOnlyDictionary{Microsoft.ProgramSynthesis.State,System.Collections.Immutable.IImmutableList{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch}})">
            <summary>
                Learns a substring program for a <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParsePartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat[])" /> rule.
            </summary>
            <param name="engine">The synthesis engine.</param>
            <param name="task">
                The learning task for <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParsePartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat[])" />. Only used for the inputs;
                information about the outputs comes from <paramref name="inputMatchesByInput" />.
            </param>
            <param name="cancel">The cancellation token.</param>
            <param name="columnName">The column to select the substring from.</param>
            <param name="inputMatchesByInput">
                Dictionary from input states to the possible <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" />es for
                that input.
            </param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" /> of substring programs that select the strings matched by
                <paramref name="inputMatchesByInput" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.LearnParseDateForOutputFormatInfo(Microsoft.ProgramSynthesis.Learning.SynthesisEngine,Microsoft.ProgramSynthesis.Rules.BlackBoxRule,Microsoft.ProgramSynthesis.Learning.LearningTask,System.Threading.CancellationToken,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo)">
            <summary>
                Learns <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParsePartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat[])" /> <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.JoinProgramSet" />s for a given
                <paramref name="outputFormatInfo" />.
            </summary>
            <param name="engine">The synthesis engine.</param>
            <param name="parseDateRule">The <see cref="T:Microsoft.ProgramSynthesis.Rules.BlackBoxRule" /> for <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParsePartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat[])" />.</param>
            <param name="task">
                The learning task for <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParsePartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat[])" />. Only used for the inputs;
                information about the outputs comes from <paramref name="outputFormatInfo" />.
            </param>
            <param name="cancel">The CancellationToken.</param>
            <param name="outputFormatInfo">Describes the constraints on the output formats to determine what input formats to use.</param>
            <returns>
                A collection of joins of <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParsePartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat[])" />s where each one takes a different
                substring of the input.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.IsValidInputDateTimeFormat(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Utils.Optional{System.Collections.Generic.IReadOnlyCollection{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch}})">
            <summary>
                Checks if <paramref name="format" /> can be used to parse <paramref name="inputString" />.
            </summary>
            <param name="format"><see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> to parse.</param>
            <param name="inputString">String to parse.</param>
            <param name="outputDtMatches">Optionally, the values which must be parsed out of the string.</param>
            <returns>
                True if <paramref name="inputString" /> is explained by <paramref name="format" /> and
                <paramref name="outputDtMatches" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.GetInputMatches(Microsoft.ProgramSynthesis.State,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo)">
            <summary>
                Gets all of the <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" />es that select an input datetime from <paramref name="state" />
                which agree with <paramref name="outputFormatInfo" />.
            </summary>
            <param name="state">The input state, including the <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses._xSymbol" /> of the column to read from.</param>
            <param name="outputFormatInfo">The description of the corresponding output.</param>
            <returns>
                All ways to parse <paramref name="state" /> to get an input datetime which may be used to format an output
                consistent with <paramref name="outputFormatInfo" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.IsValidInputMatch(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch,Microsoft.ProgramSynthesis.State,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo)">
            <summary>
                Checks if <paramref name="inputMatch" /> is a valid input for <paramref name="outputFormatInfo" />.
            </summary>
            <param name="inputMatch">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatMatch" /> in the input string.</param>
            <param name="state">
                The input <see cref="T:Microsoft.ProgramSynthesis.State" /> used to lookup the output in
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.OutputDateTimeFormatInfo.OutputDtMatchByState" />.
            </param>
            <param name="outputFormatInfo">The information about the output that the input has to match.</param>
            <returns>True if <paramref name="inputMatch" /> may be used as an input for <paramref name="outputFormatInfo" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.IsBetween(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,System.Collections.Immutable.IImmutableSet{Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimePart})">
            <summary>
                Determine whether a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime" /> is in a range.
            </summary>
            <param name="candidate">The value to be checked against the range.</param>
            <param name="lower">The lower part of the range.</param>
            <param name="upper">The upper part of the range.</param>
            <param name="parts">Currently ignored - The relevant parts to consider.</param>
            <remarks>
                If <paramref name="lower"/> is greater than <paramref name="upper"/>, then the range is
                assumed to have wrapped around.  In the case, <paramref name="candidate"/> is checked to
                be larger than <paramref name="lower"/> OR smaller than <paramref name="upper"/>.
            </remarks>
            <returns>
                True if <paramref name="candidate" /> is in the range described by <paramref name="lower" />
                and <paramref name="upper" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.LearnFormatNumber(Microsoft.ProgramSynthesis.Learning.SynthesisEngine,Microsoft.ProgramSynthesis.Rules.BlackBoxRule,Microsoft.ProgramSynthesis.Learning.LearningTask{Microsoft.ProgramSynthesis.Specifications.Spec},System.Threading.CancellationToken)">
            <summary>
                Learn a <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" /> of a <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumber(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat)" /> call. This looks at the output type to
                decide how to format the number.
            </summary>
            <param name="engine">The <see cref="T:Microsoft.ProgramSynthesis.Learning.SynthesisEngine" />.</param>
            <param name="formatNumberRule">The grammar rule for <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumber(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat)" />.</param>
            <param name="task">
                The <see cref="T:Microsoft.ProgramSynthesis.Learning.LearningTask" /> which gives the inputs and may have an <see cref="T:Microsoft.ProgramSynthesis.Specifications.ExampleSpec" />.
            </param>
            <param name="cancel">The cancellation token.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.VersionSpace.ProgramSet" /> of the <c>f</c> symbol that contains only programs that format numbers extracted
                as substrings of the input (i.e. no rounding).
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.LearnNumber(Microsoft.ProgramSynthesis.Learning.SynthesisEngine,Microsoft.ProgramSynthesis.Rules.BlackBoxRule,Microsoft.ProgramSynthesis.Learning.LearningTask{Microsoft.ProgramSynthesis.Specifications.Spec},System.Threading.CancellationToken)">
            <summary>
                Learn for the <c>number</c> symbol as the first argument to <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumber(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat)" />.
            </summary>
            <param name="engine">The synthesis engine.</param>
            <param name="formatNumberRule">The grammar rule for <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumber(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat)" />.</param>
            <param name="task">The learning task for <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumber(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat)" />.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>
                The programs to select a number (possibly rounded) for the first argument
                <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumber(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat)" />.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.RoundingFactors(System.Int64)">
            <summary>
                Factor the number <paramref name="d" /> to select deltas to use for rounding. Note this does not generate all
                factors; instead it only generates powers of 10 and 5 times those powers of 10 in order to limit rounding to make
                natural and understandable cases.
            </summary>
            <param name="d">Number to find factors for.</param>
            <returns>
                All factors of <paramref name="d" /> which can be expressed as <c>Math.Pow(10, x)</c> or
                <c>5*Math.Pow(10, x)</c> for some non-negative integer <c>x</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.LeastSignificantDigit(System.Decimal)">
            <summary>
                Computes the least significant digit of <paramref name="number" />. For example, 4800 => 100 => 2 and 3.430 => 0.01
                => -2.
            </summary>
            <param name="number">Number to get least significant digit of.</param>
            <returns>The power of 10 of the least significant digit of <paramref name="number" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.WitnessRegPosRR(Microsoft.ProgramSynthesis.Rules.BlackBoxRule,Microsoft.ProgramSynthesis.Specifications.DisjunctiveExamplesSpec)">
            <summary>
                Learns RR.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.WitnessRegPosK(Microsoft.ProgramSynthesis.Rules.BlackBoxRule,Microsoft.ProgramSynthesis.Specifications.DisjunctiveExamplesSpec,Microsoft.ProgramSynthesis.Specifications.ExampleSpec)">
            <summary>
                Learns K.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.WitnessRegPosPairRegEx(Microsoft.ProgramSynthesis.Rules.BlackBoxRule,Microsoft.ProgramSynthesis.Specifications.DisjunctiveExamplesSpec)">
            <summary>
                Learns r.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.WitnessRegPosPairK(Microsoft.ProgramSynthesis.Rules.BlackBoxRule,Microsoft.ProgramSynthesis.Specifications.DisjunctiveExamplesSpec,Microsoft.ProgramSynthesis.Specifications.ExampleSpec)">
            <summary>
                Learns K.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.WitnessExternalExtractorPositionPairExtractor(Microsoft.ProgramSynthesis.Rules.BlackBoxRule,Microsoft.ProgramSynthesis.Specifications.DisjunctiveExamplesSpec)">
            <summary>
                Learns external extractors.
            </summary>
            <param name="rule">The rule.</param>
            <param name="spec">The specification from which to learn.</param>
            <returns>A specification for the "extractor" parameter of Semantics.ExternalExtractorPositionPair.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.WitnessExternalExtractorPositionPairK(Microsoft.ProgramSynthesis.Rules.BlackBoxRule,Microsoft.ProgramSynthesis.Specifications.DisjunctiveExamplesSpec,Microsoft.ProgramSynthesis.Specifications.ExampleSpec)">
            <summary>
                Learns k for an external extractor.
            </summary>
            <param name="rule">The rule.</param>
            <param name="outerSpec">The outer specification from which to learn.</param>
            <param name="extractorSpec">The specification for the extractor itself.</param>
            <returns>A specification for the "k" parameter of Semantics.ExternalExtractorPositionPair.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Witnesses.IsAllowedLookup(System.Collections.Generic.HashSet{System.Collections.Generic.KeyValuePair{Microsoft.ProgramSynthesis.Utils.Optional{System.String},System.String}})">
            <summary>
                Checks heuristics to decide if this lookup is allowed (not too confusing).
            </summary>
            <param name="lookup">Lookup to consider.</param>
            <returns><c>true</c> if the heuristics determine that the lookup will not be too confusing.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.CaseTransformation">
            <summary>
                A case transformation.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.CaseTransformation.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode,System.String)">
            <summary>
                Constructs a case transformation.
            </summary>
            <param name="programNode">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatNumber"/> program node.</param>
            <param name="columnName">The name of the column selected.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.CaseTransformation.CaseTransformationKind">
            <summary>
                The kind of case transformation.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.CaseTransformationKind">
            <summary>
                Kind of case transformation.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.CaseTransformationKind.Unknown">
            <summary>
                Unknown. This exists to be an invalid value for uninitialized values of this enum.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.CaseTransformationKind.Upper">
            <summary>
                All characters transformed to upper case.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.CaseTransformationKind.Lower">
            <summary>
                All characters transformed to lower case.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.CaseTransformationKind.SimpleTitleCase">
            <summary>
                Every word transformed such that the first character is upper case and the rest are lower case.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.Constant">
            <summary>
                A transformation that selects a constant string.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.Constant.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode)">
            <summary>
                Constructs a <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.Constant" /> transformation from a
                <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ConstStr(System.String)" /> program node.
            </summary>
            <param name="programNode">The <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ConstStr(System.String)" /> program node.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.Constant.ConstantString">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.Constant.FormatPartIndex">
            <summary>
                Index into the output <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> of this constant or <c>null</c> if this is a
                <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ConstStr(System.String)" /> constant.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.Constant.ExtraIdentity">
            <summary>
                Information other than the <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.ProgramNode" /> necessary to identify this
                transformation.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.DescriptionLookup">
            <summary>
                A cache of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription"/>s found using <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.DescriptionExtractionVisitor"/>.
                This allows for <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.OutputProvenanceVisitor"/> to not construct new <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription"/>s.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.DescriptionLookup.Descriptions">
            <summary>
                The found transformation descriptions.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.DescriptionLookup.Create(Microsoft.ProgramSynthesis.AST.ProgramNode)">
            <summary>
                Creates a new <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.DescriptionLookup" /> instance for a given Transformation.Text program, computes
                its transformation descriptions, and caches them in <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.DescriptionLookup.Descriptions" />.
            </summary>
            <param name="program">A Transformation.Text program node.</param>
            <returns>A new instance of <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.DescriptionLookup" /> with cached transformation descriptions.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatDateTime">
            <summary>
                A transformation that formats information about a datetime as a string.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatDateTime.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode,System.Int32)">
            <summary>
                Constructs a <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.FormatDateTime" /> transformation.
            </summary>
            <param name="programNode">The <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)" /> program node.</param>
            <param name="partIdx">
                The index into <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.FormatParts" /> of the <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" />
                this corresponds to.
            </param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatDateTime.Format">
            <summary>
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" /> used by <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatPartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat)" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatDateTime.WholeFormat">
            <summary>
                The entire output datetime format which <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatDateTime.Format"/> is one part of.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatDateTime.ExtraIdentity">
            <summary>
                Information other than the <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.ProgramNode" /> necessary to identify this
                transformation.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatDateTimeRange">
            <summary>
                A transformation that formats a date/time as a range string.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatDateTimeRange.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode,System.String)">
            <summary>
                Constructs a <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.FormatDateTimeRange" /> transformation.
            </summary>
            <param name="programNode">The <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatDateTimeRange(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec)" /> program node.</param>
            <param name="columnName">The name of the column selected.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatDateTimeRange.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec,System.String)">
            <summary>
                Constructs a <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.FormatDateTimeRange" /> transformation.
            </summary>
            <remarks>
                Can be used for a rewritten FormatDateTimeRange
            </remarks>
            <param name="programNode">The program node corresponding to a <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatDateTimeRange(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec)" /> operation.</param>
            <param name="dateTimeFormat">The format of the date/times in the range.</param>
            <param name="columnName">The format of the date/times in the range.</param>
            <param name="delimiter">The delimiter between the date/times in the range.</param>
            <param name="lowerRoundingSpec">The rounding specification for the lower date/time in the range.</param>
            <param name="upperRoundingSpec">The rounding specification for the upper date/time in the range.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatDateTimeRange.Format">
            <summary>
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> used by <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatDateTimeRange(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec)" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatDateTimeRange.Delimiter">
            <summary>
                <see cref="T:System.String" /> delimiter used by <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatDateTimeRange(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec)" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatDateTimeRange.LowerRoundingSpec">
            <summary>
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec" /> used by <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatDateTimeRange(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec)" /> for the lower number.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatDateTimeRange.UpperRoundingSpec">
            <summary>
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec" /> used by <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatDateTimeRange(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.PartialDateTime,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec)" /> for the upper number.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatNumber">
            <summary>
                A transformation that formats a number as a string.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatNumber.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode)">
            <summary>
                Constructs a <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.FormatNumber" /> transformation.
            </summary>
            <param name="programNode">The <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumber(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat)" /> program node.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatNumber.Format">
            <summary>
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat" /> used by <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumber(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat)" />.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatNumericRange">
            <summary>
                A transformation that formats a number as a range string.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatNumericRange.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode,System.String)">
            <summary>
                Constructs a <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.FormatNumericRange" /> transformation.
            </summary>
            <param name="programNode">The <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumericRange(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec)" /> program node.</param>
            <param name="columnName">The name of the column selected.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatNumericRange.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec,System.String)">
            <summary>
                Constructs a <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.FormatNumericRange" /> transformation.
            </summary>
            <remarks>
                Can be used for a rewritten FormatNumericRange
            </remarks>
            <param name="programNode">The program node corresponding to a <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumericRange(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec)" /> operation.</param>
            <param name="numberFormat">The format of the numbers in the range.</param>
            <param name="columnName">The format of the numbers in the range.</param>
            <param name="delimiter">The delimiter between the numbers in the range.</param>
            <param name="lowerRoundingSpec">The rounding specification for the lower number in the range.</param>
            <param name="upperRoundingSpec">The rounding specification for the upper number in the range.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatNumericRange.Format">
            <summary>
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat" /> used by <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumericRange(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec)" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatNumericRange.Delimiter">
            <summary>
                <see cref="T:System.String" /> delimiter used by <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumericRange(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec)" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatNumericRange.LowerRoundingSpec">
            <summary>
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec" /> used by <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumericRange(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec)" /> for the lower number.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.FormatNumericRange.UpperRoundingSpec">
            <summary>
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec" /> used by <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.FormatNumericRange(System.Nullable{System.Decimal},Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat,System.String,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec)" /> for the upper number.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.Lookup">
            <summary>
                A transformation that selects a string based on looking up its input in a lookup table in the program.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.Lookup.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode)">
            <summary>
                Constructs a <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.Lookup" /> transformation.
            </summary>
            <param name="programNode">The <c>Lookup()</c> program node.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.Lookup.LookupDictionary">
            <summary>
                The dictionary used to perform the lookup.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.ParseDateTime">
            <summary>
                A transformation that parses a string as a datetime.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.ParseDateTime.FormatIndex">
            <summary>
                Which input format to use.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.ParseDateTime.FormatPartIndex">
            <summary>
                Index into <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.FormatParts" /> of the <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" /> to use or <c>null</c>
                if the entire <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.ParseDateTime.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
                Constructs a <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.ParseDateTime" /> transformation.
            </summary>
            <param name="programNode">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.ParseDateTime" /> program node.</param>
            <param name="columnName">The name of the column selected.</param>
            <param name="formatIdx">Index of the <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> in the list of input formats.</param>
            <param name="formatPartIdx">
                Index of the <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart" /> in the <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat.FormatParts" />
                of the format selected by <paramref name="formatIdx" />, or <c>null</c> if the entire format is used.
            </param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.ParseDateTime.FormatForPart">
            <summary>
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat" /> used by <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.ParseDateTime" /> with just the part identified by
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.ParseDateTime.FormatPartIndex" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.ParseDateTime.Formats">
            <summary>
                The array of formats passed to
                <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParsePartialDateTime(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat[])" /> which
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.ParseDateTime.FormatIndex" /> indexes into.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.ParseDateTime.ExtraIdentity">
            <summary>
                Information other than the <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.ProgramNode" /> necessary to identify this
                transformation.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.ParseNumber">
            <summary>
                A transformation that parses a string as a number.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.ParseNumber.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode,System.String)">
            <summary>
                Constructs a <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.ParseNumber" /> transformation.
            </summary>
            <param name="programNode">The <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParseNumber(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails)" /> program node.</param>
            <param name="columnName">The name of the column selected.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.ParseNumber.FormatDetails">
            <summary>
                <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails" /> used by <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.ParseNumber(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormatDetails)" />.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.RoundNumber">
            <summary>
                A transformation that rounds a number.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.RoundNumber.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode,System.String)">
            <summary>
                Constructs a <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.RoundNumber"/> transformation.
            </summary>
            <param name="programNode">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.RoundNumber"/> program node.</param>
            <param name="columnName">The name of the column selected.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.RoundNumber.RoundingSpec">
            <summary>
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.RoundNumber.RoundingSpec"/> used by <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.RoundNumber"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.RoundDateTime">
            <summary>
                A transformation that rounds a date/time.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.RoundDateTime.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode,System.String)">
            <summary>
                Constructs a <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.RoundDateTime"/> transformation.
            </summary>
            <param name="programNode">The <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.RoundNumber"/> program node.</param>
            <param name="columnName">The name of the column selected.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.RoundDateTime.RoundingSpec">
            <summary>
                <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.RoundDateTime.RoundingSpec"/> used by <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.RoundNumber"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.Substring">
            <summary>
                A transformation that selects the text of an entire column.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.Substring.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode,System.String)">
            <summary>
                Constructs a <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.Substring" /> transformation.
            </summary>
            <param name="programNode">The <see cref="M:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Semantics.SubStr(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,System.Tuple{System.Nullable{System.UInt32},System.Nullable{System.UInt32}})" /> program node.</param>
            <param name="columnName">The name of the column selected.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.Substring.ExtraIdentity">
            <summary>
                Information other than the <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.ProgramNode" /> necessary to identify this
                transformation.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationCategory">
            <summary>
                What stage in the pipeline is this transformation.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationCategory.Unknown">
            <summary>
                Unknown. This exists to be an invalid value for uninitialized values of this enum.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationCategory.Constant">
            <summary>
                Output of a constant string; no transformation.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationCategory.Substring">
            <summary>
                Select a string from an input string. May either take a substring or the entire string.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationCategory.Parse">
            <summary>
                Interpret a substring according to some semantic rules.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationCategory.Mutation">
            <summary>
                Any modification step of the value between selecting/parsing it from the input and formatting it for output. These
                are steps that alter the value like rounding or changing the case as opposed to just changing its type/form.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationCategory.Format">
            <summary>
                Convert a value to its final string form for output.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription">
            <summary>
                A description of part of a Transformation.Text program.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.ProgramNode">
            <summary>
                The <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.ProgramNode" /> of this <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription" /> object describes.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.ColumnName">
            <summary>
                The column this transformation reads from for <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationCategory.Substring" /> and
                <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationCategory.Parse" /> transformations, <c>null</c> otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.Category">
            <summary>
                Where this transformation appears in a pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.Kind">
            <summary>
                Precise kind of transformation.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.ExtraIdentity">
            <summary>
                Information other than the <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.ProgramNode" /> necessary to identify this transformation.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.Identity">
            <summary>
                Key that identifies this transformation.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.Equals(Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind">
            <summary>
                Precise kind of a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.Unknown">
            <summary>
                Unknown. This exists to be an invalid value for uninitialized values of this enum.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.Constant">
            <summary>
                Output of a constant string; no transformation.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.Concat">
            <summary>
                Concatenation of two other transformations.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.Substring">
            <summary>
                Select a string from an input string. Uses some logic to select a substring.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.WholeColumn">
            <summary>
                Select the entire input column.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.Lookup">
            <summary>
                Lookup a string in a dictionary given in the program.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.ParseNumber">
            <summary>
                Parses a string as a number.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.ParseDateTime">
            <summary>
                Parses a string as information about a date and/or time.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.RoundNumber">
            <summary>
                Rounds a number to nearby number according to some <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.RoundDateTime">
            <summary>
                Rounds a date/time to nearby date/time according to some <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeRoundingSpec"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.CaseTransformation">
            <summary>
                Changes the casing of a string.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.FormatNumber">
            <summary>
                Formats a number as a string according to a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.FormatNumericRange">
            <summary>
                Formats a number as a range string according to a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.NumberFormat"/>, a string delimiter,
                and two <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.FormatDateTime">
            <summary>
                Formats a date and/or time as a string according to a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormatPart"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.FormatDateTimeRange">
            <summary>
                Formats a date/time as a range string according to a <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Dates.DateTimeFormat"/>, a string delimiter,
                and two <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.Semantics.Numbers.RoundingSpec"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.Description.WholeColumn">
            <summary>
                A transformation that selects the text of an entire column.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.Description.WholeColumn.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode,System.String)">
            <summary>
                Constructs a <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationKind.WholeColumn" /> transformation.
            </summary>
            <param name="programNode">The <c>WholeColumn(x)</c> program node.</param>
            <param name="columnName">The name of the column selected.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.WholeColumn.ExtraIdentity">
            <summary>
                Information other than the <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription.ProgramNode" /> necessary to identify this
                transformation.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.ProvenanceKind">
            <summary>
                How the output substring relates to the input substring.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.ProvenanceKind.Unknown">
            <summary>
                Relation is unknown. This should never be output.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.ProvenanceKind.Constant">
            <summary>
                Output is a constant string, so there is no input.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.ProvenanceKind.Lookup">
            <summary>
                Output is computed by looking input up in a lookup table.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.ProvenanceKind.Substring">
            <summary>
                Output is a substring of the input, so the output and input substrings are equal.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.ProvenanceKind.CaseTransformation">
            <summary>
                Output is identical to the input except for case. For example, output may be the lowercase version of the input.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.ProvenanceKind.DateTimeTransformation">
            <summary>
                Date/time semantics (e.g. "April" to "4") were used to transform the input into the output.
            </summary>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Transformation.Text.ProvenanceKind.NumberTransformation">
            <summary>
                Number semantics (e.g. rounding or truncating decimals) were used to transform the input into the output.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Transformation.Text.OutputProvenance">
            <summary>
                The source in the input of a specific substring of the output. In other words, the provenance of the value of a
                specific output substring.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.OutputProvenance.#ctor(Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,Microsoft.ProgramSynthesis.Transformation.Text.ProvenanceKind,Microsoft.ProgramSynthesis.Transformation.Text.Semantics.ValueSubstring,System.String,System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Transformation.Text.Description.TransformationDescription})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.ProgramSynthesis.Transformation.Text.OutputProvenance" /> class.</summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.OutputProvenance.InputColumnName">
            <summary>
                Name of the column the <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.OutputProvenance.InputSubstring" /> is from, or <c>null</c> if this is a
                <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.ProvenanceKind.Constant" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.OutputProvenance.Transformations">
            <summary>
                An ordered list of transformations used to get from the input value to the output value.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.OutputProvenance.TransformationIndexes">
            <summary>
                Indexes of <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.OutputProvenance.Transformations" /> in program's transformations.
                This exists to improve serialization, so only one copy of the transformations is needed.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.OutputProvenance.InputSubstring">
            <summary>
                A substring of the input column, or <c>null</c> if this is a <see cref="F:Microsoft.ProgramSynthesis.Transformation.Text.ProvenanceKind.Constant" />.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.OutputProvenance.OutputSubstring">
            <summary>
                The substring of the output this gives the provenance for.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Transformation.Text.OutputProvenance.Kind">
            <summary>
                How <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.OutputProvenance.OutputSubstring" /> relates to <see cref="P:Microsoft.ProgramSynthesis.Transformation.Text.OutputProvenance.InputSubstring" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Transformation.Text.OutputProvenance.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
    </members>
</doc>
