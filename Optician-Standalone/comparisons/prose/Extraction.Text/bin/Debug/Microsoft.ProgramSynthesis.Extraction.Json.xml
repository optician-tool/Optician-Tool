<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ProgramSynthesis.Extraction.Json</name>
    </assembly>
    <members>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Translation.Python.JsonExtractionPythonModule.GenerateUnisolatedCode(System.String)">
            <summary>
                Generates unisolated code, i.e., code that executes/lives in the global namespace,
                provided subclasses override this method appropriately.
                The default behavior is to call <see cref="M:Microsoft.ProgramSynthesis.Translation.Module`1.GenerateCode(`0)" />.
            </summary>
            <param name="headerModuleReference">
                A reference to the header module that the code in this module is dependent on.
            </param>
            <returns>A representation of the code corresponding to this module.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Translation.Python.JsonExtractionPythonModule.GenerateCode(System.String)">
            <summary>
                Generates code for all the functions that have been bound to a name in this module.
            </summary>
            <param name="headerModuleReference">
                A reference to the header module that the code in this module is dependent on.
            </param>
            <returns>A representation of the code for this module.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Extraction.Json.Translation.Python.PythonTranslator">
            <summary>
                A Python translator for the Extraction.Json DSL. Like the
                <see cref="T:Microsoft.ProgramSynthesis.Translation.Python.PythonTranslator`3" /> class, this
                class is not thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Translation.Python.PythonTranslator.GenerateOperatorApplication(System.String,System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Translation.SSARegister{System.String}})">
            <summary>
                Generates an application of the operator named <see cref="!:operatorName" />
                with <see cref="!:arguments" /> as its arguments.
            </summary>
            <param name="operatorName">The name of the operator which is to be applied</param>
            <param name="arguments">The arguments to the operator <see cref="!:operatorName" /></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Translation.Python.PythonTranslator.GenerateHeaderModule(Microsoft.ProgramSynthesis.Extraction.Json.Program,System.String)">
            <summary>
                Generates a module containing the header (if any) for
                the given program <see cref="!:p" />.
                The header can include any definitions required for the generated
                program corresponding to <see cref="!:p" /> to execute.
            </summary>
            <param name="p">A generated program</param>
            <param name="headerModuleName">The name of the header module.</param>
            <returns>
                A <see cref="T:Microsoft.ProgramSynthesis.Translation.Module`1" /> which contains the definitions that all code generated by this translator can
                implicitly depend on.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Translation.Python.PythonTranslator.CreateModule(System.String)">
            <summary>
                Creates a new module with the given name.
            </summary>
            <param name="moduleName">The name of the module to create.</param>
            <returns>A new <see cref="T:Microsoft.ProgramSynthesis.Translation.Module`1" /> named <see cref="!:moduleName" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Translation.Python.PythonTranslator.GenerateLiteralRepresentation(System.Object,System.Type)">
            <summary>
                Generates the representation of the literal in the target language.
            </summary>
            <param name="literalValue">An <see cref="T:System.Object" /> representing the value of the literal.</param>
            <param name="literalType">The type of the literal.</param>
            <returns>
                A representation of <see cref="!:literalValue" /> interpreted as a value
                of the type <see cref="!:literalType" /> in the target language.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenDocument">
            <summary>
                A constraint to flatten a JSON document into a tree/table.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenDocument.#ctor(System.String)">
            <summary>
                Creates a <see cref="T:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenDocument" /> constraint from the document text.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenDocument.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion}})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenDocument.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenDocument.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.OutputContains">
            <summary>
                A constraint to specify that a single output must appear in a column.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.OutputContains.Name">
            <summary>
                The column name of this instance.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.OutputContains.Output">
            <summary>
                The output that must appear in the column.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.OutputContains.Path">
            <summary>
                The path from the root to <see cref="P:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.OutputContains.Output"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.OutputContains.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion}})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.OutputContains.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion}})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <code>false</code>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.OutputContains.Valid(Microsoft.ProgramSynthesis.Program{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion}})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.OutputContains.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.OutputContains.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenRegion">
            <summary>
                A constraint to flatten a <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion" /> into a tree/table.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenRegion.#ctor(Microsoft.ProgramSynthesis.Wrangling.Json.ParsedJson)">
            <summary>
                Constructs a constraint to flatten <paramref name="parsedJson" />.
            </summary>
            <param name="parsedJson">The parsed JSON to flatten.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenRegion.ParsedRegion">
            <summary>
                The region to flatten.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenRegion.Path">
            <summary>
                The path from the root to the flatten region.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenRegion.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion}})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenRegion.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion}})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <code>false</code>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenRegion.Valid(Microsoft.ProgramSynthesis.Program{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion}})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenRegion.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenRegion.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.NoJoinInnerArrays">
            <summary>
                A constraint to not perform join on inner arrays.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.NoJoinInnerArrays.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion}})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.NoJoinInnerArrays.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion}})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <code>false</code>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.NoJoinInnerArrays.Valid(Microsoft.ProgramSynthesis.Program{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion}})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.NoJoinInnerArrays.SetOptions(Microsoft.ProgramSynthesis.Extraction.Json.SynthesisOptions)">
            <summary>
                Set the options defined by this constraint in <paramref name="options" />.
            </summary>
            <param name="options">The <see cref="T:Microsoft.ProgramSynthesis.Extraction.Json.SynthesisOptions" /> object to mutate.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.NoJoinInnerArrays.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.NoJoinInnerArrays.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.PreserveNodeAt">
            <summary>
                A constraint to keep a node from being flattened. The value of this node is the json text.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.PreserveNodeAt.#ctor(Microsoft.ProgramSynthesis.Wrangling.Json.JPath)">
            <summary>
                Constructs a constraint to keep a node from being flattened.
            </summary>
            <param name="path">The path to the node.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.PreserveNodeAt.Path">
            <summary>
            The path to the node the need to preserve.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.PreserveNodeAt.Equals(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion}})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.PreserveNodeAt.ConflictsWith(Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion}})">
            <summary>
                Checks if these constraints are obviously not valid together. That is, just by considering this and
                <paramref name="other" /> it is easy to tell that no program could possibly satisfy both of them. For instance, the
                two constraints could be examples that give different outputs.
            </summary>
            <param name="other">The constraint to check for conflicts.</param>
            <returns>
                True if the conjunction of the specifications of this constraint and <paramref name="other" /> is
                <code>false</code>.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.PreserveNodeAt.Valid(Microsoft.ProgramSynthesis.Program{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion}})">
            <summary>
                Validate a program against this constraint.
            </summary>
            <param name="program">The program that needs to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.PreserveNodeAt.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>
                A hash code for the current object.
            </returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Constraints.PreserveNodeAt.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
                true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Extraction.Json.Learner">
            <summary>
                Learns JSON compound programs.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Extraction.Json.Learner.Instance">
            <summary>
                The singleton instance of this class.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Extraction.Json.Learner.ScoreFeature">
            <summary>
                The <see cref="T:Microsoft.ProgramSynthesis.FeatureInfo" /> used for ranking the top-k programs in
                <see cref="M:Microsoft.ProgramSynthesis.Wrangling.ProgramLearner`3.LearnTopK(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{`1,`2}},System.Int32,System.Collections.Generic.IEnumerable{`1},System.Nullable{System.Threading.CancellationToken})" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Learner.LearnTopK(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion}}},System.Int32,System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion},System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Learns <paramref name="k" /> top-ranked programs from the given positive and negative examples.
                Returns all tied results in case of a tie.
            </summary>
            <param name="constraints">The examples.</param>
            <param name="k">The number of programs returned.</param>
            <param name="additionalInputs">
                The set of additional references that do not have output examples, which helps learn and
                rank programs.
            </param>
            <param name="cancel">
                The token to monitor for cancellation requests. The default value is
                <see cref="P:System.Threading.CancellationToken.None" />.
            </param>
            <returns>The top-ranked programs.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Learner.LearnAll(System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Constraints.Constraint{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeOutput.ITreeOutput{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion}}},System.Collections.Generic.IEnumerable{Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion},System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Learns all programs from the given positive and negative examples.
            </summary>
            <param name="constraints">The examples.</param>
            <param name="additionalInputs">
                The set of additional references that do not have output examples, which helps learn
                programs.
            </param>
            <param name="cancel">
                The token to monitor for cancellation requests. The default value is
                <see cref="P:System.Threading.CancellationToken.None" />.
            </param>
            <returns>The set of all programs consistent with the examples.</returns>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Extraction.Json.Loader.Instance">
            <summary>
                Singleton instance of <see cref="T:Microsoft.ProgramSynthesis.Extraction.Json.Loader" />.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Loader.Load(System.String,Microsoft.ProgramSynthesis.AST.ASTSerializationFormat)">
            <summary>
                Loads a <see cref="T:Microsoft.ProgramSynthesis.Extraction.Json.Program" /> that has been serialized to <paramref name="serializedProgram" />.
            </summary>
            <param name="serializedProgram">
                The serialized program generated by
                <see cref="M:Microsoft.ProgramSynthesis.Program`2.Serialize(Microsoft.ProgramSynthesis.AST.ASTSerializationFormat)" />.
            </param>
            <param name="serializationFormat">The serialization format of <paramref name="serializedProgram" />.</param>
            <returns>A <see cref="T:Microsoft.ProgramSynthesis.Extraction.Json.Program" /> deserialized from <paramref name="serializedProgram" />.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Loader.Create(Microsoft.ProgramSynthesis.AST.ProgramNode)">
            <summary>
                Wraps a <see cref="T:Microsoft.ProgramSynthesis.AST.ProgramNode" /> in a <see cref="T:Microsoft.ProgramSynthesis.Extraction.Json.Program" />. <paramref name="program" /> must be a
                valid program for a <see cref="T:Microsoft.ProgramSynthesis.Extraction.Json.Program" />.
            </summary>
            <param name="program">The code of the program.</param>
            <returns>A strongly-typed <see cref="T:Microsoft.ProgramSynthesis.Extraction.Json.Program" /> object wrapping <paramref name="program" />.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Extraction.Json.Session">
            <summary>
                A json extractoin session. See <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3" /> for the API for
                learning sessions.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Session.#ctor(Microsoft.ProgramSynthesis.Wrangling.Session.IJournalStorage,System.Globalization.CultureInfo,Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger)">
            <param name="journalStorage">
                Backing store for the journal of user actions used to adapt to user preferences. May be
                null to not save this data.
            </param>
            <param name="culture">
                The <see cref="T:System.Globalization.CultureInfo" /> to use when learning programs; accessible using
                <see cref="P:Microsoft.ProgramSynthesis.Wrangling.Session.Session`3.Culture" />. Used to select preferred date and number formats and
                defaults for other culture-specific settings.
            </param>
            <param name="logger">
                The <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Logging.ILogger" /> implementation to use for providing telemetry information.
            </param>
        </member>
        <member name="F:Microsoft.ProgramSynthesis.Extraction.Json.SynthesisStrategy.ArrayAsObjectThreshold">
            <summary>
                The number of array elements that look similar in order to consider it as objects.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.SynthesisStrategy.LearnFromConstraints(System.Collections.Generic.IReadOnlyList{Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenRegion},System.Collections.Generic.IReadOnlyList{Microsoft.ProgramSynthesis.Extraction.Json.Constraints.OutputContains},Microsoft.ProgramSynthesis.Extraction.Json.SynthesisOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Learns a list of extraction programs.
            </summary>
            <param name="flattenRegions"> All flatten constraints.</param>
            <param name="outputContains"> All output constraints.</param>
            <param name="options"> The synthesis options.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A list of extraction programs.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.SynthesisStrategy.LearnBodyFromConstraints(System.Collections.Generic.IReadOnlyList{Microsoft.ProgramSynthesis.Extraction.Json.Constraints.FlattenRegion},System.Collections.Generic.IReadOnlyList{Microsoft.ProgramSynthesis.Extraction.Json.Constraints.OutputContains},Microsoft.ProgramSynthesis.Extraction.Json.SynthesisOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Returns a list of (schema) element programs.
                This function returns a list instead of a single element program because we want to flatten the object instead of
                having the nested ones.
                For instance, we want {a: {b: 1, c: 2}} to be flattened into {a.b: 1, a.c: 2}
                At the caller site, we will group these programs into a struct if necessary.
            </summary>
            <param name="flattenRegions"> All flatten constraints.</param>
            <param name="outputContains"> All output constraints.</param>
            <param name="options"> The synthesis options.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A list of schema element programs.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.SynthesisStrategy.LearnFlatten(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.ProgramSynthesis.Wrangling.Json.JpathStep.JPathStep},Microsoft.ProgramSynthesis.Extraction.Json.SynthesisOptions,System.Collections.Generic.IReadOnlyList{Newtonsoft.Json.Linq.JToken},System.Boolean)">
            <summary>
                Returns all possible schema programs, each of which is a list of (schema) element.
                A schema program is a list instead of a single element program because we want to flatten the object instead of
                having the nested ones.
                For instance, we want {a: {b: 1, c: 2}} to be flatten into {a.b: 1, a.c: 2}
            </summary>
            <param name="name">The name prefix (relative to the referencing node)</param>
            <param name="steps">
                The current list of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Json.JpathStep.JPathStep" /> (relative to the referencing node) that is used to
                build the program.
            </param>
            <param name="options"> The synthesis options.</param>
            <param name="nodes">
                All nodes of the same "path" that belong to the referencing node.
                This method learns programs that satisfy all these node.
                These nodes must have the same type (e.g., array, object, or value).
                They may have different structures (e.g., some properties in an object may be missing).
            </param>
            <param name="canJoinArrays"> Specifies whether arrays can be joined.</param>
            <returns>A list of schema element programs.</returns>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Extraction.Json.SynthesisOptions">
            <summary>
                Holds the synthesis options.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Extraction.Json.SynthesisOptions.PreservedTokens">
            <summary>
                All tokens that need to be preserved.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Extraction.Json.SynthesisOptions.NoJoinInnerArrays">
            <summary>
                Indicates that inner arrays are not joined.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Extraction.Json.SchemaParser">
            <summary>
                Parses a program node to a schema.
            </summary>
        </member>
        <member name="T:Microsoft.ProgramSynthesis.Extraction.Json.Program">
            <summary>
                Represents a program to extract a nested tree of <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion" />s from a JSON file.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Program.#ctor(Microsoft.ProgramSynthesis.AST.ProgramNode,System.Boolean,System.String,System.String,System.Double)">
            <summary>
                Constructs a program from a program node.
            </summary>
            <param name="program">The core framework program node.</param>
            <param name="acceptNdJson">The flag to indicate the program only accepts newline-delimited Json.</param>
            <param name="startDelimiter">The extra delimiter at the start (if exists) for new-line delimited JSON.</param>
            <param name="endDelimiter">The extra delimiter at the end (if exists) for new-line delimited JSON.</param>
            <param name="score">The score of the program.</param>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Extraction.Json.Program.Schema">
            <summary>
                The schema of this program.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Extraction.Json.Program.AcceptNdJson">
            <summary>
                Specifies whether this program only accepts newline-delimited json text.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Extraction.Json.Program.StartDelimiter">
            <summary>
                The optional extra delimiter at start of lines in case <see cref="P:Microsoft.ProgramSynthesis.Extraction.Json.Program.AcceptNdJson" /> is true.
            </summary>
        </member>
        <member name="P:Microsoft.ProgramSynthesis.Extraction.Json.Program.EndDelimiter">
            <summary>
                The optional extra delimiter at end of lines in case <see cref="P:Microsoft.ProgramSynthesis.Extraction.Json.Program.AcceptNdJson" /> is true.
            </summary>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Program.Run(Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion)">
            <summary>
                Executes the program on the <paramref name="input" /> to obtain the tree output.
            </summary>
            <param name="input">The input region.</param>
            <returns>The output tree.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Program.Run(System.String)">
            <summary>
                Executes the program on the <paramref name="inputText" /> to obtain the tree output.
            </summary>
            <param name="inputText">The input document text.</param>
            <returns>The output tree.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Program.RunTable(Microsoft.ProgramSynthesis.Wrangling.Json.JsonRegion,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics)">
            <summary>
                Executes the program on the <paramref name="input" /> to obtain the table output.
            </summary>
            <param name="input">The input region.</param>
            <param name="semantics">The semantics of generating the table. See <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics" />.</param>
            <returns>The output table.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Program.RunTable(System.String,Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics)">
            <summary>
                Executes the program on the <paramref name="inputText" /> to obtain the table output.
            </summary>
            <param name="inputText">The input document text.</param>
            <param name="semantics">The semantics of generating the table. See <see cref="T:Microsoft.ProgramSynthesis.Wrangling.Schema.TreeToTableSemantics" />.</param>
            <returns>The output table.</returns>
        </member>
        <member name="M:Microsoft.ProgramSynthesis.Extraction.Json.Program.Serialize(Microsoft.ProgramSynthesis.AST.ASTSerializationFormat)">
            <summary>
                Serializes the program to a string.
            </summary>
            <param name="serializationFormat">The desired serialization format (XML or human-readable).</param>
            <returns>The serialized program.</returns>
        </member>
    </members>
</doc>
